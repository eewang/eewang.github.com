<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[eugenius]]></title>
  <link href="http://eewang.github.com/atom.xml" rel="self"/>
  <link href="http://eewang.github.com/"/>
  <updated>2014-09-25T21:15:56-04:00</updated>
  <id>http://eewang.github.com/</id>
  <author>
    <name><![CDATA[Eugene Wang]]></name>
    <email><![CDATA[eugene.wang.77@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Of Spreadsheets and Software]]></title>
    <link href="http://eewang.github.com/blog/2014/09/24/of-spreadsheets-and-software/"/>
    <updated>2014-09-24T21:14:00-04:00</updated>
    <id>http://eewang.github.com/blog/2014/09/24/of-spreadsheets-and-software</id>
    <content type="html"><![CDATA[<p>A co-worker of mine recently attended <a href="https://thestrangeloop.com/">Strange Loop</a> in St. Louis and directed me to a <a href="https://www.youtube.com/watch?v=0CKru5d4GPk">presentation by Felienne Hermans about spreadsheets</a> and their potential as a tool for developers. Although I&#8217;ve lost some of my Excel skill since my finance days, I find that the thought process underlying software applications and spreadsheets are remarkably similar.</p>

<!--more-->


<p>I entirely agree with Felienne about the power and ubiquity of spreadsheets. My initial foray into software development was through the trojan horse of Excel. What started out as basic functions to support models around investor liquidity and product pricing eventually morphed into a tangle of VBA code to automate data processing. I never thought of Excel functions themselves as code, although now it makes a lot more sense.</p>

<p>Perhaps the best argument from my perspective for learning about spreadsheets is that they are practically the lingua franca of business people. As developers, our main task is to build software for users in a way they understand, and what better tool to use than one that comes installed by default in most corporate laptop setups.</p>

<p>Felienne points out that while spreadsheets haven&#8217;t typically been the playground of serious developers, modern best practices in building software can be a deep resource for spreadsheet users to improve and standardize their Excel models. Testing and refactoring are the two examples cited in the presentation. When I was building Excel models in my previous job in finance, I never thought about testing my code. As for refactoring, I knew the benefits that could be gained, but it was never something I thought important or could systematically implement (or even successfully, given that I didn&#8217;t have any tests to protect business functionality).</p>

<p>Looking back, I realize that had I known how to code, I could have been more effective at my job. That said, I probably would have still used the same tools (i.e., Excel) to do my work. Its hard to overstate the utility of Excel as a proto-software IDE in a business environment. A language, framework and text editor all wrapped in one, Excel runs consistently on every person&#8217;s machine (provided that everyone is on the same version) and doesn&#8217;t run the same risk of customization among its users (less technically saavy than the average developer) as software packages have. Excel files are easy to email around and don&#8217;t typically rely on third-party libraries likes a Rails app would, so there is a low barrier to use and distribution.</p>

<p>Where I would have done my job differently had I known how to code is in the area of version control and distribution. I&#8217;m consistently impressed with the Git and Github model of version control and collaboration, and I would like to think that using Git to manage Excel models would have been a better strategy - provided that others on my team were willing to learn the technology - than renaming Excel files with a &#8220;v*&#8221; suffix and re-emailing out the latest version each time I made a change.</p>

<p>Coding with all our preferred tooling is great, but at the end of the day, if our job is to build usable software for the less-technically inclined, spreadsheets are a great way to achieve some level of automation and computing power while avoiding the steep learning curve demanded by traditional software development. When I first started to code, simply using my terminal was a challenge (don&#8217;t get me started on vim). And while understanding and manipulating spreadsheets is still an acquired skill, spreadsheets are a great tool just to get something up and running that can be shared and used by other, non-technical people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsConf 2014 Reflections, Part 2 of 2]]></title>
    <link href="http://eewang.github.com/blog/2014/05/01/railsconf-2014-reflections/"/>
    <updated>2014-05-01T19:07:00-04:00</updated>
    <id>http://eewang.github.com/blog/2014/05/01/railsconf-2014-reflections</id>
    <content type="html"><![CDATA[<p>At any large conference like RailsConf, there&#8217;s bound to be a mix of presentations. There&#8217;s only so many talks you can listen to about service-oriented architecture (or TDD?) before it becomes a catchphrase, devoid of all practical meaning. Thankfully, Ruby Central, the RailsConf organizers, tried to organize <a href="http://www.railsconf.com/program#sessions" target="_blank">the talks</a> around certain themes within four tracks in order to both group together and spread out the related talks. These themes had titles like &#8220;Beyond ERB&#8221; (how to set up front-end views without ERB), &#8220;Play Nicely&#8221; (how to work in a team environment and contribute to open-source) and &#8220;Big Rails&#8221; (how to manage and refactor a monolithic Rails app).</p>

<!--more-->


<p>Overall, I found these groupings helpful for determining what I wanted to focus on and largely successful in guiding me toward the talks I thought most interesting. As much as I enjoy a good technical talk on introducing a services layer into my Rails architecture, less code-centric presentations like the one I attended on the serendipitous discovery of a sensible user interface for microwaves are just as enjoyable. Coding is just a part of the wide world of software development, so the fact that the organizers sprinkled talks on career development, design sensibilities and product management throughout the four days made the technical conference more palatable and enjoyable to me.</p>

<p><strong>All The Little Things - Sandi Metz</strong></p>

<p>Beyond the two keynotes I mentioned <a href="http://localhost:4000/blog/2014/04/29/railsconf-2014-reflections/" target="_blank">in my last post</a>, Sandi Metz gave a fantastic presentation on refactoring - I recommend everyone reading this to go check it out when it comes online. She took a massively nested conditional (clocking in at around 50 lines of code) and systematically broke it down into small methods and then small classes with a well-defined API of limited scope, all the while using the existing test suite to guide her actions. This is what’s so useful about a robust test suite - you can refactor the underlying code without knowing anything about the problem domain, so long as the tests cover all the business-necessary functionality (which, granted, is a big IF).</p>

<p>Sandi turned me on to the Squint Test - a process of inferring complexity in your code from the shape and color of your classes and methods. The Squint Test basically recommends squinting at your screen, or otherwise turning down the visual clarity of your code, and discerning the shape and color of your code. A flat shape indicates less nesting compared to a lumpy shape, since if-statements and blocks cause indentation within a method. Similar colors indicate a similar level of abstraction, since text editors will color constants differently from local or instance variables. The rule of thumb this hits on is keeping your methods to a tight layer of abstraction - i.e., mostly of the same color - rather than having all colors of the abstraction rainbow in a single method. I love this test because its a visual heuristic - taking advantage of our natural recognition of colors, shapes and forms to indicate code complexity.</p>

<p>She also argued that keeping code DRY at all times should not be your first priority as a developer. Duplication is sometimes an easy monster to slay because it is both easy to spot and we’re taught that its bad from the very beginning of our coding journey. Yet duplication is preferable over the wrong abstraction (e.g., a massively complex conditional or large classes), and so the focus should first be on refactoring toward the right abstraction before cutting back on duplication. In fact, as you move toward the goal of simplicity, you’ll likely encounter more intermediate complexity and duplicated code along the way.</p>

<p>What I love about Sandi Metz is that even though she’s clearly a great developer, she is able to address the obstacles facing new or junior developers who may not have heard of half the concepts in many a RailsConf presentation. She speaks about code in a plain, accessible manner without the mumbo-jumbo of developer buzzwords like TDD or Domain-Driven Design. She takes everyday anti-patterns that developers face on a daily basis (who hasn’t encountered a multi-level nested conditional?) and systematically demonstrates both why those anti-patterns are harmful for the long-term development of an application and how to correct it.</p>

<p><strong>Tricks That Rails Didn’t Tell You About - Carlos Antonio da Silva</strong></p>

<p>Many talks at RailsConf described how to move from a monolithic Rails app to a service-oriented (or, even, <a href="http://www.railsconf.com/program#prop_413" target="_blank">hexagonal</a>) architecture, or focused on how to design a better domain model. I enjoyed this talk by Carlos (developer at <a href="http://plataformatec.com.br/" target="_blank">Platformatec</a> and a member of the Rails core team) because it fell on the opposite side of the concrete-abstract spectrum, in that he spoke about numerous handy, practical tips in Rails that I was previously unaware of. Tips like the difference between <code>Array#present?</code> and <code>Array#any?</code> or <code>Array#exists?</code> (the former loads the association in one query) and the <code>rake notes</code> command to see a command-line summary of the comments and notes in your app. While I may not be able to move immediately to an SOA tomorrow, I can start using these tools in my day-to-day code.</p>

<p>Also, did you know that running <code>rake rails:update</code> will initiate a guided tour of your app to update to the most recent version of Rails? I sure didn’t, but now I have a single source to figure out what I need to change when updating to the newest Rails version.</p>

<p><strong>Effectively Testing Services - Neal Kemp</strong></p>

<p>In his talk, Neal (independent developer) discussed several different strategies for testing services, both external APIs (e.g., Facebook) or internal services, like those I use at the NYT. As your software architecture becomes increasingly service-oriented, maintaining the touch points with other teams become all the more critical. Having a dependency on an inconsistent API can make it more challenging to identify bugs in your code, since it can create uncertainty as to whether your code is broken or the service you depend on is faulty.</p>

<p>At the NYT, we often interact with other teams through an API. We&#8217;ve found that the integration points where services interact are often high on the list of pain points, especially when those services are under active development and you may be interacting with a less-than-stable version of an internal service. Even beyond stability and scalability of a service maintained outside of your immediate group, services can have other, often more insidious, problems, like inconsistent return values.</p>

<p>For example, I&#8217;ve had the experience working on an internal API that I thought always returned an collection, unless there was only one object, at which point the response would be a hash of key-value pairs rather than an array of one. The most pernicious factor of these inconsistent return values is not that they occur, but that they are hidden and data-dependent, and are thus more prone to pop up in production when you least expect it.</p>

<p>Helpful tools like <a href="https://github.com/bblimke/webmock" target="_blank">webmock</a>, <a href="https://github.com/mdub/sham_rack" target="_blank">ShamRack</a> and <a href="https://github.com/vcr/vcr" target="_blank">VCR</a> allow you to stub out requests in your testing suite (e.g., webmock) and record / play back specific responses so that you aren&#8217;t dependent upon network connection when running your tests (e.g., VCR). We use these mocking tools in my group, and they&#8217;ve proven quite useful in testing our integration with various services, both internal and external (e.g., AWS).</p>

<p><strong>Discovering User Interactions - Cameron Daigle</strong></p>

<p>Approaching user interface design from a web development perspective, I&#8217;m often bemused at the fact that many objects we come in contact with on a daily basis have unnecessarily inscrutable interfaces. For example, I still - to this day - find the average TV remote control difficult to decipher at first glance, and if I hadn&#8217;t spent many years watching TV as a child, I probably would have little intuitive understanding of what to do after I press the &#8220;ON&#8221; button. As a developer, I have the power to change a web application&#8217;s user interface by sprinkling in some JS event handlers or CSS animations. But physical objects like a remote are built at a single point in time and have no dynamic ability (disregarding more modern, touchscreen controls) to change their buttons or switches.</p>

<p>Cameron (senior designer at <a href="http://hashrocket.com/" target="_blank">Hashrocket</a>) touched on these ideas in an insightful and humorous talk on how everyday objects like coffee makers and ATMs can provide guidance on how best to design a user interface. He made the argument for consistent interfaces that leverage commonly held patterns of behavior and understanding among the expected user group. Avoid using different &#8220;modes&#8221;, like how some microwaves confusingly have various modes for defrosting, cooking, softening, etc. Make use of low-cost shortcuts that minimize the need for a user to make a decision, like how certain coffeepots automatically turn the hot water spout over the ground coffee when the lid is closed. And don&#8217;t make assumptions about user behavior that could have disasterous consequences, like how a certain other coffeepot has a &#8220;self-destruct&#8221; button that swivels the pouring vessel away from the pot when pressed, even while brewing.</p>

<p> Intuitive user interfaces are great, but I sense that there is a tension between the simplicity of a user interface and the broad usability of that interface. Cameron argued that design should leverage your users&#8217; intuitive understanding of interaction. But whose intuition? A simple, intuitive design implicity and by necessity builds off of some cultural assumptions about how people respond to commands and instructions. Everyone &#8220;knows&#8221; that red means stop and green means go, except when they don&#8217;t, so doesn&#8217;t an interface built with this in mind potentially exclude users that don&#8217;t have that cultural understanding? Granted, this is a contrived example, and clearly the goals of achieving interface clarity, deep functionality and broad usability are not entirely mutually exclusive. Nevertheless, its important to recognize the tradeoffs between these goals. There will always be a tension in priorities when trying to design the &#8220;best&#8221; user interface. What I think matters the most is being purposeful in your design choices and knowing what they cost.</p>

<p><strong>Curmudgeon: An Opinionated Look at an Opinionated Framework - Ernie Miller</strong></p>

<p>After all the talks by the heavy hitters in the Ruby/Rails community (e.g., DHH, tenderlove and Sandi), I thought this final-day presentation by Ernie on the drawbacks of Rails as a heavy framework quite insightful.</p>

<p>For example, run the following command via console in a bare-bones Rails app: <code>ActiveRecord::Base.ancestors</code>, and you’ll see what Ernie was talking about regarding the heaviness of ActiveRecord in how many modules and classes are included when you inherit from ActiveRecord. The ORM simply tries to do a ton of stuff - timestamps, reflection, serialization, nested attributes, associations, persistence, validation, querying, etc. As Ernie put it, ActiveRecord does follow the single-responsibility principle, but only if you consider that responsibility to include everything that it does.</p>

<p>When I was starting off with Rails, I fell into the trap of thinking that all models had to inherit from ActiveRecord::Base. Adding a plain-old Ruby class to my app seemed to run against the grain of ActiveRecord, when in fact, I’ve found that starting with simple Ruby objects and adding components from ActiveRecord (e.g., ActiveRecord::Validations, ActiveRecord::Callbacks) independently as modules to be both more targeted and purposeful but also a better way of communicating to other developers how you envision that object operating within your domain. I like to think of models that inherit from ActiveRecord::Base as my primary objects and ActiveModel::Model classes and my simple Ruby classes or to be secondary and tertiary concerns in my object graph.</p>

<p>Ernie&#8217;s argument about being more picky about what to include or exclude from Rails&#8217;s large toolbox of sub-frameworks makes sense. Why add all that cruft to your application if you don&#8217;t even plan to use it (you could also just build a Sinatra app)? Yet in some ways, and especially for developers new to Rails who just want to build stuff, all the extra functionality that comes with the seemingly innocuous inheritance from ActiveRecord::Base is free, helps you get set up with a working website quickly and is reasonably performant, at least initially.</p>

<p>Those were just five of the many sessions at RailsConf 2014, covering not just technical topics but also more general interest stuff like career development. In particular, there were two panel discussions about the future of Rails jobs and what it takes to teach the next generation of great developers that generated some great conversation. Those panels featured well-known people in the Ruby/Rails community like Ben Orenstein of <a href="http://thoughtbot.com/" target="_blank">Thoughtbot</a> and Jeff Casimir of <a href="http://jumpstartlab.com/" target="_blank">Jumpstart Labs</a>.</p>

<p>And according to <a href="https://twitter.com/railsconf/status/460860347025354753" target="_blank">this tweet by @RailsConf2015</a>, the talks should be up on <a href="http://www.confreaks.com" target="_blank">ConFreaks</a> in about a month. So check them out for yourself!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsConf 2014 Reflections, Part 1 of 2]]></title>
    <link href="http://eewang.github.com/blog/2014/04/29/railsconf-2014-reflections/"/>
    <updated>2014-04-29T08:59:00-04:00</updated>
    <id>http://eewang.github.com/blog/2014/04/29/railsconf-2014-reflections</id>
    <content type="html"><![CDATA[<p>This past week, I had the great privilege to visit Chicago and attend RailsConf 2014. Before RailsConf, I had been to two conferences - GORUCO 2013 and Windy City Rails 2013 - both of which had enough attendees to fill only a single track of talks. RailsConf, on the other hand, had four tracks (even five, at times) that were roughly grouped by focus area, like around domain design, careers or refactoring. Needless to say, RailsConf 2014 was the largest conference I’ve attended in my short career as a developer.</p>

<!--more-->


<p>In full honesty, attending RailsConf was part-work and part-vacation for me, in that in hailing from the Chicagoland area, I saw it as an easy decision to attend when offered the opportunity to go to one major conference a year on the NYT dime. Because of this, I didn’t do as much after-conference socializing as I probably would have done were RailsConf not held in a city where my family and friends live. While I wouldn’t have given up catching up with friends and seeing my family for anything, it would have been nice to have been more active in meeting people at the conference.</p>

<p>I found the best talks of the conference to be DHH’s opening keynote, Aaron Patterson’s (i.e., @tenderlove) closing keynote, and Sandi Metz’s talk on refactoring, which I’ll go into in Part 2. Sandi’s talk didn’t get the prime-time slot as the two keynote presentations, but I found it just as informative and useful in thinking about how to structure code.</p>

<p>DHH and Aaron gave almost polar opposite talks, in terms of style, focus and substance. DHH stayed high-level and abstract - focusing on what he sees is the emergence of an unhealthy obsession with test coverage, metrics and coding practices like TDD. We are software writers, not scientists, he said. Maintaining a religious devotion to measuring our code quality and slavishly obeying coding patterns and paradigms like TDD or “Tell, Don’t Ask” leads us to miss the mark in delivering on what we are paid to do - write functioning software.</p>

<p>Aaron, in contrast, gave a pretty technical talk (for a keynote presentation) on ActiveRecord internals and ended by merging his experimental AdequateRecord branch into the Rails master branch, a significant and symbolic gesture. Complete with graphs and performance benchmark numbers (i.e., science!), his talk touched on how improvements in SQL statement caching has led to the performance improvements of AdequateRecord, and also gave a helpful, whirlwind tour of how ActiveRecord translates a query (e.g., <code>Post.find_by_name(‘foo’)</code>) into raw SQL and returns a domain object.</p>

<p>While the two talks seemed quite dissimilar, at the end of the day, it seems to me that both Aaron and DHH are correct in how they approach software engineering / development / writing, however you want to call it. If that seems too neat, tidy and cliche for you, I apologize, but I think coding, in practice, is both art and science. Early on in the product development lifecycle, coding may be more like writing than science. Optimization and maintaining a robust test suite seems like overkill when its not even clear what it is you’re trying to build.</p>

<p>However, there comes a point when you start solidifying the codebase, product features become more refined and business users develop a more coherent process. At this point, traffic increases, infrastructure expands and optimization becomes a critical focus to maintaining a consistent and pleasant user experience. Here, there’s at least a few clear metrics to measure yourself against; when a user clicks on a link or takes some action on my app, how quickly can the app return a response? This question encompasses a wide array of application pain points - asset rendering, SQL query counts, database connections, etc. - but ultimately, it all boils down to actual milliseconds and (hopefully not) seconds.</p>

<p>To me, this is what Aaron was getting at in his talk on AdequateRecord. Rails has matured to the point where its clear what its trying to do and the feature set is robust. Aaron even said that he doesn’t want to see more features get added to Rails. Fine-tuning Rails and ActiveRecord inevitably means benchmarking and taking a scientific approach to improvements by changing individual inputs into the system and measuring the output each time (e.g., if I call <code>includes</code> on this association rather than <code>joins</code> how does that improve my performance?).</p>

<p>Software development as both writing and science do not have to be mutually exclusive. In fact, I sincerely hope they are not. I enjoy building software precisely because it engages both the creative / writing side as well as the mathematical / scientific side of my brain. When I’m busy iterating on a product early on in the lifecycle, I can both enjoy the process of coming up with creative solutions (even if they are hacky and not the most efficient) yet also know that there will come a time when I can focus on refactoring and optimizing what I’ve built. These two dimensions to code keep me from exhausting my mental resources capable of handling creative expression and scientific calculation. To my knowledge, software is one of the few industries that can maintain this duality, a healthy relationship between creativity and scientific reasoning. And for that, I’m tremendously thankful that I get to operate at that juncture.</p>

<p>If you haven&#8217;t seen the DHH and Aaron Patterson keynotes, check them on on <a href="http://confreaks.com" target="_blank">ConFreaks</a> when they get posted. Definitely worth watching!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's that (code) smell? How to monitor code quality in Ruby and Rails]]></title>
    <link href="http://eewang.github.com/blog/2014/01/18/how-to-smell-check-your-code-quality-in-ruby-and-rails/"/>
    <updated>2014-01-18T09:24:00-05:00</updated>
    <id>http://eewang.github.com/blog/2014/01/18/how-to-smell-check-your-code-quality-in-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>I&#8217;ve found that as you progress in your code career, you start to discover more patterns in how to structure code and how to address common questions. In the same vein, you also learn what not to do and your sense for code smells improves. Your methods might get smaller, your logic better encapsulated and your classes more singularly responsible. Thinking more strategically about how to implement features with an eye to code maintainability, complexity and readability is a career-long endeavor. There&#8217;s no single set of tools that will make you a better developer, but I&#8217;ve recently come across several gems that have helped me develop a better sense for code quality and development standards.</p>

<!--more-->


<p>As you become a better developer, it never hurts to have someone watching over your code, keeping you accountable to the best practices that you know in your heart but rarely exercise with your hands. In a perfect world, that would be a senior developer or other more seasoned mentor who can pair program with you and is highly invested in your success. If you happen to find yourself in that situation, that&#8217;s fantastic. In any case, it doesn&#8217;t hurt to have some automated tools that can quickly run through your code, find duplication, unused methods or non-descriptive variable names.</p>

<p>At the more involved end of the spectrum, there are hosted solutions for checking code quality like <a href="http://codeclimate.com" target="_blank">Code Climate</a>. But those can get pretty expensive and might be overkill for keeping your code up to snuff on a daily basis for small projects. On my team, we&#8217;re exploring using tools like Code Climate, but me and my fellow developers have started integrating more code quality checks on our local branches so that any PRs we submit are as clean as can be.</p>

<p>Reek, rails_best_practices, Rubocop and metric_fu are 4 gems in particular that I&#8217;ve been using recently to sniff my code and tell me what&#8217;s pleasant, what&#8217;s pungent and what downright reeks. While each gem takes a slightly different approach to checking your code and displaying the results, I&#8217;ve found them all to be useful in finding syntactic sugar or challenging me to apply more sustainable code paradigms to solving problems in my applications.</p>

<p>The gems aim to notify you of where your code falls short of accepted best practices and suggest ways you can improve code quality. The phrase &#8216;code quality&#8217; has always appeared a little slippery to me, since determining whether a code base is high-quality seems linked to the idiosyncracies of a particular application&#8217;s purpose and is thus difficult to establish universal code quality standards. However, there are rules-of-thumb that are relevant for all applications when determining how &#8220;good&#8221; a code base is. These criteria range from high-level, design pattern implementation to low-level, syntactical choices. Properly applying concepts like well-encapsulated logic, division of responsibilities and descriptive method names can help improve the quality of an application, regardless of the application&#8217;s purpose.</p>

<p>I decided to run these four gems against what was probably my most hacky, yet functional, piece of code that I&#8217;ve written - my Lollapalooza scraper. I wrote about this previously in <a href="http://eewang.github.io/blog/2013/03/21/how-to-hack-lollapalooza-and-still-not-get-tickets/">my blog here</a>, but basically I hacked together a web scraper back when I was at Flatiron that would check the Lollapalooza website and text me via Twilio whenever early bird tickets went on sale. The overarching goal was so that I could get discounted tickets without checking the site randomly but frequently over the course of a few days, since the festival organizers wouldn&#8217;t say when early bird tickets would go on sale.</p>

<p><strong>Reek</strong></p>

<p><a href="https://github.com/troessner/reek" target="_blank">Reek</a> is a gem that will comb through your application (or specific folder / file) and notify you of where you&#8217;re not following best practices. Generally accepted practices like not using single letters for variable names or not having multiple nested conditional statements are caught pretty quickly. What&#8217;s also great about Reek is that it also informs you of what coding practice you&#8217;re violating with your smelly code. There&#8217;s a slew of code patterns that Reek checks for, and I&#8217;ve found their <a href="https://github.com/troessner/reek/wiki">wiki page</a> quite useful for better understanding antipatterns like Feature Envy, where a class references other objects more than it does itself, or Long Paramter List (pretty self-explanatory).</p>

<p>Here&#8217;s what came out when I ran Reek against my Lollapalooza scraper.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>♥ reek lolla.rb
</span><span class='line'>lolla.rb -- 9 warnings:
</span><span class='line'>  <span class="o">[</span>16, 14<span class="o">]</span>:Lolla declares the class variable @@account_sid <span class="o">(</span>ClassVariable<span class="o">)</span>
</span><span class='line'>  <span class="o">[</span>17, 15<span class="o">]</span>:Lolla declares the class variable @@auth_token <span class="o">(</span>ClassVariable<span class="o">)</span>
</span><span class='line'>  <span class="o">[</span>54, 16<span class="o">]</span>:Lolla declares the class variable @@client <span class="o">(</span>ClassVariable<span class="o">)</span>
</span><span class='line'>  <span class="o">[</span>22, 30, 34, 20<span class="o">]</span>:Lolla declares the class variable @@doc <span class="o">(</span>ClassVariable<span class="o">)</span>
</span><span class='line'>  <span class="o">[</span>61, 22<span class="o">]</span>:Lolla declares the class variable @@lolla_node <span class="o">(</span>ClassVariable<span class="o">)</span>
</span><span class='line'>  <span class="o">[</span>20, 18<span class="o">]</span>:Lolla declares the class variable @@source <span class="o">(</span>ClassVariable<span class="o">)</span>
</span><span class='line'>  <span class="o">[</span>83, 86<span class="o">]</span>:Lolla#self.check calls Lolla.index_check twice <span class="o">(</span>DuplicateMethodCall<span class="o">)</span>
</span><span class='line'>  <span class="o">[</span>80<span class="o">]</span>:Lolla#self.check has approx 7 statements <span class="o">(</span>TooManyStatements<span class="o">)</span>
</span><span class='line'>  <span class="o">[</span>73, 73<span class="o">]</span>:Lolla#self.node_contains_link? calls Lolla.node_names twice <span class="o">(</span>DuplicateMethodCall<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I wasn&#8217;t the best at following best practices back then (and, probably still now). I also wrote this scraper in a few hours one evening, so I&#8217;ll give myself a break. Reek catches on that I used a lot of class variables in the file, which is generally not a great thing to do. The output also helpfully includes the line number of the infraction, so I can quickly find the source if the issue.</p>

<p>What&#8217;s also great about Reek is that you can add <a href="https://github.com/troessner/reek/wiki/Configuration-Files" target="_blank">configuration files</a> to your application to fine-tune how Reek evaluates your code. Don&#8217;t like that a long parameter list is defined as any method with greater than 3 parameters? You can modify that within the config file so that Reek hits that evaluation sweet spot - not too noisy for you to gloss over violations that it finds, but not too lenient so that it doesn&#8217;t find any problems to begin with.</p>

<p><strong>Rails Best Practices</strong></p>

<p>Like Reek, you can run <a href="https://github.com/railsbp/rails_best_practices" target="_blank">rails_best_practices</a> simply by passing the command a folder or file (e.g., <code>rails_best_practices app/models</code> will check all your model files). The gem will then check your code against a configurable list of accepted best practices for Rails, like skinny controller / fat models or treatment of mass assignment. Unlike reek, RBP is focused specifically on Rails conventions, not necessarily general code best practices, even though there are considerable parallels between the two.</p>

<p>I ran RBP against my Lollapalooza scraper, and these were the results:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>♥ rails_best_practices lolla.rb
</span><span class='line'>Source Codes: |<span class="o">=====================================================================================================================================================</span>|
</span><span class='line'>/Users/eugenewang/projects/lollapalooza/lolla_check/app/models/lolla.rb:29 - remove unused methods <span class="o">(</span>Lolla#document<span class="o">)</span>
</span><span class='line'>/Users/eugenewang/projects/lollapalooza/lolla_check/app/models/lolla.rb:80 - remove unused methods <span class="o">(</span>Lolla#check<span class="o">)</span>
</span><span class='line'>/Users/eugenewang/projects/lollapalooza/lolla_check/app/models/lolla.rb:49 - remove trailing whitespace
</span><span class='line'>
</span><span class='line'>Please go to http://rails-bestpractices.com to see more useful Rails Best Practices.
</span><span class='line'>
</span><span class='line'>Found 3 warnings.
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I would be well served to go back through my code and take out some unused methods. While unused methods don&#8217;t necessarily hurt a code base, they add to the amount of code that needs to be maintained, and I&#8217;ve found that old code that is deprecated but still included in a code base replaces some of the value that version control systems like git provide. Rather than leaving in code that you think may or may not be used again in the future, best to keep in only what you&#8217;re currently using and leave the rest to version control so you don&#8217;t have to maintain code that you&#8217;re not using.</p>

<p><strong>Rubocop</strong></p>

<p>Of these four code quality gems, I&#8217;ve found <a href="https://github.com/bbatsov/rubocop" target="_blank">Rubocop</a> to be both the most informative and specific yet also the most nitpicky. Whereas Reek will simply state what you have in your code with the implicit understanding that its not a good coding practice, Rubocop suggests specific changes to your code to clean it up.</p>

<p>For example, Reek states that the <code>Lolla</code> class declares multiple class variables - generally a code smell that the class is not written well (see <a href="http://oreilly.com/ruby/excerpts/ruby-best-practices/worst-practices.html" target="_blank">this</a> for why). Rubocop also spots these class variables, yet goes the extra step to say that I should replace those class variables with an instance variable. Sometimes the help Reek provides in simply spotting improper use of code conventions is enough, but in other cases, having the specific suggestion of what to change can save time, especially when I&#8217;m don&#8217;t have the muscle memory to know how to implement certain coding practices.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>♥ rubocop lolla.rb
</span><span class='line'>Inspecting 1 file
</span><span class='line'>W
</span><span class='line'>
</span><span class='line'>Offences:
</span><span class='line'>
</span><span class='line'>lolla.rb:1:1: C: Missing utf-8 encoding comment.
</span><span class='line'>require <span class="s1">&#39;twilio-ruby&#39;</span>
</span><span class='line'>^
</span><span class='line'>lolla.rb:13:1: C: Extra blank line detected at body beginning.
</span><span class='line'>lolla.rb:14:3: C: Replace class var @@account_sid with a class instance var.
</span><span class='line'>  @@account_sid <span class="o">=</span> <span class="s1">&#39;###############################&#39;</span>
</span><span class='line'>  ^^^^^^^^^^^^^
</span><span class='line'>lolla.rb:15:3: C: Replace class var @@auth_token with a class instance var.
</span><span class='line'>  @@auth_token <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="c">###############################&#39;&#39;</span>
</span><span class='line'>  ^^^^^^^^^^^^
</span><span class='line'>lolla.rb:16:3: C: Replace class var @@client with a class instance var.
</span><span class='line'>  @@client <span class="o">=</span> Twilio::REST::Client.new @@account_sid, @@auth_token
</span><span class='line'>  ^^^^^^^^
</span><span class='line'>lolla.rb:18:3: C: Replace class var @@source with a class instance var.
</span><span class='line'>  @@source <span class="o">=</span> <span class="s2">&quot;http://www.lollapalooza.com&quot;</span>
</span><span class='line'>  ^^^^^^^^
</span><span class='line'>lolla.rb:18:14: C: Prefer single-quoted strings when you don<span class="s1">&#39;t need string interpolation or special symbols.</span>
</span><span class='line'><span class="s1">  @@source = &quot;http://www.lollapalooza.com&quot;</span>
</span><span class='line'><span class="s1">             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:20:3: C: Replace class var @@doc with a class instance var.</span>
</span><span class='line'><span class="s1">  @@doc = Nokogiri::XML(open(@@source))</span>
</span><span class='line'><span class="s1">  ^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:22:3: C: Replace class var @@lolla_node with a class instance var.</span>
</span><span class='line'><span class="s1">  @@lolla_node = @@doc.children[1].children[3].children[1].children[1].children[7].children[0].children[0]</span>
</span><span class='line'><span class="s1">  ^^^^^^^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:22:80: C: Line is too long. [106/79]</span>
</span><span class='line'><span class="s1">  @@lolla_node = @@doc.children[1].children[3].children[1].children[1].children[7].children[0].children[0]</span>
</span><span class='line'><span class="s1">   ^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:25:5: C: Use the new Ruby 1.9 hash syntax.</span>
</span><span class='line'><span class="s1">    :SOON =&gt; 764,</span>
</span><span class='line'><span class="s1">    ^^^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:26:5: C: Use the new Ruby 1.9 hash syntax.</span>
</span><span class='line'><span class="s1">    :Souvenir =&gt; 743</span>
</span><span class='line'><span class="s1">    ^^^^^^^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:49:23: C: Trailing whitespace detected.</span>
</span><span class='line'><span class="s1">  def self.index_check</span>
</span><span class='line'><span class="s1">                      ^</span>
</span><span class='line'><span class="s1">lolla.rb:54:5: W: Useless assignment to variable - message</span>
</span><span class='line'><span class="s1">    message = @@client.account.sms.messages.create(:body =&gt; msg,</span>
</span><span class='line'><span class="s1">    ^^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:54:52: C: Use the new Ruby 1.9 hash syntax.</span>
</span><span class='line'><span class="s1">    message = @@client.account.sms.messages.create(:body =&gt; msg,</span>
</span><span class='line'><span class="s1">                                                   ^^^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:55:9: C: Align the elements of a hash literal if they span more than one line.</span>
</span><span class='line'><span class="s1">        :to =&gt; &quot;+16303791842&quot;,</span>
</span><span class='line'><span class="s1">        ^^^^^^^^^^^^^^^^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:55:9: C: Use the new Ruby 1.9 hash syntax.</span>
</span><span class='line'><span class="s1">        :to =&gt; &quot;+16303791842&quot;,</span>
</span><span class='line'><span class="s1">        ^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:55:16: C: Prefer single-quoted strings when you don&#39;</span>t need string interpolation or special symbols.
</span><span class='line'>        :to <span class="o">=</span>&gt; <span class="s2">&quot;+16303791842&quot;</span>,
</span><span class='line'>               ^^^^^^^^^^^^^^
</span><span class='line'>lolla.rb:56:9: C: Align the elements of a <span class="nb">hash </span>literal <span class="k">if </span>they span more than one line.
</span><span class='line'>        :from <span class="o">=</span>&gt; <span class="s2">&quot;+17082219589&quot;</span><span class="o">)</span>
</span><span class='line'>        ^^^^^^^^^^^^^^^^^^^^^^^
</span><span class='line'>lolla.rb:56:9: C: Use the new Ruby 1.9 <span class="nb">hash </span>syntax.
</span><span class='line'>        :from <span class="o">=</span>&gt; <span class="s2">&quot;+17082219589&quot;</span><span class="o">)</span>
</span><span class='line'>        ^^^^^^^^
</span><span class='line'>lolla.rb:56:18: C: Prefer single-quoted strings when you don<span class="s1">&#39;t need string interpolation or special symbols.</span>
</span><span class='line'><span class="s1">        :from =&gt; &quot;+17082219589&quot;)</span>
</span><span class='line'><span class="s1">                 ^^^^^^^^^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:57:10: C: Prefer single-quoted strings when you don&#39;</span>t need string interpolation or special symbols.
</span><span class='line'>    puts <span class="s2">&quot;Message sent!&quot;</span>
</span><span class='line'>         ^^^^^^^^^^^^^^^
</span><span class='line'>lolla.rb:73:34: C: Prefer single-quoted strings when you don<span class="s1">&#39;t need string interpolation or special symbols.</span>
</span><span class='line'><span class="s1">    if Lolla.node_names.include?(&quot;a&quot;) || Lolla.node_names.include?(&quot;href&quot;)</span>
</span><span class='line'><span class="s1">                                 ^^^</span>
</span><span class='line'><span class="s1">lolla.rb:73:68: C: Prefer single-quoted strings when you don&#39;</span>t need string interpolation or special symbols.
</span><span class='line'>    <span class="k">if </span>Lolla.node_names.include?<span class="o">(</span><span class="s2">&quot;a&quot;</span><span class="o">)</span> <span class="o">||</span> Lolla.node_names.include?<span class="o">(</span><span class="s2">&quot;href&quot;</span><span class="o">)</span>
</span><span class='line'>                                                                   ^^^^^^
</span><span class='line'>lolla.rb:80:3: C: Method has too many lines. <span class="o">[</span>12/10<span class="o">]</span>
</span><span class='line'>  def self.check
</span><span class='line'>  ^^^
</span><span class='line'>lolla.rb:81:29: C: Prefer single-quoted strings when you don<span class="s1">&#39;t need string interpolation or special symbols.</span>
</span><span class='line'><span class="s1">    if Lolla.index_changed?(&quot;SOON&quot;)</span>
</span><span class='line'><span class="s1">                            ^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:83:80: C: Line is too long. [114/79]</span>
</span><span class='line'><span class="s1">      puts &quot;Site changed! &#39;</span>SOON<span class="s1">&#39; was at #{Lolla.index_check[:SOON]} before, now at #{Lolla.search_index(&quot;SOON&quot;)}.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">lolla.rb:84:32: C: Prefer single-quoted strings when you don&#39;</span>t need string interpolation or special symbols.
</span><span class='line'>    elsif Lolla.index_changed?<span class="o">(</span><span class="s2">&quot;Souvenir&quot;</span><span class="o">)</span>
</span><span class='line'>                               ^^^^^^^^^^
</span><span class='line'>lolla.rb:85:80: C: Line is too long. <span class="o">[</span>83/79<span class="o">]</span>
</span><span class='line'>      Lolla.notify<span class="o">(</span><span class="s2">&quot;The placement of &#39;Souvenir&#39; changed on the Lollapalooza site!&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>lolla.rb:86:80: C: Line is too long. <span class="o">[</span>122/79<span class="o">]</span>
</span><span class='line'>      puts <span class="s2">&quot;Site changed! &#39;SOON&#39; was at #{Lolla.index_check[:Souvenir]} before, now at #{Lolla.search_index(&quot;</span>Souvenir<span class="s2">&quot;)}.&quot;</span>
</span><span class='line'>lolla.rb:88:20: C: Prefer single-quoted strings when you don<span class="s1">&#39;t need string interpolation or special symbols.</span>
</span><span class='line'><span class="s1">      Lolla.notify(&quot;A link has been added to the node on the Lollapalooza site!&quot;)</span>
</span><span class='line'><span class="s1">                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>
</span><span class='line'><span class="s1">lolla.rb:88:80: C: Line is too long. [81/79]</span>
</span><span class='line'><span class="s1">      Lolla.notify(&quot;A link has been added to the node on the Lollapalooza site!&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="s1">lolla.rb:89:12: C: Prefer single-quoted strings when you don&#39;</span>t need string interpolation or special symbols.
</span><span class='line'>      puts <span class="s2">&quot;Site changed!&quot;</span>
</span><span class='line'>           ^^^^^^^^^^^^^^^
</span><span class='line'>lolla.rb:94:1: C: Extra blank line detected at body end.
</span><span class='line'>
</span><span class='line'>1 file inspected, 34 offences detected
</span></code></pre></td></tr></table></div></figure>


<p>Rubocop catches a lot of basic syntax infractions that Reek and rails_best_practices don&#8217;t. Stuff like using double quotes for strings that do not interpolate Ruby variables, or using simple if/else statements when a one-line ternary operator would be sufficient. That&#8217;s the nitpicky part of Rubocop, but its also a feature that I appreciate as it helps enforce a common style guide for projects with multiple collaborators, each with their own code style. One of my pet peeves is when there&#8217;s no consistency in how many spaces are used for indentation (2!), how to add comments in code or whether to use the hash-rocket syntax for hash key-value pairs or the Ruby 1.9, JSON-like syntax. At the end of the day, these syntactical inconsistencies are less mission-critical than poorly implemented features, but getting the simple stuff right helps ensure a baseline level of consistency within development teams.</p>

<p><strong>metric_fu</strong></p>

<p>Of these four tools, I&#8217;ve integrated <a href="https://github.com/jscruggs/metric_fu" target="_blank">metric_fu</a> the least into my coding process. Running metric_fu against your codebase will open up a webpage with a variety of metrics and measurements of code quality. Metric_fu acts as a web interface around other code quality tools - including reek and rails_best_practices. I&#8217;ve found it less useful, though, than the other three because its harder to translate the resulting metrics into actual changes to make to your codebase. I do like that it seems comprehensive and provides a quick way to run an array of checks on your code, but I prefer the in-terminal results that the other three gems provide to an interactive web browser.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>♥ metric_fu .
</span><span class='line'>*****churn metric not activated, cannot load such file -- churn/churn_calculator
</span><span class='line'>******* STARTING METRIC cane
</span><span class='line'>******* ENDING METRIC cane
</span><span class='line'>******* STARTING METRIC flay
</span><span class='line'>******* ENDING METRIC flay
</span><span class='line'>******* STARTING METRIC flog
</span><span class='line'>******* ENDING METRIC flog
</span><span class='line'>******* STARTING METRIC stats
</span><span class='line'>******* ENDING METRIC stats
</span><span class='line'>******* STARTING METRIC saikuro
</span><span class='line'>******* ENDING METRIC saikuro
</span><span class='line'>******* STARTING METRIC reek
</span><span class='line'>******* ENDING METRIC reek
</span><span class='line'>******* STARTING METRIC roodi
</span><span class='line'>******* ENDING METRIC roodi
</span><span class='line'>******* STARTING METRIC rails_best_practices
</span><span class='line'>******* ENDING METRIC rails_best_practices
</span><span class='line'>******* STARTING METRIC hotspots
</span><span class='line'>******* ENDING METRIC hotspots
</span><span class='line'>******* SAVING REPORTS
</span><span class='line'>******* GENERATING GRAPHS
</span><span class='line'>*****Generating graphs
</span><span class='line'>*****Generating graphs <span class="k">for </span>tmp/metric_fu/_data/20140119.yml
</span><span class='line'>all <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing these tools all have in common is that they count how many code quality infractions you commit. They vary in their specificity and the standards to which your code is compared, but having that number of &#8216;X&#8217; number of warnings / offenses in your face is very helpful. It provides a tangible measurement of how you can improve your code; write better code and you&#8217;ll have fewer warnings and offenses. That said, its important not to be a slave to Rubocop or adopt RDD (Reek Driven Development), since seeking to maximize only code quality (by minimizing warnings or offenses) is like teaching to the test. There may be cases when Reek yells at you for having Feature Envy in your code base, but who knows, there may be a specific reason for that, or refactoring your code extensively just to placate Reek would simply be infeasible.</p>

<p>At the end of the day, these gems help keep you accountable as you work on a feature or bug fix. They should never drive your development - rather, they should supplement your development and even if you don&#8217;t take Rubocop&#8217;s suggestions, you at least become more aware after using these tools of code best practices that you can start building muscle memory to implement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Goals for 2014]]></title>
    <link href="http://eewang.github.com/blog/2014/01/04/4-goals-for-2014/"/>
    <updated>2014-01-04T00:27:00-05:00</updated>
    <id>http://eewang.github.com/blog/2014/01/04/4-goals-for-2014</id>
    <content type="html"><![CDATA[<p>The turning of the calendar to a new year tends to beget nostalgia and recollection for both the good and bad from the previous year. I like to set goals for myself and check in periodically on my progress, and the start of 2013 was no different. I recently looked back on what I set as my New Year&#8217;s resolutions, and I&#8217;m happy to say that I accomplished the top priority goal: learn to code.</p>

<p>I still feel humbled and grateful for the opportunity to transition seamlessly from finance to technology that I jumped on around this time last year. 2013 was a year of much change for me; the year I traded Excel models for web applications and committed to learning a new, complex skill set. Overall, I&#8217;m very happy with my decision - I enjoy my job, I believe in the mission of my company and I get to cultivate a valuable skillset. With last year introducing such considerable (and positive) changes in my life, I&#8217;m eagerly looking forward to what 2014 has in store for me. Here are a few of my more technical / professional goals that I hope to strive for in the new year.</p>

<!--more-->


<p><em>1) Write less, but more frequently</em></p>

<p>Writing more has been a goal of mine for much of the past few years since I graduated college. While I find great comfort in committing my thoughts and ideas to (electronic) paper, writing is one of those activities that can be challenging for me to do consistently. Getting started and overcoming writer&#8217;s block is never easy for me, but I&#8217;m hopeful that by writing more frequently will lessen any pressure I may feel to write extensively.</p>

<p>I love the idea of writing a little bit each day - a short blog post, a Yelp review, a well-crafted e-mail - to build up my writing skill gradually and consistently. Much like I learned to be a developer by coding every day, I&#8217;d like to aspire to writing something - anything, really - every day.</p>

<p><em>2) Learn iOS / Objective-C</em></p>

<p>At a high-level, the product I&#8217;m working on at the NYT aims to reimagine journalism and news for a mobile era. Invariably, this means that development is focused on building an optimal mobile experience, first for iOS and second for Android with a web-based API as the backend content tool. I&#8217;ve been playing around with iOS / Objective-C / Xcode sporadically in the last 6 months, and I hope to ramp up my learning in the new year.</p>

<p>Learning the iOS world is at once both similar yet quite different than Ruby / Rails. Object-oriented principles, class and instance methods and a dynamic runtime make Objective-C familiar enough to a Ruby developer like myself. At the same time, working in an IDE like Xcode is considerably different than a lightweight text editor like Sublime - more powerful and rich in its feature set yet consisting of a steeper learning curve. The tight integration of the iOS world is new to me and while I see its benefits (e.g., the option to graphically link front-end views to controller actions rather than just through code kind of blew my mind), it&#8217;ll take some time for me to work through the coding paradigms advanced by Apple.</p>

<p>Oh, and as an aside, if anyone reading this is or knows of solid iOS developers, shoot me an e-mail! My team is hiring actively for iOS. :)</p>

<p><em>3) Gain dev ops experience</em></p>

<p>My main work task over the holidays was to migrate our application from the existing, core NYTimes infrastructure to the newsroom developer infrastructure (i.e., interactive news and graphics). The differences between the two setups are considerable - internally hosted vs. AWS, Puppet vs. Chef for server configuration, Apache vs. Nginx for a web server. At Flatiron School, we didn&#8217;t do much with web operations stuff; we were hosted on Digital Ocean servers and used Capistrano for our deploys. The dev ops we learned at Flatiron School centered more on following a set of instructions to deploy our app rather than a holistic understanding of web infrastructure. Although more dev ops education would have been great, the focus on application code is entirely understandable given the challenging task of building developers from scratch in three monthds.</p>

<p>I&#8217;ve found that the lack of a traditional computer science education leaves me at something of a disadvantage when learning about web infrastructure since understanding how networks are constructed or how communication protocols are established would help me grasp software architecture principles. That said, I&#8217;m eager to learn about this slightly obscure but critically important field that has enabled the rapid integration of technology, society and culture. Hopefully, old-fashioned hard work, reading stuff online and actually setting up servers will be enough for me to learn what I need to become a somewhat passable dev ops professional. Since we don&#8217;t have a dedicated dev ops person, it falls on the developers (primarily the back-end devs) to manage our infrastructure and respond to downtime. My office provides educational financing too if I wanted to take a grad course or two on general software architecture principles, but I still need to see how my non-work schedule pans out this year before committing to a class.</p>

<p><em>4) Launch a product!</em></p>

<p>This is a bit of a departure from the previous goals since its really a team goal that&#8217;s driven by the NYTimes&#8217;s overall business goals. Watching the product grow from a prototype to a scalable, production-ready application has been an exhilirating and educational experience so far. After the product launches this year, there will be continuing sprints to fix bugs or add new features like any iterative product development process - its not like the work stops with a product launch.</p>

<p>In finance, I was involved in the launch of a number of customized and specialty investment vehicles, which were great experiences in themselves, but I imagine that a consumer-facing product launch is going to impact me differently. While I don&#8217;t have many friends that have the financial wherewithal to invest in hedge funds (anyone have an extra quarter-million laying around?), I do have a number of friends that are casual news consumers and broadly interested in the world around them. Building a product intended for the people I know makes me feel more invested in my work and connected to the broader mission of the paper. Regardless of success or failure from a business perspective, I&#8217;m eager to see the ~9-month effort from my team of tremendously talented designers, developers and editors come to full fruition.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[With Great Power Comes Great (Single) Responsibility]]></title>
    <link href="http://eewang.github.com/blog/2013/12/04/with-great-power-comes-great-single-responsibility/"/>
    <updated>2013-12-04T07:37:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/12/04/with-great-power-comes-great-single-responsibility</id>
    <content type="html"><![CDATA[<p>In software development, the Single Responsibility Principle is a bedrock principle that transcends language or framework. The SRP states that each function / method, class and module should perform a single responsibility. This enables your code to be flexible, extensible and less prone to bugs since software components that are only loosely coupled to their peer components are simpler and easier to maintain.</p>

<!--more-->


<p>Although simple on its face, the SRP is very difficult to adhere to throughout an entire codebase. When I first started to code, my tendency was to build on top of existing methods or classes as I added functionality, rather than have an eye to constantly refactoring my code and separating and isolating the responsibilties and roles of each unit. This led to overgrown <code>User</code> classes that contained all sorts of logic unrelated to a strict notion of a &#8216;user&#8217;. At a higher level, violations of the SRP can lead to monolithic applications that simply do too much, and I gather that much of the recent trend of breaking up monolothic apps into a service-based architecture has to do with trying to get back to a building apps in line with the SRP.</p>

<p>In the application I&#8217;m helping build at the NYT, we recently came across a simple problem that I felt was a good example of the SRP in practice. Say you have an app like Pinterest, whereby people can pin items to their pinboard that correspond to various destinations. These destinations can be food blogs, Instagram, etc. All destinations have one or more pinned items that may have different visual displays, but not all pinned items necessarily have a destination (e.g., if you just want to pin a note or reminder).</p>

<p>In this app, to create a pinned item, users have the ability to input a URL and the app can determine whether that URL relates to a popular destination (for example, Instagram) and perform some logic accordingly. There may be some additional functionality the app wants to apply for Instagram-related items on a board, given that Instagram is likely a popular source for pinned items. Similarly, a destination source should be able to tell if the its associated with Instagram by looking at the attached URL (e.g., <code>http://www.instagram.com/:user_id/:photo_id</code>). Although URLs are associated with destinations, they are accessed via the pinned items on the board, so pinned items have to delegate URL calls to their associated destination (if they have one).</p>

<p>The first version of this predicate method to return <code>true</code> or <code>false</code> depending on whether the URL string matched an Instagram regex, like <code>/instagram.com/</code> might look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:destination</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:url</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:destination</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">INSTAGRAM_REGEX</span> <span class="o">=</span> <span class="sr">/instagram.com/</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">instagram_url?</span><span class="p">(</span><span class="n">check_url</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="n">check_url</span> <span class="o">||=</span> <span class="p">(</span><span class="n">destination</span> <span class="p">?</span> <span class="nb">self</span><span class="o">.</span><span class="n">url</span> <span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">url</span> <span class="p">?</span> <span class="no">INSTAGRAM_REGEX</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>While terse, this <code>instagram_url?</code> predicate method does a lot of things. First, it can check any string provided in an argument and return true or false depending on whether it matches a preset Instagram URL. Second, it checks the URL associated with the destination if no URL is passed through as an argument. And finally, it manages the type checking if there is an associated destination (since not all pinned items have destinations, and calling <code>url</code> on an item without an destination will raise <code>NoMethodError: undefined method 'url' for nil:NilClass</code>.</p>

<p>At first glance, the benefit as I saw it of this code is that its relatively succinct - only 4 lines of implementation to handle the multiple situations in which the app may need to handle checking URLs. That said, it clearly is not the most readable. It relies on too many ternary operators, and its not immediately evident in which situations the method returns <code>true</code> or <code>false</code>. In other words, the code smells bad. The method should actually be broken out into two different checks on URLs (one for strings, and one for the URL attribute on a destination), and another component that serves as traffic handler depending on if an item has a destination to which it can delegate a URL call.</p>

<p>A better implementation that adheres more closely to the SRP may look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Instagram</span>
</span><span class='line'>  <span class="no">INSTAGRAM_REGEX</span> <span class="o">=</span> <span class="sr">/instagram/</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">instagram_url?</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="no">INSTAGRAM_REGEX</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Instagram</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:destination</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:url</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:destination</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">has_instagram_destination?</span>
</span><span class='line'>    <span class="n">destination</span><span class="o">.</span><span class="n">instagram?</span> <span class="k">if</span> <span class="n">destination</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Destination</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:items</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">instagram?</span>
</span><span class='line'>    <span class="no">INSTAGRAM_REGEX</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This changes the implementation in a few ways. First, the string checking has been moved to a module, since the method could technically be called across classes. It could even be used as a monkey patch to the <code>String</code> class, so that all you would have to do is write <code>"test url".instagram?</code>, but monkey patching is rarely the best solution for a problem, even if it is the fastest. Second, the determination of whether a destination is from Instagram (as determined by its URL) was moved to the <code>Destination</code> class, which makes logical sense. Destinations, not pinned items, should know if they are from Instagram. And finally, pinned items hold the responsibility of traffic cop - knowing if they have a destination or not, and if so, then checking if such destination is Instagram. This way, each method does just one responsibility, and the predicate methods for each are more clear, in that <code>has_instagram_destination?</code> makes sense for an item and <code>instagram?</code> makes sense for a destination.</p>

<p>While this refactoring is technically more lines of code than the first version, its clearly more readable and adheres more tightly to the SRP. Each method does one thing, and the implementation code is wrapped within a clear predicate method that can be used by other methods whenever they need to check where a URL comes from - be it a string or a saved attribute on a destination. This also better encapsulates logic so that future extensions to the code are easier to make (e.g., the <code>Destination#instagram?</code> method could forseeably have a more nuanced implementation that should be abstracted away from the associated item).</p>

<p>I have found this tension between terse / DRY-to-the-max code and readable / clean code to be fairly common across my projects. With Ruby, its easy to go overboard in DRYing up your code into a shriveled, unreadable mess of heavily metaprogrammed methods. But if you&#8217;re working in a team of other developers (which you almost always are), very DRY code also means that its probably less readable and may be in violation of the SRP.</p>

<p>Like with any other software development principle, the SRP exists in contrast to other goals, like keeping code DRY. Exercising good judgement on when to unbundle classes or methods by refactoring comes only with time, although in my experience, beginners tend to go too far in lumping all complexity into a single class or method. The challenge lies in knowing when adhering to the SRP or DRYing out your code would make your app more maintainable and flexible in the long-run in the face of near-certain change.</p>

<p>Here are a few helpful links on the SRP:</p>

<br>


<p><a href="http://www.sitepoint.com/solid-ruby-single-responsibility-principle/">SOLID Ruby: Single Responsibility Principle</a></p>

<p><a href="http://www.mikepackdev.com/blog_posts/38-dci-the-king-of-the-single-responsibility-principle">The King of the Single Responsibility Principle</a></p>

<p><a href="http://jonkruger.com/blog/2010/10/19/ruby-on-rails-and-the-single-responsibility-principle/">Ruby on Rails and the Single Responsibility Principle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Favorite (Rails) developer tips and tricks]]></title>
    <link href="http://eewang.github.com/blog/2013/11/14/useful-tips-and-tricks-for-building-a-rails-app/"/>
    <updated>2013-11-14T20:47:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/11/14/useful-tips-and-tricks-for-building-a-rails-app</id>
    <content type="html"><![CDATA[<p>As I&#8217;ve grown as a developer, I often find myself using a set of useful commands, tips and tricks both within Rails applications and more broadly. If you find yourself regularly coming across a pretty generic problem or pattern when coding, the development community has probably found a way to address it. I find this especially true in Rails, where there seems to be a slew of methods geared especially toward humans (e.g., Rails text formatters).</p>

<!--more-->


<p><strong>The &#8216;presence&#8217; method:</strong> <code>@object.presence</code></p>

<p>The presence method goes one step further than <code>@object.present?</code> by returning the attribute or value being checked for rather than just true. Both <code>.present?</code> and <code>.presence</code> return <code>nil</code> for falsey evaluations, but using <code>.presence</code> helps streamline the common pattern of checking for the presence of a value before returning it in order to prevent nil reference errors. For example, say you have a nested hash that looks like this:</p>

<p><code>team = {name: 'Chicago Bears', mascot: 'Bears', coach: {name: 'Marc Trestman', years: '1'}}</code></p>

<p>If you want to get the name of a coach for a given team, you could write the following in order to avoid an error when checking for a nested hash key that may or may not be there:</p>

<p><code>team[:coach][:name].present? ? team[:coach][:name] : nil</code></p>

<p>But it would be more terse to write instead as follows:</p>

<p><code>team[:coach][:name].presence</code></p>

<p>Here&#8217;s the documentation that describes the method (very straightforward): <a href="http://api.rubyonrails.org/classes/Object.html#method-i-presence">Rails documentation</a></p>

<p><code>pp</code> <strong>for pretty printing</strong></p>

<p>When printing lengthy and complex data structures, its pretty difficult to read all the text inline. Prepending <code>pp</code> when using pry or irb before a data structure prints out the object in a pretty fashion. I find <code>pp</code> most helpful when using debugger, which doesn&#8217;t provide pretty printing by default. Reading the structure of a complex JSON object is never fun; using <code>pp</code> makes it considerably more tenable by properly indenting and subordinating attributes as needed.</p>

<p><code>@object#changed?</code></p>

<p>While a Rails object is in memory, you can call <code>@object.changed?</code> on it to see if the object has changed in the application session. This can be helpful in minimizing database transactions in that you can check if an object has changed before persisting the object to the database. No need to save an object if nothing about that object has changed from the last time it was saved.</p>

<p><code>wtf?(??????!!)</code></p>

<p>Pry is one of my favorite gems because of how simple it is to use and that the console output is by default pretty printed. The developers of pry also seem to have a great sense of humor, in that when you want to see the application trace for an error, you can run <code>wtf?</code> in the pry console to see lines of the backtrace. Even better, you can keep adding <code>?</code> or <code>!</code> to the end of the <code>wtf</code> call to see more lines. I love it when software mimics the real world.</p>

<p><code>constantize</code>, <code>classify</code>, <code>demodularize</code> <strong>and other Rails text helpers</strong></p>

<p>People joke that Rails abstracts so many implementation details away that you could practically just write <code>rails new application</code> and your entire app would be built for you. While that&#8217;s clearly an exaggeration, there is some truth that Rails provides a slew of helper methods to properly format text or perform simple data transformations.</p>

<p>For example, <code>string.constantize</code> will directly convert a string into a class representation, so you can call <code>"Article".constantize.new</code>, and a new article instance will be created. <code>string.classify</code> will transform a string of text into a string that can then converted to a class representation. Whereas <code>"string".constantize</code> will yield <code>NameError: wrong constant name string</code>, <code>"string".classify</code> will yield <code>"String"</code>, which can then be properly constantized. <code>string.classify</code> will also convert table names to object names and handle the pluralization for you (e.g., <code>"articles".classify</code> becomes <code>"Article"</code>). Finally, <code>string.demodularize</code> is used strip a module from its parent namespace so that the return value is just the module name represented as a string (e.g., <code>"Article::Foreign".demodulize</code> becomes <code>"Foreign"</code>). This can be helpful for when you have a subclasses of a parent class and want to build a view differently based on each subclass; the <code>demodulize</code> method is a quick helper that you can use to avoid writing a lengthy chain of <code>string.gsub</code> or <code>string.capitalize</code>.</p>

<p><code>git commit --amend</code></p>

<p>This git command opens up a previous git commit and attaches changes that you have in staging to that git commit rather than making an entirely new commit. I use this for whenever I make a git commit, but then realize that I forgot to remove a <code>debugger</code> call or have to make some other similarly mundane change. Rather than making a new commit, I&#8217;ll typically just open the previous commit with <code>git commit --amend</code> which will not only include the changes in the previous commit, but also allow me to edit the commit message if needed.</p>

<p><code>git diff --cached</code></p>

<p>Have you ever added a set of files to staging in git without remembering what you changed? One way to review what you changed is to run <code>git reset HEAD .</code> to unstage your changes, or you can just run <code>git diff --cached</code> and it will show you a diff between what you have staged and the latest commit.</p>

<p><code>git stash</code> / <code>git stash list</code> / <code>git stash pop</code></p>

<p>I use <code>git stash</code> commands fairly regularly, primarily because I&#8217;m often working on a few branches at once. The git process on my team at the NYT typically consists of feature branches with pull requests into the develop branch, which automatically builds onto the development server environment. But pull requests often take a few hours before they are merged into develop simply because the developers on my team have other things to do besides review PRs. So I&#8217;ll start working on another feature branch or bug fix, liberally using the suite of <code>git stash</code> commands to manage my working files between branches without committing incomplete work.</p>

<p><strong>cmd-T for Github file quick search</strong></p>

<p>I&#8217;m proud that I showed this quick Github shortcut to my senior developer. Pressing <code>command + T</code> when in a Github repo will open a file search bar at the top of the repo, allowing a quick search for any file in the repo. If you use Sublime Text, you likely already use this shortcut to quickly navigate your file directory, so hopefully its not too much of a change to start doing the same in Github.</p>

<p>Those are just a few of my favorite go-to tricks for developing applications in Ruby/Rails that I find myself using on an almost daily basis. What are some of yours?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to manage associations with nested forms in Rails]]></title>
    <link href="http://eewang.github.com/blog/2013/11/04/how-to-manage-complex-association-with-nested-attributes-in-rails/"/>
    <updated>2013-11-04T18:43:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/11/04/how-to-manage-complex-association-with-nested-attributes-in-rails</id>
    <content type="html"><![CDATA[<p>In my experience using Rails to build web apps, I&#8217;ve come to realize that the framework has a very powerful flow of convention and patterns that you swim against at your own peril. One good example of this that I&#8217;ve been using recently is the accepts_nested_attributes_for helper in Rails.</p>

<!--more-->


<p>For those unfamiliar with ANAF, adding the class method to your ActiveRecord models enables a given object to assign and update attributes of an associated model object. This can be very powerful in that multiple objects with complex associations can be updated simultaneously with a single line of code. However, Rails makes certain assumptions about the structure of the params hash that gets passed to a given object when trying to update nested attributes.</p>

<p>When you add the accepts_nested_attributes_for helper to a model, Rails expects there to be in the hash you pass to either #assign_attributes or #update_attributes a key with _ attributes appended to it. Rails will then use that _attributes value (which is itself a hash of key-value pairs corresponding to attributes of the nested model) to assign attributes for the associated object. By default, accepts_nested_attributes_for assumes nothing about your association relationships (e.g., belongs_to, has_many, etc.).</p>

<p>If this all sounds a bit confusing, don&#8217;t worry - I was confused too when I first heard of the class method back in Flatiron. And while using accepts_nested_attributes_for is a luxury in that the same behavior can be written out manually, using it is more maintainable since you don&#8217;t have to write additional code to handle new associations so long as the params hash passed to your controllers are properly structured. Here&#8217;s an example of how the accepts_nested_attributes_for helper works.</p>

<p>Sticking with the football/sports metaphor that I like to use, say that I have a team model that has a has_many relationship with a player model. Each player belongs_to one team and each team has many players. Using accepts_nested_attributes_for enables you to update a team&#8217;s players&#8217; attributes or a player&#8217;s team&#8217;s attributes in a single form.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># player.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Player</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:team</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:team</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:team</span><span class="p">,</span> <span class="ss">:update_only</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># team.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Team</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:city</span><span class="p">,</span> <span class="ss">:coach</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:players</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a belongs_to relationship, be aware that when you pass in a hash like {team_id: 1, {team_attributes: {city: &#8220;Chicago&#8221;, mascot: &#8220;Bears&#8221;}}, by default Rails will ignore the team_id part and create a new team using the team_attributes value. If you instead want to update the attributes of the team with id of 1, you&#8217;ll need to add the update_only option to the ANAF call. Note, however, that adding the id key to the team_attributes hash is not equivalent to having the team_id key outside of the team_attributes hash. In fact, adding an id to the team_attributes hash that is not the id of the currently associated team will raise an error (something along the lines of &#8220;team with ID= could not be found for player with ID=&#8221;). This seems counterintuitive to me, as I would want to be able to pass along all my associated data in the team_attributes hash (including the id of the team that I want updated) and have ANAF do both the association and the attribute assignment.</p>

<p>The end goal of all this is to pass a params object into an assign_attributes or update_attributes call in the controller to update not only the primary object, but also all related objects.</p>

<p>Assuming the params object looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Jay Cutler&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">position</span><span class="p">:</span> <span class="s1">&#39;Quarterback&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">team_id</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>  <span class="n">team_attributes</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Chicago Bears&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">city</span><span class="p">:</span> <span class="s1">&#39;Chicago&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">coach</span><span class="p">:</span> <span class="s1">&#39;Marc Trestman&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can then write a simple controller action that will update both player and team attributes with a single line of code, since the accepts_nested_attributes_for helper will assign attributes to associated models, so long as the hash passed into the assign_attributes call matches the Rails convention of using model_attributes and model_id to find and update an associated model attributes.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PlayersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="vi">@player</span> <span class="o">=</span> <span class="no">Player</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@player</span><span class="o">.</span><span class="n">assign_attributes</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:player</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With ANAF, assuming you have a properly structured nested hash for any associated data, Rails will be able to update the attributes of the associated models (or create new ones if there is no team_id attribute) as well as update the player&#8217;s attributes all in one fell swoop.</p>

<p>Adding a team_attributes hash enables the creation of a new team or, with the addition of a team_id key, the updating of an existing team&#8217;s attributes. ANAF also allows you to destroy associated teams if you pass in an &#8216;_destroy&#8217;: true key-value pair adjacent to the team_id field. Note, however, that to enable this option, be sure to set the &#8216;allow_destroy: true&#8217; option when specifying the assigns_nested_attributes_for helper.</p>

<p>Links:</p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1" target="_blank">Railscast on nested model forms</a><br>
<a href="http://vicfriedman.github.io/blog/2013/10/09/accepted-nested-attributes-for-with-name-field-in-html/" target="_blank">Victoria Friedman&#8217;s blog post on accepts_nested_attributes_for</a><br>
<a href="http://robots.thoughtbot.com/accepts-nested-attributes-for-with-has-many-through" target="_blank">Thoughbot on ANAF with has-many-through relationships</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Are dev bootcamps a scam? An alum's perspective]]></title>
    <link href="http://eewang.github.com/blog/2013/10/17/are-dev-bootcamps-a-scam-an-alums-perspective/"/>
    <updated>2013-10-17T21:17:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/10/17/are-dev-bootcamps-a-scam-an-alums-perspective</id>
    <content type="html"><![CDATA[<p>I came across <a href="http://www.techendo.co/posts/are-dev-bootcamps-a-scam-a-hacker-s-perspective" target="_blank">this post</a> today that seems to be making the rounds on the Internet&#8217;s great assembly places: Twitter and Hacker News. As someone who graduated from one of the developer bootcamps that the writer talks about, I felt compelled to chime in and offer my two cents. I&#8217;m not writing this as an explicit statement in opposition to or in support of bootcamps, but rather hope it will contribute to the necessary and vital discussion about their value to students, companies and society as a whole. And just so there&#8217;s no confusion, &#8220;Dev Bootcamp&#8221; in the title refers to the generic term, not the dev bootcamp actually called <a href="http://devbootcamp.com/" target="_blank">Dev Bootcamp</a> (of which I have no specific opinion).</p>

<!--more-->


<p>My perspective stems primarily from my time at Flatiron School. I&#8217;m convinced that you need to evaluate these programs on a case-by-case basis. Saying that all developer bootcamps are like this or like that is like saying all colleges are alike, and that&#8217;s clearly not the case.</p>

<h3><strong>TL;DR</strong></h3>


<p>Most developer bootcamps that I am aware of are not a scam. As an alumnus of the Flatiron School, I can earnestly say that I would not be where I am today - a professional developer at a storied institution with a great developer culture -  without Flatiron. That said, developer bootcamps are not for everyone. They are intellectually challenging, require many hours of work and do not guarantee immediate employment. Anyone doing a developer bootcamp should enroll for the sake of learning the skill set, not to get into the start-up world, not to make a million dollars, not to sound smart and trendy at parties. If you want to do all of those, go into finance for a few years, then jump over to a VC firm (I&#8217;m only partially kidding).</p>

<p>Okay, now onto the details.</p>

<p><strong>Are developer bootcamps a scam?</strong></p>

<p>Like colleges, not all developer bootcamps are alike. This is a lightly regulated industry, and my understanding is that few (if any) are currently accredited by an external standards body, and so there is a very real and legitimate concern that some of the bootcamps springing up are less-than-honest about what they offer. Whereas colleges have accreditation bodies to legitimatize the work they are doing (whether that accreditation is meaningful or just a rubber stamp is another debate), programming schools do not, and so the barriers to entry for aspiring dev schools is relatively low.</p>

<p>Yet while there is the possibility of that individual schools are scams, its not fair to cast such a generalization on all developer schools. What this means is that before applying to any bootcamp, do your research. Like any product or service in a competitive marketplace, there is bound to be a dispersion in quality between programs. Talk to alums, speak to people who have hired or worked with alums, go online and read commentary or the many blogs that bootcamp students have started chronicling their experiences (ooh, pick me!). Speaking from experience, I can say that Flatiron School prepared me reasonably well to go forth into the intimidating world of software development, and while I definitely did not know all there is to know about development (who can after 3 months?), I felt confident that I could get a job as a junior developer. Looking back at the sales pitch that they have on their website, I can see elements of marketing speak in what they&#8217;re promising, but in many ways, that&#8217;s just how the world works (who among us hasn&#8217;t exaggerated a bit in our resume). For example, I was disappointed in the amount of Javascript training I got at Flatiron, which, to their credit, they seem to have addressed with a full-time Javascript instructor.</p>

<p><strong>Do developer bootcamps provide the skills necessary to get a job?</strong></p>

<p>Could I have learned development skills on my own? Probably, but that&#8217;s beside the point since people can learn a lot of things on their own if only they have the time. Those who know me know that I&#8217;m generally a self-starter, eager to learn and explore. The problem, though, is that those motivations often lead me onto various unfocused, wildly divergent paths such that I can spend time one week really into practicing guitar, then the next week really into learning Photoshop or Illustrator and the week after that reading up on portfolio management. What Flatiron did, and what I imagine other bootcamps do as well for their students, was focus my attention like a laser on learning something well enough so that I could continue learning that skill set for a living. In a sense, it got me over the threshold of a junior developer skill set so that I could be self-sufficient and learn indefinitely into the future now that I have a paycheck that supports my code learning habits. If I hadn&#8217;t gone to Flatiron, I could have spent many more hours working on learning code but never quite getting to the level where I would have been employable as a developer.</p>

<p>There is a lot (A LOT) that development bootcamps don&#8217;t teach you. Then again, these are the things that nothing - not a 4-year degree, not learning on your own, not pairing with friends - can teach you except for a real-life job as an actual developer. Things like writing Puppet scripts that configure servers in multiple environments, optimizing static asset delivery through a CDN or caching system or learning how to balance a desire to adhere to TDD best practices with the need to simply get a feature semi-working so that another team&#8217;s workflow can begin. Flatiron did not teach me these things, but I wouldn&#8217;t have learned them regardless without an actual job.</p>

<p><strong>What will I learn at a developer bootcamp?</strong></p>

<p>I find it particularly telling that Ruby is the lingua franca for these bootcamps. Coming out of Flatiron, I was a little worried that I would be dismissed as a Rubyist and belitted as a spoiled hacker (&#8220;why bother coding? just bundle install a gem that does the job for you&#8221;) who didn&#8217;t experience the syntactical struggles of a statically typed language, learning code in a social environment intead of by toiling away in a basement alone well into the night. And while I&#8217;ve thankfully found my colleagues and fellow developers to be much more supportive and encouraging than I may have thought, I&#8217;ve realized that there is more out there than Ruby. Since starting at the NYTimes, I&#8217;ve come to realize that the default Ruby stack (Ruby, Rails, Postgres, etc) is just one of many, many tools used in the real world to solve problems. Thus, I made it a priority for me after Flatiron to learn more Javascript and branch out into other languages. I dabbled some in Objective-C and recently have been getting into server-side Javascript with Node and Mongo.</p>

<p>I believe Ruby&#8217;s syntax is intuitively easier to grasp for non-technical people than a language like Objective-C or Java (even as a developer now, I&#8217;m still bewildered by the syntax of functional languages like Haskell or Erlang), which makes it a sensible starter language for beginners. The danger in this is becoming too comfortable in the encapsulated little world of Ruby and Rails, despite the fact that most software is not written in Ruby. Case in point: I was listening to an NPR Planet Money podcast the other day that mentioned that the American financial system for transferring money via ACH is still written in COBOL (<a href="http://www.npr.org/blogs/money/2013/10/04/229224964/episode-489-the-invisible-plumbing-of-our-economy" target="_blank">the podcast</a> is great, by the way, everyone should give it a listen) . COBOL! I wonder how quickly the developer bootcamp &#8220;bubble&#8221; would deflate if everyone started offering COBOL classes. Realizing that Ruby is just one language in the vast world of software helps provide perspective, but it can also be challenging for new developers comfortable with Ruby syntax to branch out.</p>

<p>The relatively simple syntax of Ruby has helped bring non-technical folks into the development fold, which is a great thing, but these bootcamp programs need to convey to their students that Ruby is the exception rather than the rule. And even if you end up working at a start-up that is a Ruby shop, that fact could change over time. At the NYT, we&#8217;re starting to add Go into some parts of our platform, and have always been a multi-lingual organization. My team (New Products) and the Interactive News team use Ruby, but the core website is written in PHP, our R&amp;D team writes a lot of Python, our video platform uses Javascript, and many other pieces of software within the organization are written in Scala, Java and good ole C++. What matters more than the actual language is the thought process and problem structuring that is fundamental to being a developer, regardless of language. Practically, this means understanding concepts like composition, inheritance and encapsulation (basically, the stuff in <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330" target="_blank">POODR</a>). Whether specific bootcamps teach these universal software patterns well is hard for me to judge without having attended them (personally, Flatiron did a decent job of it, but probably could have been better). The language of choice ends up being an (albeit important) implementation detail rather than the problem definition at large.</p>

<p>What matters most in the face of near-certain change, then, is to be adaptable. For software, this usually means building loosely coupled software components that minimize dependencies and leakage into the global scope, and generally not doing more than what&#8217;s required while maximizing space for future changes. For humans, that means being good at learning things. And, ultimately, that&#8217;s what these developer bootcamps are for, to produce solid learning fundamentals so that you&#8217;re not afraid to continue learning long after the 3-month program is done.</p>

<p><strong>Is attending a developer bootcamp a good idea?</strong></p>

<p>This is impossible to answer with any certainty without knowing a person&#8217;s full life circumstances. Can you afford to be without income for the duration of the program plus a few months spent looking for a job? Can you relocate potentially to a new city? Can you get to where you want to be career-wise without going to a dev school? Are you okay spending 60-hour weeks for several months focused on learning a skill set? For me, I believe going to Flatiron was the best choice, for a few reasons.</p>

<p>First, I could afford to live without income for a period of time, mostly because I&#8217;m single, my family is healthy, and the biggest recurring expense I have now is a bedroom in the East Village (which, admittedly, isn&#8217;t cheap). In developer speak, I had few dependencies that I needed to manage. Second, I had been doing a good deal of Excel work in finance, writing macros, building data models, that sort of thing. I saw a solid Excel skill set as building on the same fundamental problem solving, data structuring and process-oriented skill set that good developers have in spades. Third, Flatiron was in New York, so I didn&#8217;t have to relocate, which meant that the rest of my non-work life (i.e., my life) could continue. Finally, Flatiron&#8217;s second semester was set to start in early February, which meant I could leave finance on a high note after year-end and jump right into development. I was very fortunate and blessed that the timing worked out well for me, but that&#8217;s not always the case. I know of friends that would have loved to have the opportunity to do a developer bootcamp, but they couldn&#8217;t for various financial or life reasons.</p>

<p>Coding is a hard skill set to learn, and a very hard skill set to master. Its important not to diminish the amount of effort required to learn how to code, but I&#8217;m convinced that effort is more efficient when made in a collaborative learning environment like a bootcamp. I started to learn how to code on my own about 9 months before starting at Flatiron School using many of the online resources and tutorials that everyone is familiar with (e.g., Codecademy). The biggest stumbling block for me turned out to be understanding the terminal, Unix commands, text editors that aren&#8217;t Microsoft Word and how the Internet works (a series of tubes!), basically all the stuff necessary to be a developer but is not actual development. Learning through Codecademy left me with a bittersweet feeling; while it was great that I was technically writing HTML, CSS and Javascript, I was doing it entirely in a sandboxed web browser that I knew was not equivalent to building an actual application. Yet if I tried to learn the same front-end technologies entirely on my own for real (e.g., installing all the necessary dependencies, using a text editor or IDE) from the get go, I may have given up due to frustration trying to get my $PATH variable set properly before I even wrote a line of actual code.</p>

<p>What I cannot stress enough is that these programs are not for everyone. Not everyone is meant to be a developer, just like not everyone is meant to be a banker, or a painter, or a doctor. Unfortunately, I feel that what makes coding so alluring now is that it seems like a one-way ticket to the glories of the start-up world, where you can add value to society by solving real work problems while also hoping for a solid payday. But that assumption is dangerous. Most developers are not at awesome start-ups with boundless potential. I don&#8217;t have actual statistics, but I imagine that the vast majority of developers in New York are working for faceless corporations like banks or advertising agencies and not the hot new start-up. Therefore, the primary motivation of attending a development bootcamp should be to actually learn to code, not as a pathway to start-up heaven.</p>

<p>Its critical to be honest with yourself and think deeply about whether you are interested in these programs for the sake of the skill set or if you really just want to be part of the start-up scene. If its the latter, that&#8217;s perfectly fine, but in my opinion there are easier and smarter ways to do the start-up thing without going to a developer bootcamp. A good thought exercise is to imagine that you come out of a bootcamp and you get a job as a developer (hurray!) but at some unsexy company (boo!) like a mid-market regional bank or an information processing firm (not even sure what that is but it doesn&#8217;t sound sexy). Would you still be okay with that? Would your love of code and solving problems in and of themselves be sufficient to get you through the day? If so, then coding may be a good path for you since you simply love solving problems, wherever they are and despite the unsexy-ness of those problems. But if not, then your interest in code may stem more from a desire to get into the start-up world than for the inherent problem solving abilities that coding affords. If that&#8217;s the case, then maybe product management or business development at a start-up is a more viable option.</p>

<p>If you don&#8217;t know if you want to be a developer, then go and find out however you can. Go shadow a developer, or go check out hackathons or meetups and talk with people that build software. Even if you end up not becoming a developer, I imagine that spending the time before you make a decision either way to understand what developers do on a day-to-day basis will be time well spent. For me, I went into a hybrid legal / finance role out of college in large part not just to find out what I wanted to do, but also to discredit possible paths that I was considering (like law school!) yet had no actual understanding of. Discovering with reasonable certainty what you don&#8217;t want to do is in some ways just as valuable as discovering what you truly love, assuming, of course, that you learn from your past experiences along the way.</p>

<p><strong>What&#8217;s the value in these bootcamp programs?</strong></p>

<p>I told myself that I&#8217;d refrain from quoting the post, but here&#8217;s one line that I wanted to explicitly refute:</p>

<blockquote>
&#8220;The bootcamp model gives you an &#8216;intensive&#8217; course good enough so that you&#8217;re able to build a shitty web app, and then they hopefully place you in a job needing a code monkey.&#8221;
</blockquote>


<p>If this were the case, I would agree that they would be a scam. The point is not to get you a job as a code monkey, since the competitive advantage developers that come out of these programs have is not that they&#8217;re code monkeys, but rather that they&#8217;re critical problem solvers that happen to have a technical skill set. If I were looking to hire a code monkey, I wouldn&#8217;t hire someone out of Flatiron. I imagine that I&#8217;d be more likely to go to a large company and find someone who has had more real-world experience as a developer. However, if I&#8217;m looking for someone who can diligently thread the needle between developer and product thinker, or someone who can work with the business/product side to refine a feature request before actually prototyping something, then a bootcamp seems like a reasonable recruiting ground.</p>

<p>The goal of these programs (well, of Flatiron, at least. Its a bit disingenuous for me to group all them together) is to build up developers who are problem solvers that are technically inclined, not just technical problem solvers. Sure, this requires programming ability, but it just as much requires soft skills, like empathy for customer problems and a deep desire to understand how people interact with technology products. In fact, I&#8217;ve found that in my experience as both a user and builder of large-scale software projects, there is a gap between the people building software and those using it that can be bridged by those with a technical skill set and a user mindset.</p>

<p>As a developer, I&#8217;ll often build software as I imagine users will use them, but then when they actually get their hands on the software, they end up using it in ways I had not even contemplated. This isn&#8217;t a matter of who&#8217;s right or wrong, but that what&#8217;s needed is a conversation between both sides so that the actual problem at hand can be addressed. When I worked in finance as my team&#8217;s business liaison to the tech team on an enterprise software system, I often saw frustration on both sides that often emerged from a tendency for tech and business to talk past each other. The hope that the people who run Flatiron have for their students is that they can find careers in the chasm between users and builders of software products. For me, Flatiron did a great job in that regard by helping me build the technical skills to actually solve problems.</p>

<p>The desire to be a developer for the rest of your life is not a prerequisite to determining whether it would be a good decision to attend a bootcamp. Personally, I&#8217;m not even sure I want to be a developer for the rest of my life. I went into finance thinking I would go to either law school or business school, and I still haven&#8217;t entirely ruled out business school (I have ruled out law school). What I do know, though, is that I do want to practice problem solving for the rest of my life, and it just so happens that the best way to solve the problems of this globalized, information-rich world is to have a developer&#8217;s skill set. But even if you don&#8217;t want to be a developer for life, you should hope to be a developer for a few years after a bootcamp experience in order for the skill set to really sink in. 3 months is not enough to really, truly know a skill like coding, but I believe it is sufficient, if executed properly, to set someone on the path where they can continue to learn code for a living and be a lifelong problem solver.</p>

<p>Okay, I lied. One last quote from the post:</p>

<blockquote>
&#8220;These bootcamps then train their hopefuls to pass these [technical] tests by drilling them with engineering questions over and over.&#8221;
</blockquote>


<p>I&#8217;m not sure how other programs are structured, but Flatiron definitely did not teach in this way. In fact, it was the opposite. The last week at Flatiron, our instructors gave us the heads up on computer science weed-out questions that we might get in a technical interview (e.g., what are linked lists? compare/contrast a bubble sort versus a merge sort, etc.) as something of an afterthought because they correctly realized that those questions have little to do with actual programming ability, but that in a world of imperfect interview processes, we were likely to get them. Thus, instead of training us to answer those silly technical questions as a way to get the job, Flatiron taught us to know enough to get past those questions so that we can move onto demonstrating our actual programming skills. The instructors didn&#8217;t want us to get jobs because we could fake our way past some inane technical questions; in actuality, they wanted us not to be disqualified by those questions so that we could get the job based on actual skill instead.</p>

<p><strong>What should these programs charge?</strong></p>

<p>Sure, I would love it if these programs were free. But I&#8217;m also willing to pay for a good education. Talented, honest people eager and able to help train good developers should earn a decent living doing so, since the quality of education I get will likely be better than what I can find online in that its more efficient, more social and generally more enjoyable than learning entirely independently. Whether that break even point is $4,000 or $16,000, or whether the best tuition system for aligning interests is a recruitment fee paid by or a flat fee, is entirely up for debate, but I do think that there is value worth paying for in having a structured program led by talented developer-teachers.</p>

<p>The thing that worries me about these programs is when they try to grow too fast and increase their tuition simply as a way to balance supply and demand. In any economic process, bubbles occur when there is information asymmetry between buyer and seller, and prices spiral upwards as herd behavior leads buyers to perceive value in an asset in excess of its intrinsic worth. I hope the increasing demand for these types of schools instead leads to a refinement of student quality rather than just an increase in price. Meaning that those leading these bootcamps become more critical and aware of what makes a successful developer rather than just seeing dollar signs in each eager-eyed student that shows up at their doorstep.</p>

<p>And as for those marketing pitches that promise an $80K to $90K starting developer job out of the program, they need to stop. Not because they&#8217;re not true in that many people do get solid, well-paying jobs out of these programs, but because that&#8217;s not the reason people should be attracted to the programs in the first place (Flatiron School does not make such a promise after graduation). Do not go to a developer bootcamp for the promise of riches at the other end. If you want to get rich, there are easier ways to do so than through developer bootcamps. If you&#8217;re smart enough to be a developer, you&#8217;re probably also smart enough and have enough hustle to get into high finance, where you can make more than you would as a junior developer when bonuses and all that is factored in. But from my experience, being a developer is more rewarding than working in finance, in all the non-monetary facets that are way more important. Facets like job satisfaction, work-life balance and professional culture. Countless studies show that happiness and money lose their correlation after an annual salary of $70,000 - $80,0000, which can buy the basics with some left over for savings in most cities (if it can in NY, then it probably can anywhere). What matters most to happiness after that base salary level is professional fulfillment, and, more importantly, solid relationships and community.</p>

<p>What I fear is that the &#8220;start-up cool&#8221; factor that seems to float around these bootcamps will lead them to emphasize creative marketing or add &#8220;instructors-at-large&#8221; to the payroll that give off the air of legitimacy without providing real, underlying value to students. I liken this latter phenomenon (which I sense is starting to happen but I&#8217;m not entirely sure) to how top-flight universities might pay a lot of money to snag a well-regarded research professor that, while smart, is not actually a good teacher and doesn&#8217;t spend time with students. You shouldn&#8217;t have to sell an arm and a leg just to learn how to code, but if you want a guided, structured experience, it makes sense that you would be asked to pay.</p>

<p>At the end of the day, these bootcamps need to be judged individually, and any person interested in attending needs to consider the question in the context of their own personal circumstances. Evaluating the value of developer bootcamps depends mostly on how you take advantage of the opportunity as a student.</p>

<p>&#8230;and for the record, I do not besmirch the finance or legal professions. I live with two law students as roommates and have many friends who work in finance. I just think software development is better. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a Node app with Express and Mongo]]></title>
    <link href="http://eewang.github.com/blog/2013/10/15/building-a-fantasy-sports-application-with-node-dot-js/"/>
    <updated>2013-10-15T20:49:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/10/15/building-a-fantasy-sports-application-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>Lately, I&#8217;ve been interested in branching beyond the traditional Rails web stack. Node has always seemed interesting to me - not only is it fast and built for concurrency, the notion of using Javascript to structure the back-end seems like a natural next step to me given the language&#8217;s ubiquity in web browsers (check out <a href="http://stackoverflow.com/questions/1884724/what-is-node-js#6782438" target="_blank">this great Stack Overflow post on why you might want to consider Node</a>). Last Friday was the second 100% day at the NYT since I started back in July, so I figured that it would be a good opportunity to explore the Node stack and get myself out of always approaching the web from a Ruby/Rails perspective.</p>

<!--more-->


<p>In thinking of projects that could help me learn Node, I was reminded of Avi&#8217;s maxim that you&#8217;re generally better off building your own project (and thus, solving your own problems) than building someone else&#8217;s. And given that there are countless tutorials on how to build a blog using X, Y or Z framework, I don&#8217;t think I could be engaged in learning Node just by building a blog that I don&#8217;t really care about.</p>

<p>Those who know me know that I&#8217;m a big football fan. I played two years in high school as a strong safety, and I&#8217;ve played intramural football in NYC since I moved here in 2010 (with a recent hiatus to spend time focused on my career shift from finance to technology). Hailing from Chicago, I grew up watching the Bears - names like David Terrell, Anthony Thomas and Shane Matthews still bring a cringed look to my face as I recall the painful memories of so many wasted seasons (except for the 2006-2007 Super Bowl season - that was a fun ride). Thankfully, it looks like the addition of Marc Trestman, the Cutler-Marshall connection and the emergence of Alshon Jeffrey as a viable second receiver seems to be moving the Bears in the right direction offensively, even if the defense continues its rebuilding phase in the post-Urlacher era.</p>

<p>But I digress. Like many football fans, I&#8217;m involved in a few fantasy football leagues that require me to set lineups, add/drop players and attempt trades if I have any hope of getting to the playoffs. My general process is to check some player and matchup research on a weekly basis and make lineup changes accordingly, but that process can be a bit laborious, since I find myself performing this weekly ritual where I check player rankings, then cross-reference those against the available free agents and waiver wire players in my respective leagues.</p>

<p>Conceptually, this should be done programmatically. The data provided by the player rankings should feed an API search query against my fantasy football league database, so that I can get a report that shows who is available for me to pick-up in my league among the players that are ranked higher than those I currently have on my team (thus indicating a potential up-market action for me to take). At a more advanced level, I could expand this program to take in multiple ranking sources or look beyond the free agent market to suggest trade possibilities, but that&#8217;s all beyond the scope of the MVP, so to speak. I want to build an application that can take in data from my fantasy football leagues, mix that with research and analysis from an external site and build me an set of suggested actions that I can take to improve my team.</p>

<p>The stack I&#8217;m exploring to do this is centered on the Express framework, built on Node, with MongoDB as the database and Mongoose as the ODM (Object Document Mapper). On the client-side, I&#8217;m using Jade as the templating engine, Stylus for CSS pre-processing and (hopefully) Backbone as the client-side framework. For now, I plan to just stick with normal browser Javascript plus jQuery, since my short-term goal is to get familiar with Node and MongoDB. Then, once I set the foundation, I&#8217;ll try to move onto building a more UI-focused, client-side application.</p>

<p><em>Node</em></p>

<p>Node is a fast, scalable server-side architecture built using Javascript. I consider its Ruby equivalent to be the Rack framework. To install Node, just use Homebrew (brew install node). Also, you&#8217;ll need to install <a href="https://npmjs.org/" target="_blank">npm</a> (Node Package Manager) to handle Node plugins. Npm is similar to Ruby Gems; it serves as a registry for libraries like Underscore, Mocha and Express.</p>

<p><em>Express</em></p>

<p>Express is a web framework built using Javascript on a Node server. Express is database-agnostic and is relatively lightweight, similar to Sinatra in the Ruby community. I chose Express primarily because of the fact that there are a number of online tutorials about how to build web applications using Express, and Express makes it pretty simple to fire up a Node server and add a few routes.</p>

<p><em>Mongoose (and MongoDB)</em></p>

<p>In this web stack, Mongoose serves as the application&#8217;s interface to Mongo - it provides structure and access to the database. Mongoose is similar to ActiveRecord in that you can make database reads and writes, but its specifically designed to work with a document-store database like MongoDB.</p>

<p><em>Jade</em></p>

<p>Jade is a HAML-like templating language that allows for logic structures like each loops and if statements to determine HTML structure. Jade syntax is incredibly terse and does not have closing tags and, much like HAML, indentation matters.</p>

<p><em>Stylus</em></p>

<p>Stylus is SASS-like CSS preprocessor that is backwards-compatible with normal CSS. Mixins, variables and interpolation are all components of Stylus, which also emphasizes minimalist syntax (e.g., no curly braces).</p>

<p>There&#8217;s a number of solid Express/Node/Mongoose tutorials online, so I won&#8217;t reproduce what those blog posts have already done well. Here are a few of the best ones that I&#8217;ve come across:</p>

<p><a href="http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/" target="_blank">Simple tutorial with Node, Express and Mongo</a><br>
<a href="http://howtonode.org/express-mongodb" target="_blank">Create a blog with Node/Express/Mongo</a><br>
<a href="http://blog.ijasoneverett.com/2013/03/a-sample-app-with-node-js-express-and-mongodb-part-1/" target="_blank">Sample Node/Express application</a></p>

<p>Setting up the application was surprisingly simple, and the above tutorials do a great job of walking through the necessary steps (e.g., install node, install npm, set up Mongo, initiate an Express app). Taking my app beyond the basic tutorial, however, required me to set up a directory structure that could handle multiple models, controllers and routes. Given my familiarity with Rails, I tried to set up my application in a Rails-ian fashion, with an app folder that consists of sub-folders for my models, controllers and views. Here&#8217;s a few links that I found useful when setting up my Express file structure:</p>

<p><a href="http://madhums.me/2012/07/19/breaking-down-app-js-file-nodejs-express-mongoose/" target="_blank">Directory structure of a Node application</a><br>
<a href="http://rycole.com/2013/01/28/organizing-nodejs-express.html" target="_blank">Organizing a Node/Express app</a></p>

<p>And so I set up my application like this:</p>

<ul>
<li>app

<ul>
<li>controllers</li>
<li>models</li>
<li>routes</li>
<li>views</li>
</ul>
</li>
<li>config

<ul>
<li>settings.js</li>
</ul>
</li>
<li>lib</li>
<li>public

<ul>
<li>images</li>
<li>javascript</li>
<li>stylesheets</li>
</ul>
</li>
<li>app.js</li>
<li>package.json</li>
</ul>


<p>The folders are pretty self-explanatory, and the package.json file acts as a Gemfile of sorts in that when you run the &#8216;npm install&#8217;, npm will install the relevant libraries so that you can use them in your application.</p>

<p>To actually run the application, I can run the command &#8216;node app.js&#8217;, which executes the app.js file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// app.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">mongo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongodb&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;util&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;jsdom&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">YahooStrategy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport-yahoo&#39;</span><span class="p">).</span><span class="nx">Strategy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connection</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://localhost/fantasy_football&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// require(&#39;./settings&#39;)(app)</span>
</span><span class='line'><span class="c1">// all environments</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/views&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;jade&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">favicon</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">logger</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">methodOverride</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">cookieParser</span><span class="p">(</span><span class="s1">&#39;your secret here&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">session</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">initialize</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">session</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">)));</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// development only</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;development&#39;</span> <span class="o">==</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;env&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">errorHandler</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Models</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">models_path</span> <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/app/models&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">model_files</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readdirSync</span><span class="p">(</span><span class="nx">models_path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">model_files</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="nx">models_path</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">file</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Routes</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">controllers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./app/controllers&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes_path</span> <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/app/routes&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">route_files</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readdirSync</span><span class="p">(</span><span class="nx">routes_path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">route_files</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="nx">routes_path</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">file</span><span class="p">)(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">controllers</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Controllers</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">controllers_path</span> <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/app/controllers&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller_files</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readdirSync</span><span class="p">(</span><span class="nx">controllers_path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">controller_files</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">file</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="nx">controllers_path</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">file</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Express server listening on port &#39;</span> <span class="o">+</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The file starts by loading the module dependencies for use in the application. Then, it instantiates the application, sets up the database connection via Mongoose, configures the app to use an array of Express middleware modules and libraries and points the application to port 3000. Finally, app.js requires the files in the app folder to the application so that the router, models and controllers can be linked together.</p>

<p>Express seems to be a pretty flexible framework in terms of how the file structure is set up. Like Sinatra and unlike Rails, Express doesn&#8217;t have opinions as to how to organize your application and while there are countless ways to organize your application using Express, the framework comes ready to use out of the box if you just want to quickly set up some routes and get something on your screen. For me, I decided to establish an app structure that&#8217;s both familiar to me and able to handle multiple resources in a RESTful manner before I got too deep in the business logic while relying on a harder-to-scale structure. Now that I have the app set up, The next step is to write out my models, routes and controllers, which I&#8217;ll save for another blog post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Journalism, technology and high school]]></title>
    <link href="http://eewang.github.com/blog/2013/10/04/journalism-technology-and-high-school/"/>
    <updated>2013-10-04T14:14:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/10/04/journalism-technology-and-high-school</id>
    <content type="html"><![CDATA[<p>I had the opportunity to speak to a class of high school journalism students today since I&#8217;m back in Chicagoland for my cousin&#8217;s wedding. Actually, the wedding will be in Urbana-Champaign, but I&#8217;m back in my hometown for a few days before heading south tomorrow. My former high school journalism teacher and advisor for <a href="http://nnhsnorthstar.com/" target="_blank">the North Star</a> recently connected back with me and asked if I could speak to her students on working at the NYTimes and technology and journalism in general, and I was more than happy to oblige.</p>

<!--more-->


<p>This year, the North Star underwent a switch from a physical paper to a digital-only publication. When I was working at the paper as a Sports Editor in 2005-2006, we barely had a web presence and instead our monthly editorial process was geared toward printing all our stories at the same time. This made it a struggle to produce timely, hard news content since no one reads a basketball game recap if the game was played two weeks ago.</p>

<p>A digital-first (and only) approach sharpens the mind and forces editors to keep busy and produce content on a daily basis. That said, a critical ingredient for producing great writing is the print word count. Mark Twain famously said that he always wrote long letters since he never had time to write a short one. Editing for a print paper forces space constraints and requires writers to think critically of each word and sentence they write since it consumes valuable paper real estate. The Web doesn&#8217;t have the same constraints, which can be empowering yet lacking in the discipline print constraints provide.</p>

<p>Anyways, here&#8217;s a rundown on what I touched on today:</p>

<h4><em>Think of technology as the intersection between the artistic and the analytical&#8230;</em></h4>

<p>One of the flaws in my thinking when it came to programming and engineering earlier in my life was the belief that technology equaled mathematics and science. I come from an engineering family - my mom is a database architect, my dad is a networking professor and my brother is a software developer - and most of my life I figured that I would go a different route. I was always really into history and social studies, loved discussing philosophy and politics/policy, and reflexively opposed going into engineering. This was in large part because I didn&#8217;t want to go the corporate route working for a large technology company that my parents went down. All that they did just seemed boring to me as an idealistic teenager interested in solving the world&#8217;s problems.</p>

<p>In that light, the irony is rich that I&#8217;m now working in software.</p>

<p>Looking back, I unreasonably discarded engineering as a career path when I was younger. I had thought that exploring the humanities and pursuing technology were mutually exclusive endeavors, that I could either try and solve the world&#8217;s problems (the defacto motivation for a social studies geek like me) or work for some faceless corporate conglomerate as a boring but financially stable engineer.</p>

<p>Since my youth, my understanding of technology has deepened, and I now appreciate technology for how it can bridge the intellectual divide between art, design and other traditionally creative fields and data-driven fields like finance, engineering or the hard sciences. Working in a product-focused group at the NYT has shown me how design, content and engineering can work together to build something both functionally useful and aesthetically pleasing.</p>

<h4><em>&#8230;and realize that technology doesn&#8217;t replace your passions, it enhances them</em></h4>

<p>This goes in line with my first point, mainly that you shouldn&#8217;t think of career opportunities as necessarily either/or. When I was younger, I thought that I could do journalism or I could do engineering or I could become a doctor. Once I got older, however, I realized that less black-and-white than that, and more of an &#8216;and&#8217; proposition than I had thought - technology and journalism, for example. Sure, you can do journalism without the help of technology, but technology enhances the journalistic experience and enables a much wider audience. In many ways, this is an exciting fact. No longer did I have to clearly choose between well-delineated fields like I thought I had to when I was younger, but now I can apply elements of various skills or topics that I like into a single job. The siloed nature of my education started to unravel in and after college as I realized that what I thought of as monolithic career paths were actually much more complex, interconnected and diverse than I had thought. That said, this fact also raises the bar for success, since the best opportunities to bridge the gap between fields tends to accrue to those with a wide range of skills.</p>

<p>Therefore, I told the students to focus on building skills when you&#8217;re young, even if you can&#8217;t immediately see the connection between those experiences and what you eventually want to do in life. Learn to enjoy being a constant beginner and place a lot of small bets on different skills, for a few reasons. First, few people really know what they want to do early on in their life, even those who seem to be on a clear professional path (e.g., doctors or lawyers), so you never know when or what skills will be useful. Second, your brain is better at building procedural memory (i.e., skills) compared to declarative memory (i.e., facts) early on in life. This is why its best to learn Spanish or how to play the trumpet when you&#8217;re young, and leave the memorization of people, places and things for later. As you get older, you&#8217;ll naturally learn to focus and develop a specialization on a subset of skills, but having a broad base will help you recognize opportunities for innovation and creativity in different sectors that you wouldn&#8217;t have seen otherwise.</p>

<p>Likewise, creativity and innovation abounds at the intersection of seemingly disparate skills and industries. Steve Jobs&#8217; greatest innovation at Apple was integrating design with engineering, such that today we look at iPhones as artistic objects with beauty in their own right and not just functional tools that get the job done. Technology is a great tool for deepening your understanding of whatever it is you&#8217;re passionate about - there are few industries or topics that have not been overturned by technology. For me, that passion centers around journalism and public policy. But the same is true for music (Spotify, Soundcloud) or retail (Gilt, Etsy) or any other industry.</p>

<h4><em>A globalized and connected society needs great journalism&#8230;</em></h4>

<p>As the world has become more globalized and interconnected, there are countless more stories to be uncovered and connections to be explored by journalists. Technology creates relationships and links between people and institutions that previously did not exist. Software companies like Twitter or Facebook can emerge within a mere few years to command tremendous mindshare and influence. Journalism, at its core, is about exploring these relationships and structures of influence. The abundance of technology-enabled relationships and connections makes for a ripe environment for good journalism to shed light on these linkages.</p>

<p>Its mind-boggling to think about how many different companies and products I interact with on a daily basis. This morning alone in the span of a few hours I used products from the following companies or organizations: Toyota, Starbucks, Apple, ExxonMobil, Spotify, Evernote, Github, NYTimes, UnderArmor, Uniqlo, Procter &amp; Gamble, Armani, Nike, 37Signals, Kikkoman, Bausch &amp; Lomb and Google. The world is connected like never before, and because of that, there are abundant opportunities for journalists to probe the nodes of influence that operate below the surface yet affect the everyday lives of ordinary people.</p>

<h4><em>&#8230;and great journalism needs great software</em></h4>

<p>Data and technology can serve journalism well as a complement to traditional reporting and writing. Technology can benefit every part of the journalistic process, from research and data gathering to writing to editing. Broadly, technology helps journalism from both the front-end and the back-end, meaning that both creation (e.g., reporting tools) and distribution (e.g., interactive graphics, news applications, etc.) of journalistic content can be enhanced by technology. And I&#8217;m speaking about technology broadly defined, not just web development. Stories like this one on <a href="http://www.nytimes.com/2013/10/03/health/millions-of-poor-are-left-uncovered-by-health-law.html" target="_blank">how millions of poor people are not covered by insurance under Obamacare</a> are enabled by an understanding of data and delivered using code, which can produce cool graphics like <a href="http://www.nytimes.com/interactive/2013/10/02/us/uninsured-americans-map.html?ref=health" target="_blank">this one</a> using Javascript.</p>

<p>The Internet is the world&#8217;s greatest distribution platform ever invented. And while many lament the damage the advent of the Internet has done on media company balance sheets, great content can circulate the globe in a matter of minutes, expanding the reach of journalism beyond what paper media could provide. At the Times, I&#8217;m working every day to determine how to best deliver journalism across the Internet and on mobile platforms. Its still unclear to me how the integration of technology and journalism will  play out when its all said and done, and that&#8217;s the exciting part. Journalism, and media more broadly, is at this turning point where some of the hemmoraghing of ad dollars from the mid-2000s has been stanched somewhat by the advent of the online pay wall (at least for the NYT). Technology is fast becoming a way to further distinguish good journalism from bad journalism, just witness the use of data-driven graphics and interactive news applications that the NYT has put out in the past 12 months (see <a href="http://www.nytimes.com/newsgraphics/2013/09/13/fashion-week-editors-picks/?ref=fashion" target="_blank">here</a>, <a href="http://www.nytimes.com/newsgraphics/2013/08/18/reshaping-new-york/" target="_blank">here</a>, and <a href="http://www.nytimes.com/interactive/2013/07/01/us/firefighter-map.html" target="_blank">here</a>).</p>

<p>Regardless of how technology ends up transforming journalism, I&#8217;m just thankful and humbled that I get to be a part of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Presenting the Rails Presenter Pattern]]></title>
    <link href="http://eewang.github.com/blog/2013/09/26/presenting-the-rails-presenter-pattern/"/>
    <updated>2013-09-26T20:58:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/09/26/presenting-the-rails-presenter-pattern</id>
    <content type="html"><![CDATA[<p>The past few weeks have been pretty busy for me in terms of work. My team&#8217;s product schedule has been ramping up, and we&#8217;re right in the middle of rapidly prototyping both the customer-facing product and our editorial interface. Also, we recently added Backbone.js to our project, so I&#8217;ve been getting up to speed on how to integrate a client-side Javascript framework into a Rails application.</p>

<!--more-->


<p>I find adding Backbone to this project particularly exciting because I wrote most of the client-side functionality of our editorial interface in raw Javascript, so I&#8217;m more than happy to have the opportunity now to use Backbone to provide structure and cleaner interactivity. Much like how at Flatiron learning Ruby, SQL and Sinatra before turning to Rails made me appreciate all the work Rails does behind the scenes, implementing Backbone after having written less-than-stellar Javascript to create the same functionality makes me appreciate the value front-end frameworks like Backbone, Ember or Angular provide.</p>

<p>Outside of work, my development time has been mostly focused on <a href="http://www.litcharts.com" target="_blank">Litcharts</a> - a web and mobile platform for reviews and analysis of classic literature that was co-founded by a former fellow Flatironer and current NYTimes colleague, <a href="https://github.com/meowist" target="_blank">Justin Kestler</a>. My particular task has been to create a tool that builds newspaper-layout-like PDF versions of litcharts using HTML, CSS and Javascript. What seemed like a simple task - I initially thought I could just use CSS3 columns and a gem like Prawn or Wicked PDF - quickly turned complicated for a variety of reasons that I won&#8217;t go into at the moment. Needless to say, the past month or so has been quite busy for me with NYT and Litcharts work.</p>

<p>Consequently, the time available for me to blog has rapidly dwindled. I set a goal for myself to write one blog post a week as a way to motivate myself to keep learning code and exploring technology. What I&#8217;ve learned, though, is that after a program like Flatiron, where you&#8217;re immersed in code and laser focused on rapidly building an entirely new skill set, I&#8217;ve hit my stride with code in that its become a familiar extension of myself, like writing or reading. This means I can keep learning about code while living a more balanced lifestyle than I did at Flatiron; I can&#8217;t imagine that the countless hours spent writing, reading and talking about code in school is particularly sustainable in the long run.</p>

<p>But now back to the code. I recently implemented the Presenter pattern in my team&#8217;s Rails application. For those not familiar with the Presenter pattern, its a way to keep your view and controller logic as clean as possible by having a Ruby class serve as the interface between your model and the view/controller. Another way to think of a Presenter in Rails is as a serializer for your Views. And much like how ActiveModel::Serializers enable you to build a clean API and encapsulate API logic within methods that are easily testable, Presenters keep your model-specific view logic in one class that you can test like you would any other Rails model.</p>

<p>Imagine you have an Article class that represents a newspaper article. Articles each have associated multimedia elements, which can vary from an image, video or slideshow. For the sake of this post, an article is a stripped down model that just stores a serialized hash to represent the associated multimedia assets.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Article</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">serialize</span> <span class="ss">:multimedia</span><span class="p">,</span> <span class="no">Hash</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The multimedia attribute looks something like this when serialized.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="ss">:caption</span> <span class="o">=&gt;</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:credit</span> <span class="o">=&gt;</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:images</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:small</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://nytimes.com/image-small.jpg&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:dimensions</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="ss">:height</span> <span class="o">=&gt;</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:width</span> <span class="o">=&gt;</span> <span class="mi">500</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="ss">:large</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://nytimes.com/image-large.jpg&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:dimensions</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="ss">:height</span> <span class="o">=&gt;</span> <span class="mi">500</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:width</span> <span class="o">=&gt;</span> <span class="mi">500</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="ss">:videos</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:small</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:preview</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://nytimes.com/video.m4v&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:dimensions</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="ss">:height</span> <span class="o">=&gt;</span> <span class="mi">300</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:width</span> <span class="o">=&gt;</span> <span class="mi">400</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In my views and controllers, I need to be able to access the urls and dimensions of each multimedia asset to render a preview of the asset. One option to get these attributes is to do a whole bunch of type checking within my views and access the url of an image as follows:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="vi">@article</span><span class="o">.</span><span class="n">multimedia</span><span class="o">[</span><span class="ss">:images</span><span class="o">][</span><span class="ss">:small</span><span class="o">][</span><span class="ss">:url</span><span class="o">]</span> <span class="c1"># =&gt; http://nytimes.com/image-small.jpg</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rather than have the logic in the controller or view, the Presenter pattern provides a Ruby class that wraps a Rails model in order to create a simple API to the underlying object. Rather than going through the hash in my view, what I want to be able to do is just call #url or #caption on my article instance and get back the necessary information. I can add methods to my ArticlePresenter class to semantically access multimedia urls in my controllers and views rather than constantly checking a key-value pair in a deep nested hash.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ArticlePresenter</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">DEFAULT_FORMAT</span> <span class="o">=</span> <span class="s1">&#39;small&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">FORMAT_TYPES</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:small</span><span class="p">,</span> <span class="ss">:large</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">article</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@article</span> <span class="o">=</span> <span class="n">article</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">FORMAT_TYPES</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">format</span><span class="si">}</span><span class="s2">_image_url&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@article</span><span class="o">.</span><span class="n">multimedia</span><span class="o">[</span><span class="ss">:images</span><span class="o">][</span><span class="nb">format</span><span class="o">][</span><span class="ss">:url</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">format</span><span class="si">}</span><span class="s2">_video_url&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@article</span><span class="o">.</span><span class="n">multimedia</span><span class="o">[</span><span class="ss">:videos</span><span class="o">][</span><span class="nb">format</span><span class="o">][</span><span class="ss">:url</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">url</span><span class="p">(</span><span class="n">type</span> <span class="o">=</span> <span class="ss">:image</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@article</span><span class="o">.</span><span class="n">multimedia</span><span class="o">[</span><span class="n">type</span><span class="o">][</span><span class="no">DEFAULT_FORMAT</span><span class="o">][</span><span class="ss">:url</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">caption</span>
</span><span class='line'>    <span class="vi">@article</span><span class="o">.</span><span class="n">caption</span> <span class="o">||</span> <span class="s2">&quot;No caption&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ... Other presenter methods</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@article</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way, in my controller I can wrap each article in a collection in an ArticlePresenter instance, so that in my views I just need to call @article.small_image_url or @article.large_video_url to get what I need rather than checking the multimedia hash. Both ways get the same result, but using a Presenter provides a testable object-oriented interface for view-specific logic relevant to a Rails model.</p>

<p>And like ActiveModel::Serializers, I can set default values for nil return without having to change the underlying data. In this example, if an article multimedia item doesn&#8217;t have a caption, instead of returning nil to the view, I can instead return a string, &#8220;No caption&#8221;. This helps tailor your model instance to specific views without adding unwiedly logic to your ERB/HAML templates.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ArticleController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@articles</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span> <span class="no">ArticlePresenter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">article</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>One question I had when exploring the Presenter pattern was how it differed from plain old Rails helpers. I think Presenters are useful when you have logic specific to your models that you need encapsulated, whereas Rails view helpers are intended for more generic logic that is model agnostic, like converting dates or measurements. Of course, you could probably use view helpers to accomplish the same function as Presenters, but having a one-to-one relationship between a Presenter and its model feels cleaner to me.</p>

<p>Here are a few links that I found helpful while implementing the Presenter pattern.</p>

<p><a href="http://blog.jayfields.com/2007/03/rails-presenter-pattern.html" target="_blank">Jay Fields on the Presenter Pattern</a></p>

<p><a href="http://www.derekhammer.com/2012/11/06/a-pattern-for-rails-presenters" target="_blank">A Pattern for Rails Presenters</a></p>

<p><a href="http://www.tamingthemindmonkey.com/2012/04/10/exploring-the-presenter-pattern" target="_blank">Exploring the Presenter Pattern</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Windy City Rails, Day 1]]></title>
    <link href="http://eewang.github.com/blog/2013/09/12/thoughts-on-windy-city-rails/"/>
    <updated>2013-09-12T20:06:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/09/12/thoughts-on-windy-city-rails</id>
    <content type="html"><![CDATA[<p>I have the good fortune to be in Chicago today and tomorrow for the <a href="http://www.windycityrails.org/" target="_blank">Windy City Rails</a> conference. The NYT was kind enough to pay for me to fly here and attend the conferece, and I&#8217;m sure it helps that I can crash with my brother in the south Loop rather than get a hotel room. Whenever I can get the chance to come back home and see my family and friends, I try to jump at the opportunity.</p>

<p>Here are some thoughts on the most interesting talks I heard on WCR Day 1.</p>

<!--more-->


<h4>&#8220;Functional Principles for Ruby Developers&#8221; by <a href="https://twitter.com/jessitron" target="_blank">Jessica Kerr</a></h4>

<p>Functional programming is pretty much a black box to me. I&#8217;ve heard a lot about it and know about the languages that implement it, but don&#8217;t quite understand how it works or what the tradeoffs are compared to the more familiar object-oriented programming paradigm. As a Scala and Ruby developer, Jessica spoke about the core tenets of functional programming, and how they can be applied to Ruby and Rails. Her talk was the one I found most insightful and helpful for me personally on Day 1, and I liked how she used a simple, self-contained example (a Ruby script to calculate the total price of a set of data on books in .csv format) that demonstrated in code the broad themes she touched on.</p>

<p><em>Data In, Data Out</em></p>

<p>This seems to be the fundamental aspect of <a href="http://en.wikipedia.org/wiki/Functional_programming" target="_blank">functional programming</a>. Functions are intended to be black boxes that take in data, do some awesome calculations, then return some other data. Personally, I need to see more code examples / translations into functional programming in order to fully grasp what&#8217;s going on, but I get how functional programming can help improve the predictability of an application&#8217;s behavior by removing or minimizing state dependency and the impact within a function on the outside environment. Pat Shaughnessy gave a <a href="http://www.youtube.com/watch?v=5ZjwEPupybw" target="_blank">great talk</a> on functional programming and Ruby using Haskell as a foil at GORUCO 2013. Jessica&#8217;s talk helps solidify some of my understanding of functional programming after hearing about it (and having it fly over my head) at GORUCO.</p>

<p><em>Functions are data</em></p>

<p>Lambdas in Ruby serve as first-class functions, not blocks or procs. Functions that are first-class can be stored as variables, passed around as parameters and set as the return value from other functions. An example of this is in how lambdas handle return or break statements. Return in a lambda exits the immediately executing scope to the parent environment, whereas blocks and procs exit out of the scope above them. Functions in a functional programming context are intended to be complete black boxes - data comes in, something happens, and data comes out. Lambdas are more accurate reflections of this functional programming construct than the other pseudo-function elements like blocks or procs.</p>

<p><em>Errors are data too</em></p>

<p>This relates with the item below - basically, that the more information you have about why your program isn&#8217;t working, the more likely you&#8217;ll be able to get your program to work. Standard error messages include stack traces and specific indications of why your code is broken (NoMethodError, for example, pretty succinctly tells you that you&#8217;re calling a method that doesn&#8217;t apply). Coders should try and add in their own custom error messages to describe why their program doesn&#8217;t work. In Jessica&#8217;s example, instead of trusting the program to sum up all the prices of the books, adding custom error messages helps in debugging and indicating whether the program didn&#8217;t work properly because the book didn&#8217;t have an ISBN number or that it didn&#8217;t have a price.</p>

<p><em>Nil is not data</em></p>

<p>Nil means a lot of things in Ruby - it&#8217;s pretty much the catch-all return value for whenever something doesn&#8217;t go according to plan. You search for a non-existent key in a hash (nil!). You have an if-statement without an explicit else block (nil!). You try to access an array index greater than the size of the array itself (nil!). All of these use cases demonstrate the ubiquity of nil so much so that if nil means everything, it also means nothing.</p>

<p>Jessica demonstrated a way to convert nil values into meaningful messages that specify what exactly happened. For example, adding custom error messages and returing those as the script is running is more informative than just returning nil. This way, you know where your data is dirty and how you can further address it. She goes into more detail in her Github repo with the presentation (which I defintely recommend checking out).</p>

<p><em>Functional composition</em></p>

<p>Composition in functional programming refers to a &#8216;fits together with&#8217; type whereas composition in object-oriented programming is a &#8216;has a relationship with&#8217; type. For example, in order to print useful tracing messages, try and wrap functions in a helper method that prints out an error message and then calls the function itself. This is easier and DRYer than going into each of your methods and writing out messages, since if you want to change how you print the message, you only have to modify the body of one function rather than several.</p>

<p><em>Be Lazy</em></p>

<p>This goes without saying in general, but in this example speciically, the #lazy method in the Enumerable class helps evaluate one book. Without laziness, the process goes - import all book lists, check all prices, get all validly formatted books, then summing all the prices. With laziness, each book is processed end-to-end at a time. This way, the memory imprint of the process is minimized, and the sum builds up incrementally rather than being calculated all at once at the very end of the process. I liken the laziness aspect to scaling vertically rather than horizontally - its generally smarter (and much easier) to do the former than the latter.</p>

<p>I had not known previously about the <a href="https://github.com/yhara/enumerable-lazy" target="_blank">#lazy</a> Enumerable method, and it looks like a nifty component added in Ruby 2.0, so I&#8217;ll definitely be sure to try and play around with it wherever I can.</p>

<p>Here are a few helpful links - Jessica&#8217;s Github repo about the example she used is pretty descriptive of the benefits of functional programming with Ruby coming from a non-Rubyist perspective.</p>

<p><a href="https://github.com/jessitron/fp4rd" target="_blank">Why should a Rubyist care about functional programming?</a></p>

<p><a href="http://www.confreaks.com/videos/2382-rmw2013-functional-principles-for-oo-development" target="_blank">Functional Principles for OO Development (Ruby Midwest)</a></p>

<h4>&#8220;Devs and Depression&#8221; by <a href="https://twitter.com/greggyb">Greg Baugues</a></h4>

<p>This talk by Greg Baugues was probably the most unique talk I heard all day, largely because it didn&#8217;t deal directly with code. Greg shared his personal struggle with bipolar disorder and ADD, and spoke about how certain qualities like intense focus and grandiose thoughts displayed by developers can actually reflect a deeper, unhealthy state. As someone with loved ones who have been afflicted by depression, I appreciated the honest look Greg provided into how mental health issues can debilitate one&#8217;s capacity for creativity and productivity. Go check out <a href="http://www.devsanddepression.com/" target="_blank">this site</a> about his depression.</p>

<h4>&#8220;Keeping Your Massive Rails App From Turning Into a S#!t Show&#8221; by <a href="https://twitter.com/benjamin_smith" target="_blank">Benjamin Smith</a></h4>

<p>Service-oriented architecture seems to be all the rage these days, and Ben (of Pivotal Labs) described the process they used to build a complex social networking application using self-contained Rails engines. By breaking out the circular dependencies that are common across Rails (e.g., User has many Posts; Posts belongs to User), they were able to avoid having a monolithic User model and instead bolt-on added functionality (e.g., comments, likes, photos, etc.) in a discrete and loosely coupled manner without adding unwieldly dependencies.</p>

<p>I haven&#8217;t used <a href="http://edgeguides.rubyonrails.org/engines.html" target="_blank">Rails engines</a> before, but they seem like nifty structural components to keeping code self-contained and modular so that separate teams can work on sub-sections of an application in relative isolation. One of the drawbacks of this technique, though, was that the initial velocity of the project was low, as they were focusing a lot on ensuring structural efficiency. However, this more than paid off as the project scaled, because they could add features incrementally without having to worry about dependencies across the project.</p>

<h4>&#8220;Hardware Integration with Rails&#8221; by <a href="https://twitter.com/too_mitch" target="_blank">Mitch Lloyd</a></h4>

<p>Mitch, who works at a development shop out of Pittsburgh called Gaslight, covered the basics of dealing with hardware using Ruby. He walked the group through converting Ruby messages into binary using basic &#8216;to_i&#8217; commands with varying bases (default is base 10) to send the proper messages to the hardware receiver. Having never worked with hardware before, I appreciated his zero-baseline approach to teaching hardware programming, but I frankly got a little lost when he moved on to managing asynchronous tasks between software sender and hardware receiver and multi-threading. These are topics that I need more experience in - don&#8217;t worry though, they&#8217;re on my list of technical areas to explore.</p>

<p>Having gone to a grand total of two technical programming conferences (represent GORUCO 2013!), I&#8217;m starting to get a feel for what I like and don&#8217;t like in technical talks.</p>

<p><strong>Likes:</strong> Small, self-contained code sample or example application that demonstrates the main themes of the talk. Coherent presentation structure (bulleted &#8216;takeaways&#8217; are an easy way to accomplish this). Description of both anti-pattern and pro-pattern (e.g., &#8220;this is what y&#8217;all are doing&#8230; but this is how y&#8217;all should be doing it&#8221;). Keep presentations to 30 minutes, max. Maybe 45 minutes, but you&#8217;re really pushing it then.</p>

<p><strong>Dislikes:</strong> Presenters who are too abstract and don&#8217;t deal with code implementation details about what they&#8217;re advocating. Presenters who are too detailed and don&#8217;t convert the code they&#8217;re writing to broader abstract themes. Bad jokes that fall flat on the audience.</p>

<p>I&#8217;ll see what today brings, but overall I&#8217;ve enjoyed my time at Windy City Rails. The talks have covered a wide swath of topics - from testing, to functional programming, to mental health issues. One downside of the conference, though, was that it held at the South Shore Convention Center, south of the University of Chicago. For those not familiar with Windy City geography, that&#8217;s like holding GORUCO out in Pelham Bay Park in the Bronx - a beautiful area with natural scenery and fresh air, but a bit away from the bustling city center. I wish Windy City Rails were held right in the Loop, not only for my own commuting convenience but more so for those who haven&#8217;t really seen Chicago and want to explore the great city I call home (disclaimer: I&#8217;m actually from Naperville, a suburb of Chicago, but no one needs to mention that :)).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Applying Vector Bitmask Fields in Rails]]></title>
    <link href="http://eewang.github.com/blog/2013/08/31/applying-vector-bitmask-fields-in-rails/"/>
    <updated>2013-08-31T12:49:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/08/31/applying-vector-bitmask-fields-in-rails</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using a gem called <a href="https://github.com/pboling/flag_shih_tzu" target="_blank">Flag Shih-Tzu</a> in a number of my projects
recently. In addition to being a wonderfully (and aptly) named gem,
FlagShihTzu makes it super simple to add bit mask fields, or Boolean
indicators, without having to run additional migrations. In other
words, it allows you to flag shit on your models and makes it easier to avoid technical debt when there is little certainty of an application&#8217;s trajectory.</p>

<!--more-->


<p>When I first heard about <a href="http://en.wikipedia.org/wiki/Bit_array" target="_blank">vector bit fields</a> at 8to18 Media, I&#8217;ll admit that they sounded intimidating. Its a pretty computer scienc-ey sounding term - vectors! bits! technology! But in reality, they&#8217;re pretty much just an array of zeroes and ones, and the position of those bits in an array map to a vector legend. Imagine you have a 1 or 0 in each position of an array of size 3. A &#8216;1&#8217; in the first position indicates 2 ^ 0, a &#8216;1&#8217; in the second position is equal to 2 ^ 1, and a &#8216;1&#8217; in the third position is 2 ^ 2. That way, an array of [1, 0, 1] is equal to 2 ^ 0 + 2 ^ 2, or 5. Similarly, an array of [1, 1, 0] is equal to 3, and an array of [0, 1, 0] is equal to 2. Vector bitmasks (a.k.a. bit arrays) are a fairly elegant way to keep track of boolean, on-off switch attributes. <a href="http://devblog.xing.com/ruby-on-rails/a-rails-plugin-to-store-a-collection-of-boolean-values-as-a-single-bit-field/" target="_blank">Here&#8217;s</a> a helpful short blog post explaining bit fields.</p>

<p>What the FlagShihTzu gem does is basically convert an integer field in your
database table to a vector of bit masks. Based on the mapping
structure that you define in the relevant model, FlagShihTzu will
set and get the necessary bit fields and give you a bunch if useful
helper methods to enable you to plan effectively for horizontal scale
in your schema. Without this gem and without rolling your own similar
functionality, adding Boolean indicators means running a new migration
and getting methods set up for each new field. This can be mitigated
by using define_method or method_missing, but adding in a gem provides
the useful functionality without adding unwieldy dependencies.</p>

<p>Getting set-up with the gem is pretty standard - set up a Rails app and add it to the Gemfile. I&#8217;ve had to think a lot about apartments and housing in general in the last few weeks (searching for an apartment in the East Village and helping friends move will do that), so I figured I could use the domain of apartment and housing search for my example app. The more I&#8217;ve thought about it, the more I think the real estate area is a pretty good domain model - its something everyone is familiar with, and especially in the case of explaining bit fields, has a slew of reasonable use cases for boolean attributes.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails new nyc_apts
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;flag_shih_tzu&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running bundle install, add a model and create your database table. FlagShihTzu will automatically look for a column named &#8216;flags&#8217; unless you explicitly tell it to use a different column for the vector bitmask. In my project, I set the :columns option in my Building model to &#8216;amenities&#8217;. This way, FlagShihTzu will change the value of my &#8216;amenities&#8217; integer field as I set my boolean attributes.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate model apartment
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># in db/migrate</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CreateBuildings</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:buildings</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span>  <span class="ss">:amenities</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="ss">:address</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="ss">:building_structure</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="ss">:leasing_company</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="ss">:description</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>  <span class="ss">:phone_number</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:year_built</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After running rake db:migrate, I can add the following code to my building.rb file to tell it to use the FlagShihTzu functionality in my Building model.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/building.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Building</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">FlagShihTzu</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_flags</span> <span class="mi">1</span> <span class="o">=&gt;</span> <span class="ss">:pets_allowed</span><span class="p">,</span>
</span><span class='line'>                      <span class="mi">2</span> <span class="o">=&gt;</span> <span class="ss">:doorman</span><span class="p">,</span>
</span><span class='line'>                      <span class="mi">3</span> <span class="o">=&gt;</span> <span class="ss">:elevator</span><span class="p">,</span>
</span><span class='line'>                      <span class="mi">4</span> <span class="o">=&gt;</span> <span class="ss">:laundry</span><span class="p">,</span>
</span><span class='line'>                      <span class="ss">:column</span> <span class="o">=&gt;</span> <span class="s1">&#39;amenities&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that once you choose an order for your flags, you cannot change them. Because the gem converts an integer into an array of bits, changing the mapping of the bit positions will yield different results for the same integer value.</p>

<p>That&#8217;s all you need to add to your model in order to start playing around with the gem. In the background, FlagShihTzu adds an slew of useful methods for setting, getting and checking your boolean attributes. Specifically, these are the ones I find most useful. The documentation on Github has more instance methods, but I haven&#8217;t found much use for them so far in my projects.</p>

<ul>
<li>Building#doorman</li>
<li>Building#doorman?</li>
<li>Building#doorman=</li>
<li>Building#doorman_changed?</li>
</ul>


<p>In my rails console, I can execute the following commands to quickly set my amenities column value using semantic setters for my boolean attributes.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>001:0 &gt; <span class="nv">building</span> <span class="o">=</span> Building.new
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&lt;Building id: nil, amenities: nil, address: nil, building_structure: nil, leasing_company: nil, description: nil, phone_number: nil, year_built: nil, created_at: nil, updated_at: nil&gt;</span>
</span><span class='line'>002:0 &gt; building.doorman?
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">false</span>
</span><span class='line'>003:0 &gt; building.pets_allowed?
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">false</span>
</span><span class='line'>004:0 &gt; building.doorman <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'>005:0 &gt; building.amenities
</span><span class='line'><span class="o">=</span>&gt; 2
</span><span class='line'>006:0 &gt; building.pets_allowed <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'>007:0 &gt; building.amenities
</span><span class='line'><span class="o">=</span>&gt; 3
</span></code></pre></td></tr></table></div></figure>


<p>Also, calling &#8216;has_flags&#8217; within your model produces class scopes that are useful for getting all instances of a Building that have doormen, for example. These method scopes are pretty straight forward - Building#doorman and Building#not_doorman, for example, will return an ActiveRecord Relation of all model instances that do or do not have the #doorman attribute set to true.</p>

<p>Although FlagShihTzu provides useful methods for setting and getting individual boolean attributes, I&#8217;ve been adding additional methods to set multiple attributes. For example, here are methods that allow for setting and getting attributes in bulk.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/building.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Building</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_building_flags</span><span class="p">(</span><span class="n">flags</span><span class="p">,</span> <span class="n">list_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">flag_bits</span> <span class="o">=</span> <span class="n">flags</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">flag</span><span class="o">|</span> <span class="no">Building</span><span class="o">.</span><span class="n">flags</span><span class="p">(</span><span class="n">list_name</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">flag</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)}</span>
</span><span class='line'>    <span class="n">list_bitmask</span> <span class="o">=</span> <span class="n">flag_bits</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">item</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="mi">2</span><span class="o">**</span><span class="n">item</span> <span class="p">}</span>
</span><span class='line'>    <span class="nb">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">list_name</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">list_bitmask</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">flags</span><span class="p">(</span><span class="n">column</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Building</span><span class="o">.</span><span class="n">flag_mapping</span><span class="o">[</span><span class="n">column</span><span class="o">.</span><span class="n">to_s</span><span class="o">].</span><span class="n">keys</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">flag_setting</span><span class="p">(</span><span class="n">setting</span><span class="p">,</span> <span class="n">list</span><span class="p">)</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="p">((</span><span class="n">setting</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">**</span><span class="n">list</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">a</span><span class="p">))</span><span class="o">.</span><span class="n">zero?</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">amenities_list</span>
</span><span class='line'>      <span class="n">flag_setting</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">amenities</span><span class="p">,</span> <span class="no">Building</span><span class="o">.</span><span class="n">flags</span><span class="p">(</span><span class="ss">:amenities</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The #set_building_flags accepts an array of flags and an integer bitmask column in your database table and will set column appropriately. Similarly, #amenities_list takes advantage of the #flag_setting method to return the list of amenities a building instance has rather than just the integer value of the bitmask field.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>001:0 &gt; <span class="nv">a</span> <span class="o">=</span> Building.new
</span><span class='line'>002:0 &gt; a.set_building_flags<span class="o">([</span>:elevator, :laundry<span class="o">]</span>, :amenities<span class="o">)</span>
</span><span class='line'><span class="o">=</span>&gt; 12
</span><span class='line'>003:0 &gt; a.amenities_list
</span><span class='line'><span class="o">=</span>&gt; <span class="o">[</span>:elevator, :laundry<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, the #flags class method extends the #flag_mapping class method provided by the gem by checking the hash that gets returned by the #flag_mapping method and returning the list of possible boolean indicators for the given column.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>001:0 &gt; Building.flags<span class="o">(</span>:amenities<span class="o">)</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="o">[</span>:pets_allowed, :doorman, :elevator, :laundry<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straightforward stuff. Using FlagShihTzu in my projects has been a pretty lightweight way to add functionality that is easy to extend as my project grows. This way, adding new boolean indicators only requires one extra line of code in my model files, rather than running a new migration each time, which can quickly get unwiedly, especially for a young project that has not fully been fleshed out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Navigating the Job Search]]></title>
    <link href="http://eewang.github.com/blog/2013/08/26/navigating-the-job-search/"/>
    <updated>2013-08-26T07:24:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/08/26/navigating-the-job-search</id>
    <content type="html"><![CDATA[<p>Last Friday was graduation day for the most recent cohort of Flatiron School students, and today is the first official day of the post-school job search process. I&#8217;m reminded of the my first day after the last day of Flatiron, when I went back into school just out of habit and a desire to continue the accelerated learning process that I had become so accustomed to. In light of that and with an eye toward helping out the newly-minted Flatiron graduates, here are a few thoughts that I hope can be useful to those who are enduring the frustration, anxiety and, ultimately and hopefully, joy of looking for a junior-level developer gig.</p>

<!--more-->


<p><strong>Don&#8217;t stress out about it!</strong></p>

<br>


<p>Its easy for me to say this from the perch of employment, but anxiety about finding a job can be counter productive. If you find joy in what you&#8217;re doing so much so that you continue to do it in your free time or practice it now that school is done, the job offers will inevitably come. Stress should be a motivating factor to seek out opportunities and explore the start-up landscape; it shouldn&#8217;t devolve into worry and anxiety about where your career will go or whether or not you&#8217;ll go hungry. The best careers seem to progress in a non-linear fashion - every other step seems to be sideways and sometimes even backwards. So don&#8217;t worry if it doesn&#8217;t seem like things are going your way early on, just pursue opportunities to learn new things, continue to write and blog and be as vocal about what you don&#8217;t know and want to learn as you are about what you already can accomplish.</p>

<p><strong>Know what you&#8217;re looking for</strong></p>

<br>


<p>Granted, that&#8217;s not especially useful advice. Knowing what your looking for seems to be an oxymoron - if I already know what I&#8217;m looking for, why would I need to be looking for it? What I mean here is not to have in mind already what the ideal job is, but rather know what you want to be characteristics of that ideal job. Are you passionate about something other than code? Go find a music startup or media company to work at. Are you looking to build rock-solid fundamentals in test-driven development and pair program daily? Go seek out a reputable dev shop. Coming out of a school like Flatiron you have a lot of opportunities, and as all sectors of the economy rapidly digitize and incorporate technology into their products and services, the demand is outpacing the supply of new engineers and developers. And even though positive churn (i.e., developers frequently changing companies for better opportunities) seems common in the technology space, your first job as a developer will invariably have an indelible impact on your future career in technology.</p>

<p><strong>There&#8217;s a whole lot more out there than Ruby&#8230;</strong></p>

<br>


<p>Its clear that Ruby is the lingua franca at Flatiron, as well as many of the other new development schools that are popping up. In the real world though, its just one of many languages that are used to solve engineering problems. At the New York Times, I encounter engineers who are skilled across a range of languages and frameworks, and many do not have Ruby experience. The NYT is a truly polyglot organization - everything from Python to C to Javascript to Go are used to solve the technical challenges of the NYT. Although its great to be an unabashed Rubyist, at the same time its important to understand the criticisms of Ruby and the benefits of a more statically typed language like C or Java. For me, I&#8217;ve learned how different languages really are built for different problems, even if a scripting language like Ruby has applications beyond the web development purposes that so many people use it for today.</p>

<p><strong>&#8230;Yet if you&#8217;re applying for a Rails job, know your Ruby</strong></p>

<br>


<p>One thing the TAs at Flatiron really emphasized that stuck with me was the importance of knowing core Ruby rather than just Rails. Understanding Ruby will help you better understand Rails, but the opposite isn&#8217;t always true. A mature framework like Rails can sometimes make it feel like you&#8217;re just configuring a system or adding magical keywords into your classes rather than actual programming. But at its core, Rails is just Ruby code - it can be extended, modified, pushed and pulled. The more you understand Ruby, the easier it will be to understand how gems or other bits of code can integrate into a piece of software.</p>

<p>Plus, knowing Ruby is good just for job interviews. Most of my technical interviews were focused on Ruby rather than Rails. And if they were focused on Rails, they were typically more high-level, software design questions that happened to use Rails as the development framework. In other words, I would either get questions like, &#8220;How would you sort this array and extract just every third word in Ruby?&#8221; or, &#8220;How would you build a software platform like Kickstarter?&#8221; Knowing Ruby is instrumental (and Rails pretty useless) to answering the former. Yet the latter can be reasoned through by understanding model associations and software design, rather than knowing how to apply specific macros in Rails. Obviously, understanding Rails will be critical for building software if you go to a Rails shop, but in the interview process, its better to walk in as a confident Rubyist rather than as someone who can just program in Rails.</p>

<p>What I did when I left Flatiron to prepare for job interviews mostly focused on Ruby. I worked on <a href="http://www.projecteuler.net">Project Euler</a> problems and tried building multi-class command line programs, which helped me structure my code and think from an object-oriented perspective. Tasks like trying to build a restaurant bill-splitting tool or a sports draft room via the command line can help you think about the fundamental business logic of an application and how to model your schema, rather than focusing on how the front-end looks. While building software requires an understanding of both back and front-end technologies, the core of any good engineer is being able to break down a problem into its constituent parts and to understand how those parts can be composed to build a coherent whole. These skills can be end-agnostic; the effective use of both back-end frameworks like Rails or front-end tools like Backbone.js requires an ability to structure data and process user input.</p>

<p><strong>Being a developer is pretty damn fun</strong></p>

<br>


<p>Sometimes I go to work thinking that its unfair to others that I get to do what I do. Learning to code and working as a developer has been an amazing and fun experience, and I&#8217;ve thus far thoroughly enjoyed working at the NYT. Yet at the same time, coding has a certain escapist quality to it. I can easily zone out for hours at a time, put on my music and just see where my creativity takes me. I&#8217;m a firm believer that the work we do should be service-oriented, despite being a profit-seeking enterprise. Developers have this great skill of solving modern problems, many of which can be addressed by using the powerful connective capabilities of the Internet and accessibility of distribution platforms like smartphones. Solving these problems (which are most often outside the strict domain of an engineer) requires not just technical abilities, but also an empathetic understanding of why those are problems in the first place.</p>

<p>I&#8217;ve always thought that the most fascinating problems developers are meant to solve with software are problems outside the traditional realm of software. This means that to effectively solve problems, knowing who you&#8217;re solving problems for is as important as being technically able to solve those problems. Avi talks a lot about empathy as a developer, and I think he&#8217;s really right about it. I work on a daily basis with editors who are the end users of the product I&#8217;m currently building. Empathy for the needs and interests of my clients (i.e., users) is critical to prioritizing my development tasks and knowing when to hone in on the annoying details and when to back out of a rabbit hole. While solving problems is objectively fun, it can be a fruitless exercise if those problems are not actually the problems faced by the people you&#8217;re tasked to serve in your work. Empathy, understanding, communication - these are all the soft skills that connect you back to the real world as a developer, rather than just zoning out, donning your headphones and coding away at a fantasy world problem.</p>

<p>Hope that was useful for anyone out there looking for a developer job. Best of luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Rake Tasks to Generate Raw SQL From ActiveRecord Migrations]]></title>
    <link href="http://eewang.github.com/blog/2013/07/29/how-to-use-rake-tasks-to-generate-migration-sql/"/>
    <updated>2013-07-29T19:26:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/07/29/how-to-use-rake-tasks-to-generate-migration-sql</id>
    <content type="html"><![CDATA[<p>Recently at the NYT on the product I&#8217;m working on, we came across the problem of having to convert ActiveRecord migrations into raw SQL in order to be processed on our production database. Our infrastructure/systems team needs SQL in order to generate migrations; since not all teams at the NYT use Rails, ActiveRecord&#8217;s migrations cannot be automatically applied to the production database.</p>

<!--more-->


<p>So the senior developer I work closely with wrote a rake task that parsed the SQL generated by ActiveRecord migration tasks into a .sql file, which our systems team could then use to generate the necessary database migrations. Although I had no role in actually writing the code, I thought that the rake task touched on a few interesting concepts in Ruby, so I felt compelled to post it and annotate it a little bit.</p>

<p>Here&#8217;s the code in its entirety. Its saved in a .rake file in the tasks folder in the lib directory.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span> <span class="ss">:migrate</span><span class="p">,</span> <span class="ss">:rollback</span> <span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>    <span class="n">namespace</span> <span class="n">n</span> <span class="k">do</span> <span class="o">|</span><span class="n">migration_task</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">original_task</span> <span class="o">=</span> <span class="n">migration_task</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@scope&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span> <span class="s2">&quot;:&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">[</span><span class="ss">:with_sql</span><span class="p">,</span> <span class="ss">:to_sql</span> <span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">desc</span> <span class="s2">&quot;Run migration, and generated SQL&quot;</span> <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="ss">:with_sql</span>
</span><span class='line'>        <span class="n">desc</span> <span class="s2">&quot;Generate migration SQL&quot;</span> <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="ss">:to_sql</span>
</span><span class='line'>        <span class="n">task</span> <span class="n">t</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span> <span class="o">|</span><span class="n">sql_task</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">case</span> <span class="n">original_task</span>
</span><span class='line'>          <span class="k">when</span> <span class="s2">&quot;db:migrate&quot;</span>
</span><span class='line'>            <span class="n">filename</span> <span class="o">=</span> <span class="s1">&#39;upgrade.sql&#39;</span>
</span><span class='line'>          <span class="k">when</span> <span class="s2">&quot;db:rollback&quot;</span>
</span><span class='line'>            <span class="n">filename</span> <span class="o">=</span> <span class="s1">&#39;rollback.sql&#39;</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="k">raise</span> <span class="s2">&quot;unkown migration type </span><span class="si">#{</span><span class="n">original_task</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>            <span class="c1"># alias the adapter&#39;s execute for later use</span>
</span><span class='line'>            <span class="k">alias</span> <span class="ss">:old_execute</span> <span class="ss">:execute</span>
</span><span class='line'>
</span><span class='line'>            <span class="no">SQL_FILENAME</span> <span class="o">=</span> <span class="n">filename</span>
</span><span class='line'>            <span class="no">RUN_SQL</span> <span class="o">=</span> <span class="n">sql_task</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">ends_with?</span><span class="p">(</span><span class="s2">&quot;with_sql&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1"># define our own execute</span>
</span><span class='line'>            <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="nb">name</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>              <span class="c1"># check for some DDL and DML statements</span>
</span><span class='line'>              <span class="k">if</span> <span class="sr">/^(create|alter|drop|insert|delete|update)/i</span><span class="o">.</span><span class="n">match</span> <span class="n">sql</span>
</span><span class='line'>                <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">SQL_FILENAME</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">sql</span><span class="si">}</span><span class="s2">;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>                <span class="n">old_execute</span> <span class="n">sql</span><span class="p">,</span> <span class="nb">name</span> <span class="k">if</span> <span class="no">RUN_SQL</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                <span class="c1"># pass everything else to the aliased execute</span>
</span><span class='line'>                <span class="n">old_execute</span> <span class="n">sql</span><span class="p">,</span> <span class="nb">name</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1"># create or delete content of migration.sql</span>
</span><span class='line'>          <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">SQL_FILENAME</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;-- Script created @ </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1"># invoke the normal migration procedure now</span>
</span><span class='line'>          <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="n">original_task</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Ran </span><span class="si">#{</span><span class="n">original_task</span><span class="si">}</span><span class="s2"> and wrote sql to </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>At a high level, this code does the following:
* Open up the db namespace and add a sub rake task atop the db:migrate and db:rollback commands
* Hijacks the execute method and writes the SQL otherwise executed by Rails to a file.
* Permit users to specify whether they want Rails to actually execute the SQL code or just to write it to a file for later use</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span> <span class="ss">:migrate</span><span class="p">,</span> <span class="ss">:rollback</span> <span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>    <span class="n">namespace</span> <span class="n">n</span> <span class="k">do</span> <span class="o">|</span><span class="n">migration_task</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">original_task</span> <span class="o">=</span> <span class="n">migration_task</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@scope&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span> <span class="s2">&quot;:&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code opens up the :db namespace and executes the same block of code for the :migrate and :rollback sub name spaces. The :with_sql and :to_sql commands get appended to both namespaces, for a total of 4 new rake commands. The last line here just reverse engineers the original command; the original_task local variable returns &#8216;db:migrate&#8217; or &#8216;db:rollback&#8217;.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="ss">:with_sql</span><span class="p">,</span> <span class="ss">:to_sql</span> <span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Run migration, and generated SQL&quot;</span> <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="ss">:with_sql</span>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Generate migration SQL&quot;</span> <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="ss">:to_sql</span>
</span><span class='line'><span class="n">task</span> <span class="n">t</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span> <span class="o">|</span><span class="n">sql_task</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="n">original_task</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;db:migrate&quot;</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="s1">&#39;upgrade.sql&#39;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;db:rollback&quot;</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="s1">&#39;rollback.sql&#39;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;unkown migration type </span><span class="si">#{</span><span class="n">original_task</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sets up the creation of a file based on the type of migration task that is being considered. &#8216;upgrade.sql&#8217; will execute a migration while &#8216;rollback.sql&#8217; will reverse one. The idea is that adding these .sql files will make it as easy as possible for a database architect to execute a migration on a staging or production server, rather than deciphering the Rails migration herself. I generally take for granted the fact that I work in Rails; now that I&#8217;m no longer at Flatiron, I need to remember that not all databases uses the Rails ORM to connect to an application, but SQL remains a common language that most databases understand. Although ActiveRecord seems to abstract away so much of the underlying database connections, at the end of the day all its doing is executing SQL, which you can write directly into your Ruby code. In fact, a common complaint I&#8217;ve heard about Rails is that for more complex queries, you can&#8217;t rely just on ActiveRecord to generate efficient queries and instead have to fall back on executing raw SQL.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># alias the adapter&#39;s execute for later use</span>
</span><span class='line'>  <span class="k">alias</span> <span class="ss">:old_execute</span> <span class="ss">:execute</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">SQL_FILENAME</span> <span class="o">=</span> <span class="n">filename</span>
</span><span class='line'>  <span class="no">RUN_SQL</span> <span class="o">=</span> <span class="n">sql_task</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">ends_with?</span><span class="p">(</span><span class="s2">&quot;with_sql&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># define our own execute</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="nb">name</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># check for some DDL and DML statements</span>
</span><span class='line'>    <span class="k">if</span> <span class="sr">/^(create|alter|drop|insert|delete|update)/i</span><span class="o">.</span><span class="n">match</span> <span class="n">sql</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">SQL_FILENAME</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">sql</span><span class="si">}</span><span class="s2">;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">old_execute</span> <span class="n">sql</span><span class="p">,</span> <span class="nb">name</span> <span class="k">if</span> <span class="no">RUN_SQL</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1"># pass everything else to the aliased execute</span>
</span><span class='line'>      <span class="n">old_execute</span> <span class="n">sql</span><span class="p">,</span> <span class="nb">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the core of the rake task, and it includes some nifty metaprogramming components, including class_eval and the alias method. The code overrides ActiveRecord&#8217;s default #execute method. When the interpreter hits the class_eval method, it executes the following code as if that code was included in the class. In this case, execute is an instance method, since class_eval is a method in the Module class and so the code in the enclosed methods is executed in the context of that class (e.g., as an instance method). Confused? Don&#8217;t worry, I&#8217;m still trying to fully grasp how some of these metaprogramming methods work.</p>

<p>Anyways, the use of class_eval enables the rake task to extend the functionality of the standard #execute method and have it write out to a text file. The default method takes in raw sql as an argument and executes it on the connection&#8217;s class. By writing our own method, this allows us to insert logic before the execution occurs. The alias stores the Rails execute method as :old_execute, which is called only if the rake task includes the :with_sql suffix. If the sql that Rails would otherwise execute includes a migration task (e.g., CREATE, ALTER, DROP, INSERT, DELETE or UPDATE), then this sql is written to a file saved to the root Rails directory.</p>

<p>If you&#8217;re interested in the concepts covered in this code, here are a few links that are helpful:</p>

<p><a href="http://www.jimmycuadra.com/posts/metaprogramming-ruby-class-eval-and-instance-eval" target="_blank">Class Eval vs. Instance Eval</a></p>

<p><a href="http://paul-wong-jr.blogspot.com/2012/04/ruby-metaprogramming-with-classeval.html" target="_blank">More about class_eval</a></p>

<p><a href="http://andreacfm.com/2012/11/29/ruby-alias-vs-alias-method/" target="_blank">Ruby&#8217;s alias and alias_method</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using ActiveModel Serializers to Build Great JSON Interfaces]]></title>
    <link href="http://eewang.github.com/blog/2013/07/23/using-activemodel-serializers-to-build-great-json-interfaces/"/>
    <updated>2013-07-23T14:07:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/07/23/using-activemodel-serializers-to-build-great-json-interfaces</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been at the New York Times on the New Digital Products team for a little over two weeks now. Thus far, its been an awesome experience. I&#8217;ve had the opportunity to jump right in and commit code, primarily helping build the Rails backend interface for a mobile application. I&#8217;ve been spending time trying to get up to speed on the various internal software tools that the NYT provides, and I&#8217;ve come to appreciate that from a technical perspective, the NYT is an API-driven organization.</p>

<!--more-->


<p>Most of the APIs I dealt with at Flatiron were for public consumption (e.g., Viewfinder leveraged the Instagram API pretty heavily), so its been interesting to see how the NYT develops internal APIs to decrease inter-team dependencies while reducing the potential for overlapping responsibilities. With so many teams (e.g., internal CMS, user-generated content, video, etc.) working together to build a single journalistic product, I&#8217;ve learned that necessary to have public, internal JSON interfaces for different teams to work with. As such, I&#8217;ve had the chance to use a Rails module called ActiveModel::Serializers that helps developers build a sensible JSON interface in an object-oriented manner that&#8217;s pretty intuitive.</p>

<p>ActiveModel::Serializers is a component of the Rails API that enables an object-oriented approach to serializing ActiveRecord objects. The module can also be used to provide customized JSON objects depending on the requester. Serializers know about both a model and the environment in which it is being accessed, so if an admin user accesses the API you as the developer can provide one level of access to the underlying data, while providing a less detailed view to a non-admin user. To get this functionality, you can just add the &#8216;active_model_serializers&#8217; gem to your Gemfile.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile.rb</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;active_model_serializers&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Serializers serve as a thin layer of abstraction between models and your JSON, and can be a useful tool in quickly adjusting your application&#8217;s API without making large scale changes to the underlying schema. With AM:Serializers, its easy to change JSON presentation logic without affecting underlying model logic, and enables you to quickly add or modify attributes to an object&#8217;s JSON representation that are not explicitly part of the model/table.</p>

<p>For example, say you&#8217;re responsible for building the backend for a football statistics application. The NFL wants to create a mobile app for delivering useful analytics to users and in order to do so, needs to be able to get statistics for individual players and teams. However, the data requirements can vary from week-to-week and by use case - for example, international apps built off the stats API require &#8216;receiving yards&#8217; to be in meters whereas domestic apps display such stats as yards. By adding in serializer support, you can deliver a different data structure to each client application even if the underlying data is the same. Another example might be timestamps, which are saved in the database as a Unix timestamp but may need to be delivered to client apps in a human readable form, adjusted for each user&#8217;s time zone.</p>

<p>This is admittedly a contrived example, but it gets the point across. Serializers make it easy to further separate the presentation layer of your application from the underlying model layer, even though by &#8220;presentation&#8221; I&#8217;m referring to the JSON representation of model objects rather than actual HTML files. This way, other applications can access the underlying data by virtue of a public API while you continue to tinker around with the backend. So long as your API remains consistent (or changes are properly documented), other teams or applications that depend on your API can continue developing without worrying about every change you make to the underlying code.</p>

<p>To get started, just use a Rails generator to create a serializer:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate serializer team
</span></code></pre></td></tr></table></div></figure>


<p>Imagine I have a Team class (i.e., model) to represent a football team. A single team has many games (16 regular season, in the case of the NFL) and many players. In the serializer, I specify which attributes I want available in the JSON object, which typically will correspond to the methods in the body of the class or the attributes of the model. If I have a custom defined attribute (e.g., an attribute that is not the same as an attribute in my model), I need to write out a method with the same signature so that Rails knows how to interpret my serialized attribute.</p>

<p>I can also specify associations and customize how those associations appear in my JSON. Each team has many players, which is a separate model that has data about a player&#8217;s height, weight, jersey number, etc. In this example, I don&#8217;t need all of that information - all I need is the player&#8217;s name, jersey number and age. So I can override the typical association dispatch call (which would embed the JSON representation of each player associated with the team under the :players key) by writing a custom method.</p>

<p>Note that you get access to an &#8216;object&#8217; variable within a given serializer, which returns the related model object (e.g., a given team in this example) and would be the same as referencing &#8216;self&#8217; within the corresponding model file.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TeamSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:team_name</span><span class="p">,</span> <span class="ss">:date_updated</span><span class="p">,</span> <span class="ss">:multimedia</span><span class="p">,</span> <span class="ss">:team_url</span><span class="p">,</span> <span class="ss">:stadium_address</span><span class="p">,</span> <span class="ss">:finances</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:players</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:games</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:current_user</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:scope</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">team_name</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">city</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">date_updated</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">updated_at</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">team_url</span>
</span><span class='line'>      <span class="s2">&quot;http://www.nfl.com/</span><span class="si">#{</span><span class="n">obje</span><span class="o">.</span><span class="n">ctcity</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">stadium</span>
</span><span class='line'>      <span class="n">stadium</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="n">stadium</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">stadium</span><span class="o">.</span><span class="n">address</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">stadium</span><span class="o">.</span><span class="n">city</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">stadium</span><span class="o">.</span><span class="n">state</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">stadium</span><span class="o">.</span><span class="n">zip</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">multimedia</span>
</span><span class='line'>      <span class="n">object</span><span class="o">.</span><span class="n">team_logo</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">players</span>
</span><span class='line'>      <span class="n">object</span><span class="o">.</span><span class="n">players</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">player</span><span class="o">|</span> <span class="o">[</span><span class="n">player</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">number</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">age</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">finances</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">current_user</span><span class="o">.</span><span class="n">is_admin?</span>
</span><span class='line'>        <span class="p">{</span><span class="ss">:revenue</span> <span class="o">=&gt;</span> <span class="n">object</span><span class="o">.</span><span class="n">revenue</span><span class="p">,</span> <span class="ss">:profit</span> <span class="o">=&gt;</span> <span class="n">object</span><span class="o">.</span><span class="n">profit</span><span class="p">,</span> <span class="ss">:costs</span> <span class="o">=&gt;</span> <span class="n">object</span><span class="o">.</span><span class="n">costs</span><span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the controller, make sure that you add a respond_to block that specifies a json format.JSON responses to requests that hit the &#8216;#show&#8217; action will be translated by the TeamSerializer class and formatted accordingly.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># teams_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TeamsController</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Controller</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@team</span> <span class="o">=</span> <span class="no">Team</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="vi">@team</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice too that I use the &#8216;current_user&#8217; helper method (a method that I would typically define in my application controller to reference the currently logged in user) to restrict the access level to a team&#8217;s financial data only to team administrators. In order to have access to this method, I need to delegate the current_user method call to the scope object, which I can specify in my application controller like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># application_controller.rb</span>
</span><span class='line'><span class="n">serialization_scope</span> <span class="ss">:view_context</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails will automatically look for a TeamSerializer file when it publishes JSON, but if you want to specify a customized serializer, you can indicate it in your model file, like so, assuming you also change the serializer name to match:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># team.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Team</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">active_model_serializer</span>
</span><span class='line'>      <span class="no">FootballTeamSerializer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, specify the custom serializer within the controller action call by passing a :serializer => :custom_serializer key-value into the render call, like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="vi">@team</span><span class="p">,</span> <span class="ss">:serializer</span> <span class="o">=&gt;</span> <span class="no">FootballTeamSerializer</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve posted a few useful links below that go over how to start using serializers in your application (surprise surprise, there&#8217;s even a RailsCast on ActiveModel::Serializers).</p>

<p>As for testing these serializers, I&#8217;ve been testing my serializer classes using model specs with Rspec. I&#8217;ve used OpenStruct to create mock objects within the spec, just to make sure that the resulting JSON is correctly formatted. I&#8217;ve also been meaning to add integration tests so that the full request-response cycle is validated, not just the JSON API endpoint.</p>

<p>If you&#8217;re looking for more information, here are some helpful links that explain further the benefit of using ActiveModel::Serializers in building well-structured JSON for your API.</p>

<p><a href="http://robots.thoughtbot.com/post/50091183897/fast-json-apis-in-rails-with-key-based-caches-and" target="_blank">Thoughtbot on Fast JSON APIs</a></p>

<p><a href="http://www.ruby-doc.org/gems/docs/a/active_model_serializers-0.6.0/ActiveModel/Serializer.html" target="_blank">Documentation on ActiveModel::Serializers</a></p>

<p><a href="http://byroot.github.io/ams-slides/#/" target="_blank">Helpful Slides</a></p>

<p><a href="http://yehudakatz.com/2010/01/10/activemodel-make-any-ruby-object-feel-like-activerecord/" target="_blank">Yehuda Katz on Serialization</a></p>

<p><a href="http://railscasts.com/episodes/409-active-model-serializers" target="_blank">Active Model Serializers Railscast</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Five Lessons Learned On The Job]]></title>
    <link href="http://eewang.github.com/blog/2013/07/14/lessons-learned-on-the-job/"/>
    <updated>2013-07-14T04:52:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/07/14/lessons-learned-on-the-job</id>
    <content type="html"><![CDATA[<p>Last week I started my job at the New York Times. And while I&#8217;ve learned a lot over my first week, I feel it necessary to write a post on what I learned working at 8to18 for four weeks. As my first actual developer gig, working at 8to18 has helped me grasp what it means to be a professional developer, and while I undoubtedly still have a lot to learn, I felt better prepared going into my job at the NYT having worked at a start-up for a short period of time. Here are a few lessons that I&#8217;ve learned now that I&#8217;ve had a chance to explore an existing code base for a non-trivial web application that has an active userbase.</p>

<!--more-->


<p><strong>1) Make git commits informative</strong></p>

<p>Git commits should communicate your intent as a developer through both the code changed within a given commit and the associated commit message. I&#8217;ll try to include active verbs in my commit messages and separate sub-units of work by semi colons (e.g., something like &#8220;adds functional tests, refactors model code&#8221;). At 8to18, Jira was the primary tool for workflow management, so every code commit reflected a specific Jira issue. Adding the Jira issue number to my commit messages and specific language preceded by a hashmark allowed for tighter integration between Github and Jira. Initially, this was difficult for me as I had admittedly been sloppy with my commits at Flatiron, where I would fix whatever I saw that was wrong rather than noting it in Trello or Github issues and reverting back to fix it later in a different git branch. Working in a professional development environment has shown me the communicative value of tight, focused git commits with informative messages.</p>

<p><strong>2) Its (almost) all about forms</strong></p>

<p>A wise teacher (i.e., Avi) once said, &#8220;90% of web development is just building forms.&#8221; I found this to be especially true in the work I did for 8to18, which consisted primarily of bug fixes and feature developement for their registration application. Used by parents and school administrators to register students for extracurriculars and sports, the registration app has easily been the most complex set of forms that I&#8217;ve worked with. And I say &#8220;set of forms&#8221; rather than just &#8220;forms&#8221;, because the app has an added twist by enabling admins to create their own forms on the fly - adding and removing form steps depending on the particular sport or activity in question. Furthermore, the app had to address idiosyncratic use cases  specific to certain schools (e.g., schools in North Carolina require prospective athletes to note their felony conviction history before registering whereas other states do not have that requirement).</p>

<p>Building this app in a modular way required the use of not just the domain models that contain the core business logic but a set of support modules to perform specific tasks like validate, present or format data. Form workflow follows a certain pattern - users input information, information is checked and validated, then that information is used elsewhere in the application. This pattern isn&#8217;t inherently difficult to implement in Rails as the framework provides a lot of helpers and guidance to get forms up and running quickly. Yet knowing which components of the workflow can be abstracted into a module or class to enable user flexibility and minimize the added work needed when requirements change (as they most certainly will), therein lies the challenge of building usable, scalable forms and seems to come with just more experience.</p>

<p><strong>3) Testing is like eating your vegetables</strong></p>

<p>Learning to write test code before implementation code has not been easy. Admittedly, I&#8217;m not quite at full test-driven development; I&#8217;m closer to test-and-implement-at-the-same-time development. Writing tests can be frustrating - I&#8217;ve spent a good chunk of time banging my head against the wall trying to write meaningful tests. And while its not always fun to write tests, you have to do it, and you generally feel better after writing meaningful, passing tests.</p>

<p>Also, I&#8217;ve learned that not all tests are made equal. I&#8217;m more willing to write unit tests rather than functional or integration tests, as my frustration level rises when I&#8217;m faced with a number of preconditions just to get certain controller actions to be triggered (e.g., before filters, login requirements, etc.). Unit tests are generally easier for me to write - the universe of dependencies is smaller and the model layer is the business logic of the application. Coming in to work on an existing application, much of the model code had already been written, so I worked a lot in the controllers - utilizing existing model methods to produce new functionality. Over the course of the 4 weeks at 8to18, however, I&#8217;ve come to appreciate the value of good tests in building a resilient application. They&#8217;ve also come in handy as documentation - when I&#8217;m not sure what a model or controller is intended to do, I&#8217;d revert to the tests to provide clues.</p>

<p><strong>4) Metaprogramming isn&#8217;t always the answer</strong></p>

<p>In my zeal to try new programming techniques that I&#8217;ve learned, I&#8217;ve tended to see metaprogramming techniques as the end goal when writing code - good practice regardless of the context. However, I&#8217;ve learned that while metaprogramming can reduce the absolute number of lines of code in your application, it can come at the expense of readibility for other developers on your team. In some instances, this is unavoidable. Whenever I&#8217;ve explored the Rails source code, for example, the sheer amount of metaprogramming makes it difficult for me to grasp what&#8217;s going on. At the same time, that code gives Rails the out-of-the-box functionality that makes it so easy to get apps up and running. I can imagine that writing that customizable functionality into Rails without using metaprogramming would be practically impossible.</p>

<p>What matters the most is balancing the readibility of normal code with the power and flexibility of metaprogramming. Like anything in the world of programming, its all about the right tool for the job. For a framework like Rails, with a core group of contributors and a wide universe of use cases, metaprogramming is essential. However, for a smaller team with new developers and a more defined set of uses cases, metaprogramming could be more detrimental than helpful.</p>

<p><strong>5) Commercial concerns trump all</strong></p>

<p>While clean, beautiful code is an ideal worth aspiring to, at the end of the day, its still subordinate to the commercial needs of the product or business. For example, usage of the registration app that I&#8217;m working tends to be lumpy and clustered in certain months of the year (e.g., August, right before the start of the school year). Spending weeks to write perfect code for a feature could actually be detrimental if that means its release is pushed beyond the period of peak usage.</p>

<p>Knowing when to focus on great code versus just get something working and out the door is something I think Flatiron positioned me well to understand. Coming from a non-traditional coding background (i.e., didn&#8217;t take a computer science class in college), I feel like I have a good sense of commerciality when it comes to building products for actual customers. Working at 8to18 just reinforced my understanding of code as a tool to solve real world problems; when writing beautiful code rather than finding a solution to the problem at hand becomes the end goal, that&#8217;s when you need to recalibrate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing Web Applications with 8to18 Media]]></title>
    <link href="http://eewang.github.com/blog/2013/06/11/developing-web-applications-with-8to18-media/"/>
    <updated>2013-06-11T20:49:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/06/11/developing-web-applications-with-8to18-media</id>
    <content type="html"><![CDATA[<p>I&#8217;ll admit it - I&#8217;ve been slacking the past few weeks about blogging. Most of what I&#8217;ve been doing since mid-May since my job search concluded has been enjoying NYC, hanging out with friends and doing a some Javascript learning. Its tough to keep up the pace of Flatiron after the end of the program. While I&#8217;ve still be trying to code every day and spend quality time learning Javascript and Backbone, I&#8217;ve taken time to relax and enjoy myself since I&#8217;ll have many more years of working ahead of me and increasingly less time to just live and enjoy the city.</p>

<!--more-->


<p>However, also like Flatiron, all good things must come to an end, so since Monday, I&#8217;ve been working at a startup called 8to18 Media in Lombard, IL (~30 mins west of Chicago) as a contract developer. My brother works as the co-head of engineering at 8to18, which builds web applications for high school activities (e.g., sports, clubs, summer camps, etc.), and they agreed to bring me on for a month before I start at the NYT to work on their backlog of bug fixes and feature requests. For me, I&#8217;m excited for the opportunity to get back into the habit of daily coding and to learn more about how to be a professional developer. While the 6 or so free weeks post-Flatiron were great (well, at least the 3 or so since wrapping up the job search process), I&#8217;ll admit that I was getting a bit antsy and was itching to get back into coding and learning every day. I hope that this experience will give me momentum leading up to my NYT job this July.</p>

<p>For example, in just the first few days on the job, its been great to learn more about the project management aspects of being a developer. I&#8217;m working on 8to18&#8217;s registration application, which is a Rails app that parents and schools use to register children in activities. The app is under active development and usage, so its been great to see how customer feedback directly affects development. 8to18 uses a project management tool called Jira, which is similar at a high level to Trello (used by the Handrai.se team at Flatiron) but much more robust and full featured. Jira syncs with Github and commits are pulled into a dashboard newsfeed that shows what everyone on the team is working on. It also provides cool analytics on which tickets have been assigned, what their status is and what else is scheduled in the queue.</p>

<p>Compared to the group work at Flatiron, the git process here is more rigorous. I&#8217;ve learned how to keep my commits focused on a single issue; rather than cleaning up every unrelated error I see when going into the code to fix a bug, I&#8217;m trying to get into the habit of creating Jira tickets. This makes the bug fix commit as limited as possible, which minimizes the risk of introducing more bugs. Each commit message is prefixed with a Jira ticket number (e.g., REG-100 for the 100th ticket under the &#8220;Registration&#8221; project) and a hashtag that can then be read by the Jira system and allocated accordingly. For example, a #resolve hashtag appended to a commit message will automatically resolve the issue in Jira when the commit is pushed to Github. At Flatiron, our commits (at least mine) may not have had the most informative messages, which made them more difficult to tie to a specific issue, bug or feature. Also, we tended to make batch commits that included a lot of unrelated code changes in one commit. At 8to18, I&#8217;m trying to get into the habit of having smaller, more focused commits that are easier to audit and test.</p>

<p>Speaking of testing, another habit that I&#8217;m learning is being more vigorous about writing tests. 8to18 emphasizes test-driven development, so I&#8217;m learning a ton about how to think about the implementation code I&#8217;m writing through the lens of Rspec tests. Yesterday, I wrote about 5 lines of code in a Rails controller that I had to support with approximately 20 lines of test code to confirm expected behavior in edge case situations. While it took me more time to wrap up the bug fix, I came out more confident in my code because I had tests to support the functionality.</p>

<p>My contract work at 8to18 will end around July 4 for a total of four weeks, after which I&#8217;ll start my job at the NYT. I&#8217;m happy to have the opportunity to code in a professional work environment and learn more about developer best practices at 8to18 before starting my full time job later this summer.</p>

<p>&#8211;
<em>Correction: 8to18 uses the default Rails testing framework (TestCase) rather than Rspec</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I'm Learning Javascript]]></title>
    <link href="http://eewang.github.com/blog/2013/05/24/how-im-learning-javascript/"/>
    <updated>2013-05-24T07:45:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/05/24/how-im-learning-javascript</id>
    <content type="html"><![CDATA[<p>For my job at the NYT that I&#8217;ll be starting in July, I&#8217;ll likely be working a lot in Ruby and Javascript. At the Flatiron School, the focus was on becoming a back-end Ruby developer, and while we learned our fair share of JavaScript and jQuery, it was always in the context of a Ruby or Rails application. Most of the front-end focus gravitated toward DOM manipulation and traversal using jQuery and less on the functionality of Javascript as a programming language (e.g., objects, closures, inheritance / composition, etc.).</p>

<!--more-->


<p>Given that I expect that Javascript will be a substantial component of my role at the NYT, I&#8217;m planning to spend much of the next 5 weeks or so until I start refining and building my Javascript skillset. I&#8217;ve been cruising the Web accumulating JS learning resources, and I think I put together a solid syllabus.</p>

<p>I&#8217;m thinking of learning Javascript from three perspectives. First, Javascript is a full-fledged programming language and it should be learned as such. This means exploring data structures, iteration, objects, etc. in Javascript much the same way we did for Ruby. Second, Javascript is the language of the Web browser, which means learning DOM manipulation and front-end user interaction. Finally, Javascript has seen an explosion of front-end MVC frameworks in the past few years, the most well-known of which include <a href="http://backbonejs.org/" target="_blank">Backbone.js</a>, <a href="http://emberjs.com/" target="_blank">Ember.js</a> and <a href="http://angularjs.org/" target="_blank">Angular.js</a>. These frameworks help you structure and organize your Javascript, and generally improve the user&#8217;s experience as they can decrease the server communication overhead involved in any modern, database-driven application.</p>

<p>Here are a few of the ways I&#8217;m planning to practice writing and understanding Javascript over the next few weeks:</p>

<p><strong>Build Ruby Methods</strong></p>

<p>One of the benefits of coding in Ruby is that it provides a lot of the Enumerable methods like #collect and #inject that abstract away the need to write a basic iterator like a for loop. While these abstract methods provide a considerable amount of functionality in a terse, human-readable syntax, its easy to take them for granted. Thus, I&#8217;m planning to practice Javascript by writing the JS equivalent of the Ruby methods I use most frequently but do not have parallels in core JS (not considering jQuery or other libraries). Hopefully, this will force me to dive deep into both the Ruby and Javascript documentation and build up my Javascript muscle memory.</p>

<p><strong>Solve Project Euler</strong></p>

<p>Completing <a href="http://projecteuler.net" target="_blank">Project Euler</a> problems using Ruby has been a great way for me to strengthen not only my Ruby scripting skills but also my software design understanding, as I always try to properly encapsulate my Project Euler solutions and make the solution object-oriented. I plan to use the same approach to learning Javascript. First, I&#8217;ll translate the Project Euler problems that I&#8217;ve already solved from Ruby into Javascript, if only as a way to get in the habit of building JS objects using the constructor and prototype patterns. Then, I&#8217;ll work on new Project Euler problems and do the reverse translation - Javascript to Ruby. This way, I&#8217;ll become better at moving seamlessly between JS and Ruby, which will undoubtedly help me in my role at the intersection of the front-end and back-end.</p>

<p><strong>Read Books</strong></p>

<p>I&#8217;ve solicited advice from a number of developers on what are the best Javascript books to read, and here&#8217;s the list that I&#8217;m planning to go through to learn JS:</p>

<ul>
<li>&#8220;Professional Javascript for Web Developers&#8221; by Nicholas Zakas</li>
<li>&#8220;Developing Backbone.js Applications&#8221; by Addy Osmani</li>
<li>&#8220;Javascript Patterns&#8221; by Stoyan Stefanov</li>
<li>&#8220;Object Oriented Javascript&#8221; by Stoyan Stefanov</li>
</ul>


<p>These four books seem to be relatively accessible to developers first exploring Javascript, yet also are challenging enough to keep me engaged and constantly learning. I think these books focus more on software design and code patterns in Javascript, which I like, rather than just DOM manipulation. I learn best by understanding the core of a language so that I can use libraries like jQuery knowing full well how its implemented under the hood. Much like how the Flatiron School teaches Rails only after teaching Ruby, SQL, ORMs, etc., I&#8217;d like to be proficient in core Javascript as a prerequisite to becoming an expert in libraries/frameworks like jQuery or Backbone.</p>

<p><strong>Complete Online Tutorials (Codecademy, Code School)</strong></p>

<p>When I first started to learn how to code, I learned primarily through in Codecademy and Code School tutorials. Those were helpful in providing a general overview to Javascript, but with a lot of hand-holding. Also, neither Codecademy and Code School have perfect interpreters, so there are times when you write perfectly valid code, but you can&#8217;t pass the challenge because of some quirk or bug in the in-browser interpreter. This led to much frustration when I was first learning how to code, and the content I learned via Codecademy, while useful, felt somewhat disjointed as I was chained to working in the browser interpreter they provided.</p>

<p>Now that I know how to code though, going back through Codecademy and Codeschool has been a great way to solidify core concepts. I still feel like they hold your hand too much when completing code challenges, but I can get more out of the tutorials now that I have a stronger foundation in code. Codecademy has a pretty solid Javascript course, and Code School offers tutorials in Backbone and jQuery that I&#8217;ve found useful.</p>

<p><strong>Work on a Project</strong></p>

<p>This is a bit of no-brainer as a learning technique. Completing a project will help me most with learning front-end frameworks. I am familiar with Angular, having used that in project, but I&#8217;m planning to turn my focus to Backbone, given that the NYT uses Backbone pretty heavily for its front-end code (perhaps because Jeremy Ashkenas, the creator of Backbone, used to be a developer on the NYT&#8217;s Interactive News team). I&#8217;m still tossing around a few ideas of what I could build, but this Backbone tutorial for an <a href="http://coenraets.org/blog/2011/12/backbone-js-wine-cellar-tutorial-part-1-getting-started/" target="_blank">interactive wine cellar</a> seems like a good project that I could translate to another domain.</p>
]]></content>
  </entry>
  
</feed>
