<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[eugenius]]></title>
  <link href="http://eewang.github.com/atom.xml" rel="self"/>
  <link href="http://eewang.github.com/"/>
  <updated>2013-02-21T08:56:59-05:00</updated>
  <id>http://eewang.github.com/</id>
  <author>
    <name><![CDATA[Eugene Wang]]></name>
    <email><![CDATA[eugene.wang@flatironschool.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Visualize Data With Google Charts For Ruby]]></title>
    <link href="http://eewang.github.com/blog/2013/02/20/how-to-visualize-data-with-google-charts/"/>
    <updated>2013-02-20T17:42:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/20/how-to-visualize-data-with-google-charts</id>
    <content type="html"><![CDATA[<p>I love data. Specifically, I love data visualizations. Infographics, charts, whatever you call it, if it displays data visually, chances are I&#8217;ll want to take a look at it. Data graphics tightly integrate the creative and analytical elements that I find so appealing about programming to efficiently communicate information. If a picture is worth a thousand words, an infographic is worth a thousand pictures. Data graphics can take an array of different forms - charts, 3-D graphs, maps, etc., the possibilities are virtually endless. I wanted to explore data visualization tools in Ruby, starting with basic chart functionality.</p>

<!--more-->


<p>In learning how to code over the past few weeks, I&#8217;ve come to appreciate the flexibility of Ruby and the ability for pretty much anything to be structured as a dataset. Conceptually, I was looking for a tool that could take in a data as an array or hash and convert that data into a table or graph. In perusing <a href="http://www.ruby-toolbox.com/" target="_blank">Ruby Toolbox</a>, I came across the Googlecharts gem, which is basically a Ruby wrapper for the <a href="http://developers.google.com/chart/" target="_blank">Google Charts API</a>. In taking a look at the <a href="http://googlecharts.rubyforge.org/" target="_blank">documentation</a> and <a href="http://github.com/mattetti/googlecharts/" target="_blank">code base on GitHub</a>, the instructions seemed pretty straight forward, so I figured I&#8217;d give it a try.</p>

<p><strong>1) Installing Googlecharts</strong></p>

<p>Getting setup with the Googlecharts gem is pretty straightforward. Like other gems, you can install it straight from the command line by running:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install googlecharts
</span></code></pre></td></tr></table></div></figure>


<p>Once the installation command runs, you just need to be sure to require the gem at the top of your Ruby file by writing:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;gchart&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it! You&#8217;re ready to start using Googlecharts.</p>

<p><strong>2) Let&#8217;s Chart Some Data!</strong></p>

<p>The primary class that you interact with when using Googlecharts is the Gchart class. In looking at the source code on GitHub, this class has numerous attributes that can be used to define the data and formatting for bar charts, pie charts, line graphs and scatterplots (the gem also seems to support basic 3-D graphing). When you create a new Gchart, you can pass in a number of attributes as parameters to the new Gchart instance. My first time using this gem, my goal was just to create a simple bar chart with dummy data that would successfully save to my filesystem. So I added an array of a few integers as the data input for the chart:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">data_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar_chart</span> <span class="o">=</span> <span class="no">Gchart</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>            <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="s1">&#39;400x400&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:bar_colors</span> <span class="o">=&gt;</span> <span class="s2">&quot;000000&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s2">&quot;My Title&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:bg</span> <span class="o">=&gt;</span> <span class="s1">&#39;EFEFEF&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:legend</span> <span class="o">=&gt;</span> <span class="s1">&#39;first data set label&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="n">data_array</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:filename</span> <span class="o">=&gt;</span> <span class="s1">&#39;images/bar_chart.png&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar_chart</span><span class="o">.</span><span class="n">file</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the above code in my terminal (still with &#8220;require &#8216;gchart&#8217;&#8221; at the top) produced this:</p>

<p><img src="http://eewang.github.com/images/post_images/bar_chart_1.png"></img></p>

<p>It gets the job done, but its not too exciting for a few reasons. First, there aren&#8217;t any y-axis labels; I have no sense of scale or measurement. Second, there are no labels on my data bars. Third, only one set of data is displayed; what if I wanted to compare two related datasets next to each other? In order to address these issues, I passed a few more initial values to the Gchart instantiation:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">data_array_1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span><span class='line'><span class="n">data_array_2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar_chart</span> <span class="o">=</span> <span class="no">Gchart</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>            <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="s1">&#39;600x400&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:bar_colors</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;000000&#39;</span><span class="p">,</span> <span class="s1">&#39;0088FF&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s2">&quot;My Title&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:bg</span> <span class="o">=&gt;</span> <span class="s1">&#39;EFEFEF&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:legend</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;first data set label&#39;</span><span class="p">,</span> <span class="s1">&#39;second data set label&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">data_array_1</span><span class="p">,</span> <span class="n">data_array_2</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:filename</span> <span class="o">=&gt;</span> <span class="s1">&#39;images/bar_chart.png&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:stacked</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:legend_position</span> <span class="o">=&gt;</span> <span class="s1">&#39;bottom&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:axis_with_labels</span> <span class="o">=&gt;</span> <span class="o">[[</span><span class="s1">&#39;x&#39;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="o">]]</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:max_value</span> <span class="o">=&gt;</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:min_value</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:axis_labels</span> <span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;A|B|C|D|E&quot;</span><span class="o">]]</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">bar_chart</span><span class="o">.</span><span class="n">file</span>
</span></code></pre></td></tr></table></div></figure>


<p>Specifically, I added six new attributes compared to the first chart. These new attributes include:</p>

<ul>
  <li><strong>:stacked</strong> - indicates if the bars are to be stacked one on top the other (:stacked => &#8216;true&#8217;; this is the default setting for bar charts) or if they should be side-by-side (:stacked => &#8216;false&#8217;)</li>
  <li><strong>:legend_position</strong> - indicates where the legend will be placed relative to the chart. Options are: &#8216;bottom&#8217;, &#8216;bottom_vertical&#8217;, &#8216;top&#8217;, &#8216;top_vertical&#8217;, &#8216;right&#8217;, and &#8216;left&#8217;.</li>
  <li><strong>:axis_with_labels</strong> - indicates which axis you want to add labels to. I added the primary x-axis and y-axis (left and bottom), but I could have also added &#8216;r&#8217; and &#8216;t&#8217; for &#8216;right&#8217; and &#8216;top&#8217; for the secondary vertical and horizontal axes, respectively</li>
  <li><strong>:max_value</strong> - indicates the maximum value for the x-axis. In tinkering with this attribute, it seems like this max value needs to be set in order to scale the data bars to the y-axis; otherwise they seem to get detached (i.e., you can change the y-axis scale without affecting the relative size of the bars).</li>
  <li><strong>:min_value</strong> - similar to the above, this attribute indicates the starting point of the bar chart.</li>
  <li><strong>:axis_labels</strong> - indicates the labels for the x-axis, separated by pipes (&#8220;|&#8221;). Note the formatting here - the labels in aggregate are a single string but are each delineated by pipes. If you want to replace this value with variable (e.g., if the data you want to chart may have dynamic x-axis labels), you may need to do some intermediate object transformation in order to get the appropriate syntax for Googlecharts. </li>
</ul>


<p>I also added a second array of data at the top to see how my cluster, non-stacked bar chart looks. Note too that the HEX codes for the background (&#8220;bg&#8221;) and bar colors do not need the leading &#8220;#&#8221; symbol as they do in CSS. After updating the code with additional attributes, this is my bar chart:</p>

<p><img src="http://eewang.github.com/images/post_images/bar_chart_2.png"></img></p>

<p>One thing to note is that whenever you have multiple values for a single hash key, you need to wrap them in an array, otherwise the code won&#8217;t properly execute.</p>

<p>This is the same data, except applied to a line chart (I just replaced :type => &#8216;bar&#8217; with :type => &#8216;line&#8217;):</p>

<p><img src="http://eewang.github.com/images/post_images/line_chart_1.png"></img></p>

<p>And here it is again, except with just the first data set and applied to a pie chart:</p>

<p><img src="http://eewang.github.com/images/post_images/pie_chart_1.png"></img></p>

<p>As you can see, its pretty easy to switch between graph/chart types. What&#8217;s more important is to think through the purpose of the graphic and choose the appropriate type. For example, if the data you are presenting is along a continuum (e.g., stock prices, demographic distributions, etc.), line graphs may make the most sense. But if you&#8217;re showing discrete datasets, you may want to use a bar chart.</p>

<p><strong>3) Applying Object Orientation</strong></p>

<p>Playing around with Googlecharts was fun, but ultimately, I wanted to use the gem in the context of a broader application. A typical use case may be wanting to display dynamic content that a user can request and format. I figured that this would be a good chance to extend a scraper for StubHub that I&#8217;ve been building on the side. Basically, this scraper goes through StubHub&#8217;s NBA ticket listings and saves the information about each event (home/away team, date of game, venue, minimum price and number of tickets available, etc.) into a SQLite3 database. I wrote the scraper to be object-oriented, so I thought it would make sense to build in the functionality to auto-generate bar charts using Googlecharts.</p>

<p>For the sake of brevity, I won&#8217;t post all of the code for the scraper and classes here, but you can find the <a href="https://github.com/eewang/tickets/" target="_blank">repository</a> on my <a href="https://github.com/eewang/" target="_blank">GitHub page</a>. The code below spells out the Team class, which houses the functionality to call a &#8220;search_team&#8221; class method and pass it a team name. This method will then create a bar chart dynamically using attributes of the team name that the user specifies. The method calls instance methods that perform actions like querying the database for price (&#8220;price for sql&#8221;), ticket (&#8220;tix_for_sql&#8221;), opposing team (&#8220;away_teams_for_sql&#8221;) and event date (&#8220;date_for_sql&#8221;) data. Additionally, I added in the ability for the class to search a hash of team colors to match the requested team against its primary and secondary team colors to format the chart dynamically. The underlying data map for team colors is housed as a constant in the &#8220;Baller&#8221; module, which is not reflected below. I scaled the y-axis based on the highest price in the price data array for the remaining home games. This way, I could make sure that I wouldn&#8217;t get data that fell outside of my chart&#8217;s range. Unfortunately, I wasn&#8217;t able to disconnect the scale of the primary y-axis (left side) from the secondary y-axis (right side), so the &#8220;Number of Tickets&#8221; bars look a little squished.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Team</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Baller</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:url</span>
</span><span class='line'>
</span><span class='line'>  <span class="vc">@@color_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="vc">@@db</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;tickets_3.db&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">team_list</span>
</span><span class='line'>    <span class="ss">Baller</span><span class="p">:</span><span class="ss">:TEAMS</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">team_colors_list</span>
</span><span class='line'>    <span class="nb">Array</span><span class="p">(</span><span class="ss">Baller</span><span class="p">:</span><span class="ss">:COLORS</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="vc">@@color_hash</span><span class="o">[</span><span class="n">item</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;: &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="vc">@@color_hash</span><span class="o">[</span><span class="n">item</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;: &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">item</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;: &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;#&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="vc">@@color_hash</span><span class="o">[</span><span class="n">item</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;: &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">item</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;: &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">[-</span><span class="mi">2</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;#&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vc">@@color_hash</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vc">@@teams</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@name_for_sql</span> <span class="o">=</span> <span class="vi">@name</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="s2">&quot; Tickets&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="vi">@url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class='line'>    <span class="vi">@away_teams</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@away_team_labels</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vc">@@teams</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="nb">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">url</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">count_teams</span>
</span><span class='line'>    <span class="vc">@@teams</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name_teams</span>
</span><span class='line'>    <span class="vc">@@teams</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">date_for_sql</span>
</span><span class='line'>    <span class="vc">@@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT event_date FROM events WHERE team_home == &#39;</span><span class="si">#{</span><span class="vi">@name_for_sql</span><span class="si">}</span><span class="s2">&#39;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">date</span><span class="o">|</span> <span class="n">date</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">strip</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">price_for_sql</span>
</span><span class='line'>    <span class="vc">@@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT min_price FROM events WHERE team_home == &#39;</span><span class="si">#{</span><span class="vi">@name_for_sql</span><span class="si">}</span><span class="s2">&#39;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tix_for_sql</span>
</span><span class='line'>    <span class="vc">@@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT tix FROM events WHERE team_home == &#39;</span><span class="si">#{</span><span class="vi">@name_for_sql</span><span class="si">}</span><span class="s2">&#39;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">item</span><span class="o">.</span><span class="n">is_a?</span> <span class="nb">Integer</span>
</span><span class='line'>          <span class="n">item</span> <span class="o">/</span> <span class="mi">100</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">item</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span> <span class="o">/</span> <span class="mi">100</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">away_teams_for_sql</span>
</span><span class='line'>    <span class="vc">@@db</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&quot;SELECT team_away FROM events WHERE team_home == &#39;</span><span class="si">#{</span><span class="vi">@name_for_sql</span><span class="si">}</span><span class="s2">&#39;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">x_labels</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">team_list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">combo</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">combo</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">item</span>
</span><span class='line'>        <span class="vi">@away_teams</span> <span class="o">&lt;&lt;</span> <span class="n">combo</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">x_labels_abbr</span>
</span><span class='line'>    <span class="n">away_teams_for_sql</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">team</span><span class="o">|</span>
</span><span class='line'>      <span class="n">x_labels</span><span class="p">(</span><span class="n">team</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@away_teams</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">away_team_x_labels_abbr</span>
</span><span class='line'>    <span class="vi">@away_team_labels</span> <span class="o">=</span> <span class="n">x_labels_abbr</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">date_for_sql</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">array</span><span class="o">|</span> <span class="n">array</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;: &quot;</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;|&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">team_color_primary</span>
</span><span class='line'>    <span class="no">Team</span><span class="o">.</span><span class="n">team_colors_list</span><span class="o">[</span><span class="vi">@name_for_sql</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_sym</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">team_color_secondary</span>
</span><span class='line'>    <span class="no">Team</span><span class="o">.</span><span class="n">team_colors_list</span><span class="o">[</span><span class="vi">@name_for_sql</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">2</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_sym</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">chart_filename</span>
</span><span class='line'>    <span class="vi">@name</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;nba_charts/&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="s2">&quot;.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search_team</span><span class="p">(</span><span class="n">team_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">nba_team</span> <span class="o">=</span> <span class="no">Team</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">team_name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">capitalize</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">bar_chart</span> <span class="o">=</span> <span class="no">Gchart</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
</span><span class='line'>                <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:size</span> <span class="o">=&gt;</span> <span class="s1">&#39;1000x300&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:encoding</span> <span class="o">=&gt;</span> <span class="s1">&#39;extended&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:bar_colors</span> <span class="o">=&gt;</span> <span class="o">[[</span><span class="n">nba_team</span><span class="o">.</span><span class="n">team_color_primary</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="n">nba_team</span><span class="o">.</span><span class="n">team_color_secondary</span><span class="o">]]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@name_for_sql</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:bg</span> <span class="o">=&gt;</span> <span class="s1">&#39;FAFAFA&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:legend</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;Minimum Price (LHS)&#39;</span><span class="p">,</span> <span class="s1">&#39;Number of Tickets (RHS)&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:legend_position</span> <span class="o">=&gt;</span> <span class="s1">&#39;bottom&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">nba_team</span><span class="o">.</span><span class="n">price_for_sql</span><span class="p">,</span> <span class="n">nba_team</span><span class="o">.</span><span class="n">tix_for_sql</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:stacked</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:axis_with_labels</span> <span class="o">=&gt;</span> <span class="o">[[</span><span class="s1">&#39;x&#39;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;r&#39;</span><span class="o">]]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:axis_labels</span> <span class="o">=&gt;</span> <span class="o">[[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">nba_team</span><span class="o">.</span><span class="n">away_team_x_labels_abbr</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">]]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:bar_width_and_spacing</span> <span class="o">=&gt;</span> <span class="s1">&#39;25&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:axis_range</span> <span class="o">=&gt;</span> <span class="o">[[</span><span class="kp">nil</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">25</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">25</span><span class="o">]</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:max_value</span> <span class="o">=&gt;</span> <span class="n">nba_team</span><span class="o">.</span><span class="n">price_for_sql</span><span class="o">.</span><span class="n">max</span> <span class="o">+</span> <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:orientation</span> <span class="o">=&gt;</span> <span class="s1">&#39;v&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="ss">:filename</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">nba_team</span><span class="o">.</span><span class="n">chart_filename</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>    <span class="n">bar_chart</span><span class="o">.</span><span class="n">file</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Creating file... Done&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I call &#8220;Team.search_team(&lt;&#8221;input team name&#8221;>)&#8221;, the program creates a file labeled with the appropriate team name in a sub-directory called &#8220;nba_charts&#8221;. As you can see, Googlecharts can be used to create charts dynamically based on variable user input.</p>

<p><strong>4) Adding User Interaction</strong></p>

<p>In order to create charts quickly, I added a command line interface for the program. This code allows users to specify which team they want to see ticket data for and it will create bar charts using the gchart gem and save them to the local filesystem. I went ahead and created four bar charts for the Knicks, Lakers, Thunder and Nuggets. I wanted to create a chart for my beloved Chicago Bulls as well, but the red-and-white combination didn&#8217;t show up very well on an off-white background, so I kept that chart out of this example.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">until</span> <span class="n">response</span><span class="o">.</span><span class="n">downcase</span> <span class="o">==</span> <span class="s2">&quot;done&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;What team do you want to search for? (&#39;Done&#39; to exit) &quot;</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">downcase</span> <span class="o">!=</span> <span class="s2">&quot;done&quot;</span>
</span><span class='line'>    <span class="no">Team</span><span class="o">.</span><span class="n">search_team</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Thanks for using my program!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the code when execute it in the terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby tickets.rb
</span><span class='line'>What team do you want to search for? ('Done' to exit)
</span><span class='line'>New York Knicks
</span><span class='line'>Creating file... Done
</span><span class='line'>What team do you want to search for? ('Done' to exit)
</span><span class='line'>Los Angeles Lakers
</span><span class='line'>Creating file... Done
</span><span class='line'>What team do you want to search for? ('Done' to exit)
</span><span class='line'>Oklahoma City Thunder
</span><span class='line'>Creating file... Done
</span><span class='line'>What team do you want to search for? ('Done' to exit)
</span><span class='line'>Denver Nuggets
</span><span class='line'>Creating file... Done
</span><span class='line'>What team do you want to search for? ('Done' to exit)
</span><span class='line'>Done
</span><span class='line'>Thanks for using my program!</span></code></pre></td></tr></table></div></figure>


<p>And here are the bar charts that are created by the program:</p>

<h6>New York Knicks Tickets - Remaining Home Games</h6>


<p><img src="http://eewang.github.com/images/post_images/new_york_knicks_tickets.png"></img></p>

<h6>Los Angeles Lakers Tickets - Remaining Home Games</h6>


<p><img src="http://eewang.github.com/images/post_images/los_angeles_lakers_tickets.png"></img></p>

<h6>Oklahoma City Thunder Tickets - Remaining Home Games</h6>


<p><img src="http://eewang.github.com/images/post_images/oklahoma_city_thunder_tickets.png"></img></p>

<h6>Denver Nuggets - Remaining Home Games</h6>


<p><img src="http://eewang.github.com/images/post_images/denver_nuggets_tickets.png"></img></p>

<p>The left-hand y-axis refers to the price in dollars of the cheapest ticket, since StubHub&#8217;s primary event page indicates where ticket prices start from (i.e., the lowest price), and the right-hand y-axis refers to the number of tickets remaining in hundreds. I was having difficulty disconnecting the primary and secondary y-axes from each other, so the scale for the remaining tickets is not ideal (the primary y-axis determined the scale).</p>

<p><strong>5) Final Thoughts</strong></p>

<p>As you can see, the Googlecharts gem can be useful for quickly linking up a program with a data visualization tool. While it doesn&#8217;t appear to be the most powerful or most intuitive data graphing tool, its easy to install and the documentation is fairly straightforward, at least for basic functionality. I found it helpful to go through the code base for the Gchart class and try and follow the logic of each method whenever I got stuck. I found it to be a transparent gem in terms of figuring out what was going on &#8220;under the hood&#8221;.</p>

<p>That said, I found the syntax to be finicky, unnecessarily so, in my opinion. Also, it seemed like some of the more advanced functionality that I was looking for, that I was used to from using Excel many times, wasn&#8217;t readily available. Next on my list of graphing tools to try out is <a href="http://www.highcharts.com/" target="_blank">High Charts</a>, a Javascript tool for interactive data graphics that also has an accompanying Ruby gem, <a href="http://github.com/michelson/lazy_high_charts/" target="_blank">Lazy High Charts</a>. Then, I can learn how to create awesome stuff like <a href="http://prafulla.net/interesting-contents/world-interesting-contents/us-presidential-election-2012-ohio-as-critical-state-spending-tv-adsinfographics/" target="_blank">this</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Day 010]]></title>
    <link href="http://eewang.github.com/blog/2013/02/18/flatiron-day-010-week-2-wrap-up/"/>
    <updated>2013-02-18T18:07:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/18/flatiron-day-010-week-2-wrap-up</id>
    <content type="html"><![CDATA[<p>When I look back on the past two weeks, its hard to believe how far the class has come. And while it seems like each day has been more challenging than the last, its clear that we&#8217;re moving forward and covering a lot of ground. Avi mentioned that coding is hard because you&#8217;re always at the edge of your knowledge; it doesn&#8217;t get less difficult, you just move onto more advanced stuff. My classmate Victoria put it well in her <a href="http://vicfriedman.github.com" target="_blank">blog</a> when she mentions that each day brings new frustrations, but only because we&#8217;re pushing ourselves and not resting on what we already know.</p>

<!--more-->


<p>Friday was a half-day, although in the morning we still had lecture and some groupwork. We continued working on our student scrapers and trying to build the scraper into a student class so that the data pulled from the site would populate a database rather than exist in a hash or array. During the lecture, Avi emphasized the importance of breaking down a complex block of code into multiple methods, each of which just perform one action. Each method should have one and only one responsibility - if your perform multiple calculations or actions in a single method, you can likely refactor that method into two or more methods.</p>

<p>This is a coding best practice for a few reasons. First, the code is easier to debug as errors can be more effectively isolated. Second, the code is easier to read and follow along for other developers - rather than have to decipher the effects of multiple nested loops, its easier to trace the logic of a related set of short methods that are well organized and than one large method. Third, it makes your code more reusable. This came up when we were writing the class methods to save scraped student records to our database using SQL. Initially, I had written the code such that the various actions performed to initiate the database, create the tables and save the data to the tables were all in the same method. But as Avi showed us, you can actually break those out into separate methods that are each responsible for doing one action. This way, the methods are written more abstractly and can be used again to save different types of data in other situations to a SQL database.</p>

<p>I&#8217;ve realized that I need to train myself to be more methodical about refactoring and using methods as building blocks. I have a tendency to be overly verbose in my code and to encapsulate too much logic in a single method or block. I noticed this back in my previous job when I built models in Excel; the logic in my functions and macro code were hard to decipher and at times inefficiently written. Even though in the end, the models worked, I admit that they weren&#8217;t very elegant. As I go through the Flatiron program, I need to constantly remind myself that while its important to make the code I&#8217;m writing work, I need to make it right and make it fast (i.e., refactor and refactor again) to get to the next level.</p>

<p>In the afternoon, we went to New York Health &amp; Racquet Club for a fitness bootcamp. Although the class was tough, it was great to get in some exercise; I realized that my exercise schedule has tapered off since starting Flatiron. I&#8217;ve been so consumed by learning and coding that I haven&#8217;t been getting as much sleep or exercise as I&#8217;m used to. My goal will be to try and go to the gym or for a run at least once during the work week - twice if its a good week. I&#8217;ll hopefully have my entire career to code and work on interesting problems; its important that I don&#8217;t burn out in the first 12 weeks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This is not a blog post (Flatiron - Day 009)]]></title>
    <link href="http://eewang.github.com/blog/2013/02/14/this-is-not-a-blog-post-flatiron-day-009/"/>
    <updated>2013-02-14T11:58:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/14/this-is-not-a-blog-post-flatiron-day-009</id>
    <content type="html"><![CDATA[<p>This is an instance of a blog post. In object oriented programming languages, like Ruby, the existence of a class, in this case a &#8220;Blog Post,&#8221; is independent of an individual instance of such class (i.e., this blog post). Each blog post has similar attributes with different values, such as title, author and date. These are known as instance methods in Ruby. However, the &#8220;Blog Post&#8221; class may have class-level methods that are inaccesible by a single instance of a blog post.</p>

<!--more-->


<p>An example of this might be a count of blog posts. How many blog posts I&#8217;ve written is not a characteristic of a single blog post; rather, that data can only be found by accessing the &#8220;Blog Post&#8221; class and not a blog post instance. The &#8220;Blog Post&#8221; class has functionality that does not exist for an individual blog post, and vice versa. Confused? Good, now you know how we felt for much of the day.</p>

<p>We spent most of the day covering class constructors and recreating a few of the programs we&#8217;ve already written into object-oriented programs. The lecture and class discussion around object-oriented design was dense and hard to digest. Although I came across <a href="http://www.railstips.org/blog/archives/2009/05/11/class-and-instance-methods-in-ruby/" target="_blank">this useful article</a> covering how class and instance methods differ, I&#8217;m still processing my understanding of classes, and how they fit into the broader Ruby universe.</p>

<p>After lecture today, we focused on trying to take our scraper that we built yesterday, rewrite it using a class constructor and link it to a SQL database. This way, instead of our scraper returning a hash of student attributes as its data structure, we could have our scraper input data directly into a database, which is easier for querying and analyzing than a hash or array. Although its been a difficult task to combine a number of different tools and skills we&#8217;ve learned over the past week, I&#8217;m enjoying the challenge of trying to map out and code how data will flow from the page to the database.</p>

<p>For homework, we continued to work on Ruby Koans and our scrapers. This weekend, I&#8217;m hoping to be able to spend some time starting a few scraper projects that I have in mind. Its funny, since starting this program I&#8217;ve been looking forward to weekends so that I can just spend time coding and trying new things in Ruby. Sounds super nerdy, but its true. That said, I know that I need to seek balance in my life so that I don&#8217;t get burnt out on coding. Hopefully, I&#8217;ll have many fruitful years ahead to keep learning and exploring new horizons in technology. With the frenetic pace of the class and my tendency to dive deep into the weeds of what I&#8217;m working on, my body has been tired and I haven&#8217;t been exercising much recently. However, I&#8217;ve learned more in the past two weeks than I have in quite awhile. And its pretty exhilirating.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding, Fast and Slow (Flatiron - Day 008)]]></title>
    <link href="http://eewang.github.com/blog/2013/02/13/coding/"/>
    <updated>2013-02-13T23:56:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/13/coding</id>
    <content type="html"><![CDATA[<p>I am currently reading Daniel Kahneman&#8217;s pop psych book <a href="http://en.wikipedia.org/wiki/Thinking,_Fast_and_Slow" target="_blank">&#8220;Thinking, Fast and Slow&#8221;</a>. The basic premise of the book is that humans have two generalized thought processes - one that is reflexive and instinctual (System 1), and another that is more rational and deliberative (System 2). Book smarts are commonly equated to the latter and streets smarts to the former. I often think that coding has a similar thought pattern to it, which is unsurprising given that computers are designed to mimic human thought and communication, in a context-stripped yet efficient manner.</p>

<!--more-->


<p>When I&#8217;m coding, I often have a large problem that I want to solve. I want to pull all the data from a website, for example. Or I want to create a program that helps me better manage my finances. Conceptually, I can map out the actions and data that these programs will need. However, like most technological advances, coding starts from the bottom-up. Spaceships didn&#8217;t immediately follow horses as a means of transportation; first came bicycles, then trains, then cars, then planes, then spaceships. Technology tends to build on the most recent invention, and while large paradigm shifts can transform a communication platform virtually overnight (e.g., the Internet), most innovative products are built on the backs of countless previously innovative products.</p>

<p>In a similar vein, albeit on a much smaller scale, programming is the same way. While I may have a large problem that I want to solve in mind as I start to code, when I actually get down to writing, I have to take it piece by piece, line by line. Otherwise, communicating a large, abstract concept to a computer that doesn&#8217;t understand context and has to be explicitly told what to do is pretty difficult. I have to distill my program into its most irreducible component, make sure that runs smoothly, then add another layer, make sure that layer runs smoothly, etc. Rinse and repeat.</p>

<p>For example, if you want to create a Blackjack game, you don&#8217;t just create Blackjack. You have to start from the bottom, not just in terms of defining the game attributes, such as deck structure, card values, the number of players, etc., but you also in determining the gameplay. Start by assuming that you only have one player. Master the gameplay for that one player (e.g., what happens when the player stands? What happens if he/she hits?). Map out how a single player would play if he/she were in a bubble. Hold off any sense of betting because that will only make things more complicated at this point. Focus on getting the gameplay for a single player correct, then move on to add a dealer, add more players and introduce betting components.</p>

<p>If I were to create a Blackjack game, I would approach it iteratively - focusing on mastering one small, low-level yet self-sufficient component, then using that as a building block of a larger piece of the game. This means writing one line of code, running the code, debugging it as needed, writing another line of code, running it, debugging, etc. As I&#8217;m doing this, I&#8217;m using a more instinctive, System 1 approach to coding, in that I&#8217;m responding immediately to the output from my IRB shell (Interactive RuBy). I&#8217;m not focusing on the larger, bigger-picture problem, which remains pretty abstract early on. Instead, I&#8217;m iteratively tackling problems one at a time until I end up with a finished product. Okay, so the System 1 / System 2 analogy isn&#8217;t entirely apt as writing a line of code still requires a deliberative, rational thought process, but you get the point. Early on in a project and when actually writing lines of code, I try not to let the larger issue at hand get in the way of progress. If you just focus on the big problem, you&#8217;ll often get overwhelmed and lost in the problem instead of progressing toward a solution.</p>

<p>Avi spoke a lot about this concept of programming slowly and shortening the feedback loop in class today. As I mentioned in a previous post, one of the beauties of coding is that you get immediate gratification; I can write a few lines of code and instantly see the results. Beginners (myself included) often get lost in trying to solve a big problem without thinking through the concrete, small steps that a computer can understand. Personally, I tend to jump too quickly into coding and trying to solve the biggest problems first. I&#8217;ve realized over the past few days that I need to take my time, write more pseudo-code and start small.</p>

<p>In addition to discussing coding best practices, we worked more on our scrapers and tried to refactor some of our code into more efficient class constructors. In the afternoon, Avi taught us about object orientation, recursion and directory/file access in Ruby. Each day I&#8217;m learning new components of my technical skill set, all of which build on top of each other and make what I&#8217;ve learned before even more powerful. Coding is a cumulative skill set; what I learned in the first seven days I used today, and what I&#8217;ve learned today I&#8217;ll use tomorrow, the next day and for the rest of my coding career. This is comforting, as it lessens the pressure to get it 100% right the first time, and its reassuring to know that since practice makes perfect and since we&#8217;ll be getting a lot of practice, we stand a solid chance of getting pretty good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Semantics and Scrapers (Flatiron - Day 007)]]></title>
    <link href="http://eewang.github.com/blog/2013/02/12/scrapers/"/>
    <updated>2013-02-12T23:55:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/12/scrapers</id>
    <content type="html"><![CDATA[<p>We covered a lot of material today, from the value of semantic mark-up in HTML to how to build web scrapers in Ruby. The day started with a review of our homework from the previous night, which was to recreate a song cataloging program that we had written using hash iteration. Using hashes rather than arrays to organize our song list enabled us to utilize metadata about the artist, album and song title that are accessible via hash keys.</p>

<!--more-->


<p>Later on in the day we went to work on our student profiles, and Avi taught us about the value of semantic markup along the way and other front-end best practices. Applying proper markup to an HTML document enables search engines to more effectively place content and generally aligns with the spirit of the Internet in writing web pages that are aware of the structure of their own content. In creating our student profiles, it was tempting to take semantic shortcuts and place content in the incorrect enclosing tags (e.g., list data in a table, which has a preset formatting). Avi emphasized, however, that the separation of content and style is a fundamental underpinning of the Web and should be respected. Content that is properly structured via HTML can be styled in an infinite number of ways, so we shouldn&#8217;t let our interest in maintaining beautiful design affect how we semantically define our content. A great example of this is the <a href="http://www.csszengarden.com/" target="_blank">CSS Zen Garden</a> project. Take a look at a few of the projects - you&#8217;ll realize that wildly different website designs can be based on the exact same HTML content.</p>

<p>In the afternoon, we were tasked with building our very first web scraper, on the student profile page we had just created, in fact. Using Nokogiri, a Ruby gem, I was able to write a program that parsed the individual student profile pages from the central index page and return a hash of attributes, covering each student&#8217;s work history, education, favorite apps, etc. For those who don&#8217;t know, scrapers are pretty awesome. They allow you to collect and organize data in any way you want from web sites, so long as you know what you&#8217;re looking for. Using scrapers, I could quickly collect sports data, or find all fitness classes at my gym, or pull out information from Wikipedia. Scrapers essentially allow you to extract large amounts of data for your own use. This is pretty powerful, and I&#8217;m excited to try and build more complex scrapers, and even attach those to analytical engines to provide useful intelligence about a topic.</p>

<p>In the evening, I made it over to an event on civic technology and public hacking with a fellow student. The talk focused on the state of civic technology, and included short speeches by politicians, city officials and active members of the civic tech community. Although it was all very interesting and exciting to know that this community is filled with passionate people who care about solving problems, I was exhausted after a long day at Flatiron, so I high-tailed it out of there when I got a chance and went back home to keep working on my scraper and watch the State of the Union.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Day 006]]></title>
    <link href="http://eewang.github.com/blog/2013/02/12/flatiron-day-006/"/>
    <updated>2013-02-12T00:19:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/12/flatiron-day-006</id>
    <content type="html"><![CDATA[<p>Much of the morning today was spent going through the Ruby homework we had over the weekend. In addition to a number of short homework assignments, we had to work on online modules at <a href="http://www.rubymonk.com/" target="_blank">RubyMonk</a> and <a href="http://www.rubykoans.com/" target="_blank">RubyKoans</a>. We explored topics like hash iteration, symbols and data structures in Ruby. In addition, we built a simple jukebox program in Ruby that allows for user interaction to select a song from a playlist. It seems like simple stuff, but it was a great exercise to think about how to break down the larger problem into smaller pieces.</p>

<!--more-->


<p>In the afternoon, we chatted about how the first week had gone, and people provided some feedback on the pace of the class, the structure of homework, etc. The overall theme of the discussion was very positive - everyone seemed to be enjoying their time and really focusing on learning the skill set. Later in the afternoon, we worked on building templates for our student profile pages in HTML and CSS, and continuing to practice coding in Ruby.</p>

<p>Oh, and blogging. Blogging and presenting at meetups will be a large part of our education at Flatiron, which I find exciting because it requires us to not just learn the skill set, but to be able to communicate it effectively, which will be necessary in any future job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Am at the Flatiron School]]></title>
    <link href="http://eewang.github.com/blog/2013/02/11/why-i-am-at-the-flatiron-school/"/>
    <updated>2013-02-11T22:00:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/11/why-i-am-at-the-flatiron-school</id>
    <content type="html"><![CDATA[<p>Sometime around the middle of last year I realized that I wasn&#8217;t satisfied with my job. I was working at a large alternative asset manager, helping structure hedge fund investment products and doing legal due diligence on hedge funds. It was my first job after graduating college, and I took the position to dip my toes in the corporate waters and explore careers in finance or law - two paths that college seniors from top schools seem to gravitate towards, despite knowing, at least for me, very little about what it means to actually work in finance or law.</p>

<!--more-->


<p>While my experience in finance was great - I learned a lot about what it means to be in a professional services field, how to work well with others and how a global business leader operates - it never really felt like it was the place for me. I considered law out of college because I love reading and writing, but I soon realized that corporate law is not quite like the reading and writing that I enjoyed doing at my college newspaper. I had not contemplated a career in technology, in large part because in college I got swept up in the finance-or-consulting bifurcation of the professional services world. In the years since graduating college, I&#8217;ve seen how quickly the Internet has changed and how dynamic the space is. I&#8217;m convinced that we&#8217;re just beginning to see how technology will change industries and professions (see quote by <a href="http://eewang.github.com/blog/2013/02/05/flatiron-day-002/" target="_blank">Alan Kay</a>), and I figured that the Flatiron School was the best way to jumpstart my journey into the wide and ever-expanding world of technology.</p>

<blockquote><p>The Internet?! Is that thing still around?</p><footer><strong>&#8211;Homer Simpson</strong></footer></blockquote>


<p>Growing up, I never really did much with technology. The only formal learning I had done before Flatiron was a Programming 1 class my sophomore year of high school where we learned Q-BASIC. My parents were engineers and my brother was studying enginnering, so I decided to be the black sheep of the family and pursue economics and public policy in college. I worked as a journalist and editor at <a href="http://www.dukechronicle.com/" target="_blank">my college newspaper</a>, and the little exposure I got to coding or programming was via the econometrics and macroeconomic policy classes I took, where we worked with Stata and mapping software like ArcGIS. However, I had little inclination that I would want to learn how to code and explore programming; I had naively thought programming to be the province of engineers who couldn&#8217;t communicate well or for those stuck in the computer lab for hours on end. I enjoyed journalism and working at the newspaper because it enabled me to be creative when I designed layouts and graphics for the paper yet also intellectually rigorous when I was editing, reporting and writing. In no way did I imagine that I would come to appreciate the technology world as I do now for much the same reasons - the remarkable complementarity between creative inspiration and analytical rigor that is necessary to be successful in the tech sphere.</p>

<p>After college, I went into finance, thinking that I would aim to go to law school or business school after a few years on the job. The position I took was in a hybrid legal and product development group at a large alternative asset manager, which I felt would enable me to get the most exposure quickly to both the corporate law and finance aspects of the business. In that respect, my two-and-a-half years there were successful. I learned that I didn&#8217;t want to be a lawyer, and that while I&#8217;m still not fully decided on whether to attend business school, I came to realize that technology was a better path for me. I enjoyed working with data and thinking about how problems could be solved or processes improved using technology. Thinking back, its funny how I joined the firm expecting to explore a binary path of going either to law school or business school (or both via a joint JD-MBA program), and left the firm to go back to school, just a very different program than what I had anticipated.</p>

<p>I started learning how to code by teaching myself how to write basic macros in Excel using VBA (Visual Basic for Applications). At my firm, I periodically came across business problems and processes that I thought to be slow, outmoded and way too manual. So I started building models to address issues like client reporting and product pricing. These models enabled me to learn more advanced Excel techniques, and a natural extension of that skill set led me to start writing macros. I bought a book on VBA coding early last year and spent a weekend trying to automate a data parsing problem that I had encountered when building a client reporting model. Although the macro I ended up writing worked, I wrote it using a brute force method; in retrospect, it wasn&#8217;t elegantly written, it ran too slowly and it definitely could have used some code refactoring. But, it got the job done. As that model and macro helped speed up tangible business processes at work, I came to realize the impact I could have by exploring the application of technology to business, and I started to explore building a technology skill set.</p>

<blockquote><p>If I had asked people what they wanted, they would have said &#8216;Faster horses.&#8217;</p><footer><strong>&#8211;Henry Ford</strong></footer></blockquote>


<p>In the spring of last year, as I was continuing to build out Excel models at the firm, working on models that evaluated hedge fund liquidity parameters, analyzed pricing plans across financial products and created client reports, I started to learn how to code. My brother was spending more and more time building his start-up <a href="http://www.leaguevine.com/" target="_blank">Leaguevine</a>, and in talking with him about his plan to join <a href="http://www.theironyard.com/" target="_blank">The Iron Yard</a>, a start-up incubator in Greenville, SC, I realized that exploring technology was useful for more than just work, but could be a skill set I build throughout my life. And hearing my brother&#8217;s passion for start-ups and the pretty cool things you could do with technology, I began to see how technology is an amazing tool to pursue passion projects.</p>

<p>So I created a personal &#8220;lesson plan&#8221; to learn how to code. I caught up on the Code Year program at Codecademy, went to a few classes at <a href="https://generalassemb.ly/" target="_blank">General Assembly</a> and generally tried to learn what people were talking about when they dropped references like Ruby on Rails, LAMP or Postgres. I honestly kept a running list of all the words and phrases that I had heard about that I wanted to remind myself to look into - an exercise in futility, I soon found out, as the list kept growing larger and larger and each subject I tried to look into had 10 more subjects I didn&#8217;t know embedded in them. It was like going on a Wikipedia page to learn something and getting lost in an endless rabbit hole of links just to grasp what that first page is talking about.</p>

<p>Having my brother to chat with and bounce ideas off of was invaluable. If you&#8217;re starting to explore technology without a technical background like myself, I would definitely recommend finding someone that you can chat with easily about this stuff. It was pretty intimidating for me going off and exploring on my own - I can&#8217;t imagine what it would have been like if I didn&#8217;t have my brother to help me along the way. There were some real frustrating times when I was trying to get my environment set-up (I was using a PC running off Windows Vista, so my advice would be to not do that), and I would spend a few hours on the phone with my brother just to run into a ton of error messages. He would encourage me to just keep moving through the frustration, which I may have succumbed to if I didn&#8217;t have his help. I feel blessed in this way too - my immediate family all has a technology background (my parents both have graduate degrees in engineering), and my Mom actually went from anthropology into computer science when she was younger, so she knew what I was going through. I also have some great friends here in New York that are involved in start-ups or are developers and are always willing to chat about their experiences and provide helpful advice. I&#8217;m super thankful to them (you know who you are) for patiently answering my annoying questions and generally serving as sounding boards for me as I ventured onto a new career path.</p>

<blockquote><p>When you learn how to program, you do the opposite of knowing everything all the time. You&#8217;ll feel stupid for most of it because you&#8217;re always at the edge of your knowledge.</p><footer><strong>&#8211;Avi Flombaum</strong></footer></blockquote>


<p>The biggest challenge for me in starting to code was to not get overwhelmed. My first question, as is common for many newbies, was &#8220;What language should I learn?&#8221; I quickly realized that I didn&#8217;t really even know what I was asking. What is a computer language? How does it differ from a framework, or a library? How do web applications differ from other applications? What is the Internet? Seriously, when I started out, I just needed someone to explain to me, at a high-level, what happens when I type in &#8220;http://www.google.com&#8221; into my web browser (a whole lot, apparently). From there, I learned the difference between front-end and back-end web development, how frameworks provide scaffolding that makes it easier to quickly build applications and how languages have evolved over time and have become more &#8220;higher-level.&#8221;</p>

<p>After establishing a baseline of understanding with respect to web development and coding, I learned HTML, CSS and Javascript/jQuery through the Codecademy modules and a collection of other web resources. For my server-side language, I decided to first learn Python, which was what my brother and his co-founder used to start Leaguevine. In my interview with Avi for Flatiron, he mentioned that its more important to newbies to find a language that makes sense for them to explore than to obsess over what&#8217;s the &#8220;best&#8221; language to start with. Each language has pros and cons, and focusing solely on language choice overlooks the fact that coding is about more than just the language. In fact, the Flatiron website communicates this pretty well:</p>

<blockquote><p>The language you learn matters least. Programming is about abstractions and expressions: the mechanics of code are universal and exist in all modern languages, whether it&#8217;s Python, Ruby, or Javascript. We teach Ruby because we love it. Thinking that your choice of language matters — especially as a beginner — is like thinking that you can only write poetry in English. The beauty of poetry is in rhyme and meter, in metaphor and simile, in cadence and rhythm, not in the King&#8217;s English. We teach Ruby and the Ruby ecosystem (which includes Rails) but you&#8217;re really learning how to think, how to break problems down, how to express yourself, how to abstract ideas, and how to work together. We just do that through Ruby.</p><footer><strong>&#8211;The Flatiron School</strong></footer></blockquote>


<p>My favorite part of that is: &#8220;Thinking that your choice of language matters - especially as a beginner - is like thinking that you can only write poetry in English.&#8221;</p>

<p>For me, my brother knew Python, so that was good enough for me - this way, I could ask him for help if I got stuck, which was quite often. I started doing Python modules in Codecademy, working on <a href="http://learnpythonthehardway.org/" target="_blank">Learn Python The Hard Way</a> and exploring Django by going through <a href="http://www.djangobook.com/en/2.0/index.html" target="_blank">The Django Book</a>. I built a simple blog site and a few other basic extentions like a contact list and a new vocab word list. None of it was particularly good, but it allowed me to tinker, play around and generally build confidence in working with code.</p>

<p>I found it pretty cool to fire up my localhost server, make a few changes in code, then refresh my browser to see the effects. That immediate feedback and gratification was encouraging for me. When I first got my site up and running on my localhost and could browse through a few pages, I definitely fist-pumped the air a few times. Despite that, progress was slow, and it took me way too long to fix bugs and errors. I didn&#8217;t really understand why certain bugs were appearing, and I tended to copy-paste code that I found on Stack Overflow that I hoped would fix the problem rather than really delving deep to understand the root cause. For example, in my Django app, I was having difficulty getting my CSS stylesheets and Javascript to load. I would write out some basic stylings, but they would never appear in my browser. I struggled with this issue for a few days, and eventually was able to find a solution with the help of a developer that I met at a hackathon last fall. At the end of the day, the solution was simple, but the process to finding that solution was frustrating. I thought, &#8220;It would have been more efficient to be working alongside someone that I could talk with about this issue. I would have not only fixed the bug much faster, I would have also learned more about why the problem was emerging in the first place.&#8221; This was when it dwelled on me that a more community-based, immersive approach to learning technology would be most beneficial for me (not to mention way more fun).</p>

<p>A friend of a friend turned me on to The Flatiron School, and I began to explore going down the immersive technology education route that Flatiron offers. A part of me didn&#8217;t want to consider the program; &#8220;I can learn this stuff on my own, why do I have to pay for this education?&#8221; I thought, pridefully. However, the more I considered potential career paths, I realized that if I allowed my prideful self have its way - wanting to learn all of this on my own and thus maintain the notion of being a wholly indepedent, self-taught programmer - I would never fully learn the skill set. Instead of actually learning how to code, the desire to be fully self-sufficient in my education would have kept me from learning. I applied to the Flatiron School in early November last year, focusing on how I came to realize that I wanted to learn this skill set and how I had demonstrated a structured, analytical thought process in the past through my work at the newspaper and in my job. After an interview with Avi, I was fortunate enough to be accepted in December.</p>

<blockquote><p>You can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something — your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.</p><footer><strong>&#8211;Steve Jobs</strong></footer></blockquote>


<p>After hearing that I was accepted, I spent a lot of time talking with friends and family about my decision. To attend the program, I would have to leave a well-paying job and jump to a school that had just started earlier in the summer. I feel that I was on a good trajectory at my firm; I had been performing well and all indications were that my colleagues enjoyed working with me. Leaving a job that I had grown used to over the previous 2.5 years and leaving co-workers that I valued and respected were not easy decisions to make. Ultimately, however, I realized that if I were going to ever make a career change like the one I had at hand, now was the time to do it. I had worked long enough to save up some money to be self-sufficient, but not so long to feel that there would be large career transition costs. I don&#8217;t have a family to support, my parents and brother are all doing well on their own and I don&#8217;t live particularly lavishly. All signs pointed to taking the leap and pursuing a different path.</p>

<p>And while its only been 6 days into the Flatiron program. I&#8217;m feeling pretty good about my decision. The class has been moving at a brisk pace; I&#8217;ve found it challenging but manageable. The 11 weeks ahead will undoubtedly be filled with long nights, frustrating hours spent debugging code and countless error messages, but I wouldn&#8217;t have it any other way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Reasons Everyone Should Learn How to Code]]></title>
    <link href="http://eewang.github.com/blog/2013/02/11/5-reasons-everyone-should-learn-how-to-code/"/>
    <updated>2013-02-11T18:33:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/11/5-reasons-everyone-should-learn-how-to-code</id>
    <content type="html"><![CDATA[<p>You should learn how to code. Even if you don&#8217;t want to be a programmer, coding is the new literacy. Don&#8217;t worry if you don&#8217;t have a technical background and never touched code in your life. I came to Flatiron having only taken one programming course ever. I worried that I was too old to learn this stuff; it seemed like everyone was either a computer science major or had been coding since they were kids. However, I&#8217;ve learned that the technology has become much more accessible to beginners in the past few years.</p>

<!--more-->


<p>And at the end of the day, computers are just tools that were built by humans. And while the subject matter isn&#8217;t easy, its not as mystical or obscure as I had initially thought. At the risk of sounding cliche, its never too late to learn a new skill. Here are five reasons why everyone (including you!) should learn how to code.</p>

<p><strong>1) Be Productive and Have an Impact</strong></p>

<p>Coding is a cheap way to be a maker and creator and to connect with the world around you. Its exhilirating to write some code, start your browser and instantly see what you wrote intepreted on screen. I can&#8217;t think of many industries where you can immediately see the fruits of your labor. Coming from asset management, I found it difficult to connect my work back to the end beneficiary - retirees, teachers, etc. - as there seemed to be multiple layers of intermediation such that I couldn&#8217;t see the full impact I was having. With web development, its easier to get immediate gratification from your work.</p>

<p>Coding also enables you to have an outsized impact. Everyone&#8217;s heard how Facebook, Google, etc. grew out of a college dorm room or garage and are now changing the world in tangible ways. While those home run endeavors are few and far between, its empowering to think that I can create something in a short amount of time and instantly let anyone with Internet access see what I&#8217;ve done. Even in launching this blog, I love the fact that my writing could have an impact on people that I&#8217;ve never even met. Programming opens up a whole new method of communicating and expressing ideas that I had never imagined. For many years, I was just a consumer of the Internet - reading blogs, using applications and playing games. Learning how to code is the first step to becoming a productive member of a modern, Web-enabled society and contributing back to the complex system of tubes that has provided me countless hours of enjoyment and learning.</p>

<p><strong>2) Use Your Entire Brain</strong></p>

<p>Its rare to find an activity that engages both your left brain and right brain as actively as web development. Good, modern web applications are both well designed and analytically powerful programs. When I worked as a editor in charge of layout and design at my college newspaper, I had to think creatively about how to display content - what colors, fonts and page structure would attract readers yet not diminish the written content? In finance, I had to move to the other side of the intellectual spectrum and think much more analytically, use data and solve problems in a structured, deliberate manner. I have found web development to be the best of both worlds - a field that tightly integrates the creative with the analytical in such a way that brings people with varied and diverse skill sets to the same table.</p>

<p><strong>3) Build A Valuable Skill Set</strong></p>

<p>Technology is booming, and good developers are in high demand. I&#8217;ve heard from people in the industry that its not uncommon for start-ups to have high turnover - not because of job dissatisfaction, but rather because there are so many good opportunities out there that developers are able to move around to satisfy their desire to work on new, interesting problems. As technology continues to disrupt industries and economies - just look at how Amazon has transformed the consumer market - companies moving this tidal wave of transformation forward will be eagerly seeking out talented people who are able to understand technology and apply it to business problems. And while consumer-oriented industries like fashion or marketing have already been upended by technology, I&#8217;m convinced that the best is still to come for more defensive industries like energy, transportation and healthcare. Even when working in finance, I clearly saw how powerful technology can enhance a company&#8217;s product strategy and give them a leg up on their competition. This trend toward digitization and the application of technology in process and operations isn&#8217;t going away anytime soon - might as well get on the leading edge by learning how to code.</p>

<p><strong>4) Work With Passionate People</strong></p>

<p>One thing I learned about myself from working at my college newspaper was that I love working with passionate people. I draw energy from them, and it makes whatever work I&#8217;m doing more palatable. In the interactions I&#8217;ve had with entrepreneurs and people at start-ups, its clear to me that developers, designers and the start-up community in general are incredibly passionate about what they do. In fact, you pretty much have to be passionate to start a company, since its easier to get a job at a large company than to venture out on your own. When I talk to people who work in this field, I can just hear in their voice how excited they are to have an impact and execute on an idea.</p>

<p>A great example of the passion technologists have for their craft are hackathons. In New York City, you can probably find a hackathon on any given weekend - I have a friend who goes to a few hackathons a month. The simple fact that these exist is a testament to passion; developers are willing to spend an entire Saturday coding and hacking away at a single problem. They are there because they are excited about solving problems and want to think creatively about how to improve the world around them. I&#8217;ve been to two hackathons, one about energy and the environment and the other about music. However, in the past month alone, I&#8217;ve heard about hackathons covering fashion, education and sanitation. There&#8217;s a hackathon in a few months for government and civic institutions. The people going to these hackathons are not going for the money (although some do offer cash prizes); they&#8217;re attending because they&#8217;re passionate.</p>

<p><strong>5) Enjoy a Lifetime of Learning</strong></p>

<p>When you first begin to explore technology, you&#8217;ll quickly learn (as I did) how much there is out there to learn. Each concept I learned about opened the door to 10 more concepts. Technology is a very, very long rabbit hole, but once you get started, you&#8217;ll never run out of concepts to explore, in large part because its such a dynamic and fast-growing field. Each year, developers produce new frameworks and new languages; in fact, Ruby itself is only two decades old, and didn&#8217;t really catch fire until the mid-2000s. The scope of technology is increasing faster than I can learn new skills.</p>

<p>In addition to learning Ruby and web development, I&#8217;m interested in exploring design, writing iOS applications and creating data visualizations. Obviously, I won&#8217;t be able to tackle all of those goals in the 12-week Flatiron program. But learning how to code is the bedrock foundation for really understanding technology, so I&#8217;m excited to take what I&#8217;m learning here and extending that over and over again in the future as I continue my education.</p>

<hr />

<p>I hope those 5 reasons provide enough motivation to start the lifelong journey of learning how to use technology as a tool through code. If you&#8217;re a developer or learning how to program, what made you first want to code? What were some of the difficulties in getting started? If you don&#8217;t have any interest in coding, why not? I don&#8217;t think everyone is meant to be a programmer, but there are certainly misconceptions and assumptions about coding that cause people to establish mental obstacles to actually trying to learn, and I&#8217;d like to hear what people think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Week 1 Redux]]></title>
    <link href="http://eewang.github.com/blog/2013/02/10/flatiron-week-1-redux/"/>
    <updated>2013-02-10T14:00:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/10/flatiron-week-1-redux</id>
    <content type="html"><![CDATA[<p>Flatiron is now 1/12 the way done. The first week has been pretty great; after lecture on Friday I felt physically exhausted, but mentally I was running a mile a minute, thinking of all the stuff that&#8217;s out there to learn. My schedule has generally been to get into school around 9 am, morning lecture, lunch, afternoon lecture, group work, then wrap up around 6 pm, after which I&#8217;ll stay until 7:30/8:00. I realize that it&#8217;s only been one week, but I&#8217;ve already learned a ton.</p>

<!--more-->


<p>Here are a few of my high-level thoughts on how the first week went:</p>

<p><strong>1) The interwebs are awesome</strong></p>

<p>The Internet is essentially the largest, most secure and most accessible library humans have ever known is available largely for free. If you take a step back and think about it, you&#8217;ll realize how remarkable that is. The fact that I can search, communicate, schedule and manage my life using Google&#8217;s services and products without paying them is amazing. I&#8217;ll pay more today for a cup of coffee than I have ever paid Google, despite the fact that I depend on Google to manage my e-mail, calendar and data. And while I&#8217;m fully cognizant of the fact that &#8220;if you&#8217;re not paying for it, you&#8217;re the product,&#8221; I&#8217;d rather have it that way than for the Internet to be only accessible to people with money. If I can rely on advertisers and data providers to subsidize my learning and exploration, I&#8217;m more or less okay with that.</p>

<p><strong>2) &#8220;Coding is not rocket surgery&#8221;</strong></p>

<p>Computers tend to be perceived as magical black boxes. You click on an browser icon, type in a URL and bam, you have the world&#8217;s information at your fingertips. But in actuality, computers aren&#8217;t that smart - they&#8217;re just really good at following instructions and doing the same thing over and over again. On the other hand, humans are great at inferring context, understanding nuance and efficiently processing a statement like &#8220;Do you mind making me a sandwich?&#8221; - which is actually a subtle command in the form of a question. Computers, on the other hand, need to be told exactly what to do. However, computers, unlike humans, don&#8217;t get tired. Thus, computer science is more like the study of operations, and the purpose of coding is to automate processes and operational procedures so that humans can be freed to do what they do best - be creative and make complex decisions.</p>

<p>This means that to be able to tell a computer what to do (i.e., be a programmer), you need to just be very good at communicating a specific set of instructions. And once you take a look under the hood of a computer (my recommendation would be to start using your <a href="http://en.wikipedia.org/wiki/Terminal_(OS_X)" target="_blank">terminal</a> to access files and applications), you&#8217;ll realize as I&#8217;ve realized that programs are created by people and can be understood so long as you put in the time and effort to read through the program instructions and follow the logic tree. Avi captured this well by claiming that &#8220;coding is not rocket surgery&#8221; - not to diminish the challenge of learning how to code, but rather to demystify the process and encourage beginners to overcome the mental barrier of understanding computers not as objects of frustration but as tools to be used.</p>

<p><strong>3) There is so much out there to learn</strong></p>

<p>A good chunk of the first week was spent working on our student profiles, setting up our blogs and generally getting acquainted with the school and day-to-day schedule. In terms of subject matter, we covered the following topics this week:</p>

<ul>
  <li>Git/GitHub</li>
  <li>SQL</li>
  <li>Ruby</li>
  <li>Environment set-up</li>
  <li>Basic HTML/CSS</li>
</ul>


<p>Each of these topics can get pretty in depth in their own right. We&#8217;ve just scratched the surface on Ruby, for example. But as I&#8217;ve found in learning most anything, the more you explore, the more you find to explore. Like going down a rabbit hole, we&#8217;re just getting started.</p>

<p><strong>4) Some pretty cool people are learning to code</strong></p>

<p>I&#8217;ve met a bunch of awesome people in class (including our <a href="http://shitavisays.tumblr.com" target="_blank">great instructor</a>). The backgrounds of the students are pretty diverse. In addition to the people working in finance or professional services before starting Flatiron (myself included, this is New York, after all), there are people who worked as designers, entrepreneurs, teachers - we even a professional poker player in class. This diversity of professional background makes for interesting conversations, and its been great to talk to my classmates about what interests them and for how they hope to use technology to better pursue their passions. I used to think that my career options were binary - either pursue technology or explore my passion for media, education and public policy. Instead, I&#8217;ve realized that technology doesn&#8217;t supplant my passions; technology complements and enhances my passions.</p>

<p><strong>5) This stuff is fun</strong></p>

<p>At the end of the day, programming should be fun and enjoyable. Coding is much more about creative expression than I had imagined before; after all, Matz created Ruby to make developers <a href="http://www.artima.com/intv/rubyP.html" target="_blank">happy</a>. My first exposure to computers and technology was through my parents, who worked as engineers for a large telecom company for many years. Watching them, I never considered technology to be a creative endeavor - it seemed like much more of a 9 to 5 job than I&#8217;ve come to realize. Since moving to New York though, its become clear to me that people in the tech sphere tend to be intellectually and creatively engaged with their craft, even to the point of &#8220;working&#8221; well beyond the daytime hours and into the weekends. <a href="http://en.wikipedia.org/wiki/Hackathon" target="_blank">Hackathons</a> are great examples of this. The whole concept of a hackathon - an intensive, focused effort to solve a problem that brings together developers, designers and subject matter experts - is to engage in creative problem solving, not to follow a rote set of instructions. Not only are hackathons indicative of passion people in technology have for their craft, its also an expression of community - a desire to work together with people of different skill sets toward a single goal.</p>

<p>Flatiron has tried to imbue in us a sense of community, that programmers work better together than apart. Coding used to be an endeavor that people would do in their basements, alone, late at night. But it doesn&#8217;t have to be this way. In fact, its much more enjoyable to code and program in a community of people so you can bounce ideas off of them, explore new technologies and learn from each other. For me, this was one of the most appealing aspects of doing an intensive, full-time program like Flatiron as opposed to learning in isolation. For the latter half of 2012, I was trying to learn this stuff on my own - using online tools like <a href="http://www.codecademy.com" target="_blank">Codecademy</a>, <a href="http://www.udacity.com" target="_blank">Udacity</a> and <a href="http://www.codeschool.com" target="_blank">Code School</a>. All of those tools were great, but its challenging, frustrating and, frankly, kind of boring, to learn coding entirely on your own, especially if you have a full-time (and then some) job as I did. Thankfully, I had my brother to mentor me and help me along when I hit a roadbump, as he was busy building <a href="http://www.leaguevine.com/" target="_blank">Leaguevine</a> at the time. I&#8217;ve found that learning in a focused group environment like at Flatiron School to not only be more fun, but also more efficient; before it might take me a whole afternoon and a whole lot of Stack Overflow-ing to debug a few lines of code, now I can easily ask others for help, which allows me to fix problems more quickly and learn more about what I&#8217;m doing in the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Day 005]]></title>
    <link href="http://eewang.github.com/blog/2013/02/08/flatiron-day-005/"/>
    <updated>2013-02-08T23:44:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/08/flatiron-day-005</id>
    <content type="html"><![CDATA[<p>In grade school, snow days meant building snowmen, tossing snow balls and going sledding. At the Flatiron School, snow days mean 6 hours of lecture via video conference. Avi and Co &#8220;cancelled&#8221; class today in advance of Snowmageddon 2013, but only in the sense that we weren&#8217;t expected to physically be in class. Instead, Avi set up a videoconference and hosted virtual class where we continued exploring Ruby.</p>

<!--more-->


<p>We covered a range of topics today. Starting with a review of our homework, Avi discussed iteration, arrays, string methods, regular expressions, symbols, variable scope, blocks and hashes. Whew! We went through a lot of material today, but I think I&#8217;m grasping everything decently well. Its been pretty interesting to think about how there always seems to be more than one way of doing something in Ruby.</p>

<p>A good example of that was the homework we had last night. We had to write a simple <a href="http://en.wikipedia.org/wiki/Fizz_buzz" target="_blank">FizzBuzz</a> program and extend that to find all numbers that fizz, buzz or fizzbuzz within a range. I&#8217;ve posted my code below. What&#8217;s amazed me about coding, though, is that there are <a href="http://rosettacode.org/wiki/FizzBuzz" target="_blank">countless</a> ways of doing the same thing, both within and across languages. For example, the &#8220;trick&#8221; to FizzBuzz is to recognize that Fizz and Buzz combine to make FizzBuzz. This means that my code below, while it gets the job done, is not the most efficient and probaly not up to best practices. I have three strings for the three results, but in fact I should only have two strings - Fizz and Buzz, which combine to make FizzBuzz.</p>

<p>Avi showed us a bunch of different ways to code the FizzBuzz problem, and if there&#8217;s a ton of different ways to solve the simple FizzBuzz problem, I can only begin to imagine how many infinite paths there are to building more complex applications. That thought is exciting to me; there are many paths out there that haven&#8217;t yet been explored and technology continues to be a space of great potential for human creativity and ingenuity. When I think back to a year ago, a part of me was resigned to thinking that we&#8217;ve reached the end of the road for technology - we have Google, Facebook and Twitter, what else could be out there? However, now that I&#8217;ve taken a peek under the hood of the web and seen a glimpse of what is possible, I&#8217;m convinced that the best is yet to come. Not just in web development, but in technology more broadly. 3-D printing, Internet-enabled hardware, sensors - the possibilities are limitless for the technology platforms that are only now in their infancy. Its both humbling and exciting to think about.</p>

<hr />

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Define variable scope and initialize arrays</span>
</span><span class='line'>
</span><span class='line'><span class="vg">$fizzer</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="vg">$buzzer</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="vg">$fizzbuzzer</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="vg">$remainder</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Method to calculate fizzbuzz for any given number</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fizzbuzz</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;FizzBuzz&quot;</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Fizz&quot;</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Buzz&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Not divided by 3 or 5&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Method to ask a user to input a number they want to fizzbuzz</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fizzbuzz_ask</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;What number do you want to fizzbuzz? &quot;</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="n">fizzbuzz</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Method to fizzbuzz a range of numbers</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fizzbuzz_loop</span><span class="p">(</span><span class="n">num1</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">num2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">num1</span><span class="o">.</span><span class="n">.num2</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="vg">$fizzbuzzer</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="vg">$fizzer</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="vg">$buzzer</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vg">$remainder</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Method to ask a user to define the start and end points for fizzbuzz</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">fizzbuzz_loop_ask</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;Where do you want to start fizzbuzzing? &quot;</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;Where do you want to end fizzbuzzing? &quot;</span>
</span><span class='line'>  <span class="n">finish</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">finish</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Sorry, please input an ending value. Where do you want to end fizzbuzzing?&quot;</span>
</span><span class='line'>    <span class="n">finish</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">fizzbuzz_loop</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">finish</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Fizzbuzz method calls</span>
</span><span class='line'>
</span><span class='line'><span class="n">fizzbuzz_ask</span>
</span><span class='line'><span class="n">fizzbuzz_loop_ask</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Print results of fizzbuzz calls</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;fizzer: </span><span class="si">#{</span><span class="vg">$fizzer</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;buzzer: </span><span class="si">#{</span><span class="vg">$buzzer</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;fizzbuzzer: </span><span class="si">#{</span><span class="vg">$fizzbuzzer</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;no fizz or buzz: </span><span class="si">#{</span><span class="vg">$remainder</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Day 004]]></title>
    <link href="http://eewang.github.com/blog/2013/02/07/flatiron-day-004/"/>
    <updated>2013-02-07T10:56:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/07/flatiron-day-004</id>
    <content type="html"><![CDATA[<p>This morning, we started with a review of the SQL homework and ventured into the wide world of SQL joins, followed by the start of our Ruby learning in the afternoon. Regarding SQL, I struggled a bit with the homework last night, but after I read up a bit more on joins, the confusion lessened and I was able to create a working quiz database. Our task was to (i) design a database schema, (ii) populate the database, (iii) query the database and (iv) determine quiz scores. I&#8217;ve published the SQL code I wrote to accomplish this task after the jump.</p>

<!--more-->


<p>After a lunch of Chinese food delivered to the school, we delved into Ruby. The &#8220;Programmer of the Day&#8221; was, aptly enough, Yukihiro Matsumoto, or <a href="http://en.wikipedia.org/wiki/Yukihiro_Matsumoto" target="_blank">&#8220;Matz&#8221;</a>, who invented the Ruby language. Avi described how Matz designed Ruby to be pleasing to the people using the language, not for the computer. The ultimate reason for creating Ruby was simply because it made Matz happy - not because of efficiency, power or universality, but rather human happiness. Ruby is a language designed to match the differences and idiosycracies inherent in human behavior and interaction. As Avi put it, our differences should be celebrated, not suppressed, and as a philosophical basis, Ruby enables different programmers to express themselves differently - there&#8217;s no one right way of doing something.</p>

<p>I enjoy Avi&#8217;s occasional expositions on the philosophical underpinnnings of code. I had never before thought about coding as an expressive and creative medium, on par with other art forms like music or painting, but the more I think about it, the more I can appreciate how code empowers people to exercise creativity. Even simple functions and programs can be written in any number of different ways. The mere variety of how much can be done using code is a testament to the infinite possibilities available with code.</p>

<p>For the rest of the afternoon, Avi lectured about Ruby and we broke off on occasion to work on practice problems. We covered variables, methods and basic control structures. All of the stuff we covered today was part of the class pre-work, but it was good to solidify my understanding, and I realized that there a few quirks of Ruby that I would have taken for granted if we had just skipped over the basic foundations of Ruby. For example, did you know that if you run a command like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">true</span> <span class="o">||</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then try to print the value of x, you won&#8217;t be returned 3? That&#8217;s because Ruby, in evaluating the expression, first saw that the left side of the &#8220;OR&#8221; statement (indicated by ||) was true and so it automatically knew that the entire expression was true (at least one side was true). Thus, Ruby didn&#8217;t even assign the number 3 to the variable x. I hadn&#8217;t considered that behavior for Ruby before, so it was good to go through some of the more nuanced aspects of the language.</p>

<p>Learning Ruby took up most of the rest of the day. Tonight, we have to write a few basic programs in Ruby (FizzBuzz!) just to get more acquainted with the language.</p>

<hr />

<p><em>SQL Exercise</em></p>

<p>This SQL code serves as the database schema and creates five tables - &#8216;users&#8217;, &#8216;quizzes&#8217;, &#8216;questions&#8217;, &#8216;choices&#8217; and &#8216;answers&#8217;. Each quiz has multiple questions, each of which have multiple choices. Users take quizzes and select choices as their answers, which then populates the &#8216;answers&#8217; table.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- CREATES DATABASE SCHEMA FOR QUIZ.DB</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">users</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">id</span> <span class="nb">integer</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">autoincrement</span><span class="p">,</span>
</span><span class='line'>  <span class="n">fname</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">lname</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">quizzes</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">id</span> <span class="nb">integer</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">autoincrement</span><span class="p">,</span>
</span><span class='line'>  <span class="n">name</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">questions</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">id</span> <span class="nb">integer</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">autoincrement</span><span class="p">,</span>
</span><span class='line'>  <span class="n">description</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">quiz_id</span> <span class="nb">integer</span><span class="p">,</span>
</span><span class='line'>  <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">(</span><span class="n">quiz_id</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">quizzes</span><span class="p">(</span><span class="n">quiz_id</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">choices</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">id</span> <span class="nb">integer</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">autoincrement</span><span class="p">,</span>
</span><span class='line'>  <span class="n">content</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">200</span><span class="p">),</span>
</span><span class='line'>  <span class="n">correct</span> <span class="nb">integer</span><span class="p">,</span>
</span><span class='line'>  <span class="n">question_id</span> <span class="nb">integer</span><span class="p">,</span>
</span><span class='line'>  <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">(</span><span class="n">question_id</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">questions</span><span class="p">(</span><span class="n">question_id</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">answers</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">id</span> <span class="nb">integer</span> <span class="k">primary</span> <span class="k">key</span> <span class="n">autoincrement</span><span class="p">,</span>
</span><span class='line'>  <span class="n">user_id</span> <span class="nb">integer</span><span class="p">,</span>
</span><span class='line'>  <span class="n">question_id</span> <span class="nb">integer</span><span class="p">,</span>
</span><span class='line'>  <span class="n">choice_id</span> <span class="nb">integer</span><span class="p">,</span>
</span><span class='line'>  <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">users</span><span class="p">(</span><span class="n">user_id</span><span class="p">),</span>
</span><span class='line'>  <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">(</span><span class="n">question_id</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">questions</span><span class="p">(</span><span class="n">question_id</span><span class="p">),</span>
</span><span class='line'>  <span class="k">FOREIGN</span> <span class="k">KEY</span><span class="p">(</span><span class="n">choice_id</span><span class="p">)</span> <span class="k">REFERENCES</span> <span class="n">choices</span><span class="p">(</span><span class="n">choice_id</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In creating the database, Avi made a few good points about efficient nomenclature. When I first created my database, I had redundant field names for my tables (e.g., &#8220;id&#8221; in the &#8220;choices&#8221; table was labeled &#8220;choice_id&#8221;). The prefix of &#8220;choice&#8221; for &#8220;id&#8221; is redundant, since the inclusion of the field in the &#8220;choices&#8221; table automatically associates &#8220;id&#8221; with &#8220;choices&#8221; and differentiates it from the &#8220;id&#8221; field in the other tables. Its not a huge deal to include the table prefix in the field name, but its unnecessary and the elimination of the prefix is an example of DRY (Don&#8217;t Repeat Yourself).</p>

<p>After creating the schema, we had to write SQL that would populate the database. The below SQL script adds data into the &#8220;users&#8221;, &#8220;quizzes&#8221;, &#8220;choices&#8221; and &#8220;questions&#8221; tables. As you&#8217;ll notice, there are 2 quizzes, each with 5 questions, each with 4 choices, for a total of 40 choices (2 * 5 * 4), hence the number of rows in the &#8220;choices&#8221; table. I used a &#8220;multi-insert&#8221; statement here rather than having INSERT INTO &#8230; VALUES surrounding each of my entries. This saves time and makes the code look cleaner. Also, I added the corresponding field names after the table name in each of the insert blocks - I don&#8217;t think this is necessary, as SQL will read the entries and assume that the first value goes into the first column, labeled &#8220;id&#8221;, and same with the other columns, but I figure that its best practice to be explicit with the field names so that there&#8217;s no ambiguity (for example, if you add fields in the future).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- INSERTS INITIAL VALUES INTO QUIZ.DB</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">users</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">lname</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="ss">&quot;Derrick&quot;</span><span class="p">,</span> <span class="ss">&quot;Rose&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="ss">&quot;Kevin&quot;</span><span class="p">,</span> <span class="ss">&quot;Durant&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="ss">&quot;Lebron&quot;</span><span class="p">,</span> <span class="ss">&quot;James&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">quizzes</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="ss">&quot;Ruby on Rails&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="ss">&quot;SQLite3&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">questions</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">quiz_id</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="ss">&quot;What is Ruby on Rails?&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="ss">&quot;Who created Ruby on Rails?&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="ss">&quot;Why is Ruby on Rails so awesome?&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="ss">&quot;Who uses Ruby on Rails?&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="ss">&quot;What are some Ruby on Rails competitors?&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="ss">&quot;What is SQLite3?&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="ss">&quot;Why is SQLite3 better or worse than other databases?&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="ss">&quot;How does SQLite3 vary from MySQL?&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="ss">&quot;Is MongoDB better than SQLite3?&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="ss">&quot;Why should you not use SQLite3 for large applications?&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">choices</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">correct</span><span class="p">,</span> <span class="n">question_id</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="ss">&quot;Choice A&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="ss">&quot;Choice B&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="ss">&quot;Choice C&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="ss">&quot;Choice D&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>This SQL command populates the &#8220;answers&#8221; table with data. I purposefully populated the data such that Derrick Rose got all questions right (he&#8217;s the best of the 3, after all), Kevin Durant got 3 questions right in each quiz and Lebron got only 1 question right per quiz (I&#8217;m still bitter over the 2011 Eastern Conference Finals).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="c1">-- INSERTS RESULTS OF 3 USERS EACH TAKING 2 TESTS </span>
</span><span class='line'>  <span class="c1">-- WITH 5 QUESTIONS INTO THE ANSWERS TABLE OF QUIZ.DB</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">answers</span> <span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">user_id</span><span class="p">,</span> <span class="n">question_id</span><span class="p">,</span> <span class="n">choice_id</span><span class="p">)</span> <span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">39</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This SQL command analyzes the resulting answers. In designing this query, I wanted to get back a table of six rows - one for each user-quiz pairing for 3 users, each taking 2 quizzes - with the user name, quiz name and total correct answers. I started the &#8220;answers&#8221; table, as I figured that &#8220;answers&#8221; would be my primary source for the scores; how could you determine a correct score without knowing the quiz takers&#8217; answers?. From there, I joined the table against other tables that included useful information.</p>

<p>The &#8220;answers&#8221; table includes what each user selected as a choice for a given question, but not whether that choice is correct (including such data in this table would be de-normalizing the &#8220;correct answer&#8221; data, which lives in the &#8220;choices&#8221; table), so I joined the &#8220;answers&#8221; table against &#8220;choices&#8221; to determine which choices selected by users were correct. Then, I continued joining against &#8220;questions&#8221;, &#8220;users&#8221; and &#8220;quizzes&#8221; to get the necessary information. Finally, I grouped the results by user_id and quiz_id, which collapses the return table into the 6 row table for each user-quiz pair that I was looking for.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- CREATES A TABLE FOR EACH USER-QUIZ SET AND </span>
</span><span class='line'><span class="c1">-- RETURNS THE SCORE EACH USER GOT ON A GIVEN QUIZ</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">fname</span> <span class="k">AS</span> <span class="s1">&#39;first name&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">lname</span> <span class="k">AS</span> <span class="s1">&#39;last name&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">id</span> <span class="k">AS</span> <span class="s1">&#39;user id&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">qz</span><span class="p">.</span><span class="n">name</span> <span class="k">AS</span> <span class="s1">&#39;quiz name&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="n">correct</span><span class="p">)</span> <span class="k">AS</span> <span class="s1">&#39;raw score&#39;</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">((((</span>
</span><span class='line'>  <span class="n">answers</span> <span class="n">a</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">choices</span> <span class="k">c</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">choice_id</span> <span class="o">=</span> <span class="k">c</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">questions</span> <span class="n">qu</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">question_id</span> <span class="o">=</span> <span class="n">qu</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">users</span> <span class="n">u</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">quizzes</span> <span class="n">qz</span> <span class="k">ON</span> <span class="n">qu</span><span class="p">.</span><span class="n">quiz_id</span> <span class="o">=</span> <span class="n">qz</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">a</span><span class="p">.</span><span class="n">user_id</span><span class="p">,</span> <span class="n">qu</span><span class="p">.</span><span class="n">quiz_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, I wrote some SQL to do some basic analytics on database. This basically is very similar to the above query, but adds the percentage score.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- CALCULATES PERCENTAGE CORRECT FOR A USER-QUIZ SET</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">fname</span> <span class="k">AS</span> <span class="s1">&#39;first name&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">u</span><span class="p">.</span><span class="n">lname</span> <span class="k">AS</span> <span class="s1">&#39;last name&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">qz</span><span class="p">.</span><span class="n">name</span> <span class="k">AS</span> <span class="s1">&#39;quiz name&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="n">correct</span><span class="p">)</span> <span class="k">AS</span> <span class="s1">&#39;raw score&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="n">correct</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span> <span class="o">/</span> <span class="mi">5</span> <span class="o">||</span> <span class="s1">&#39;%&#39;</span> <span class="k">AS</span> <span class="s1">&#39;score percentage&#39;</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">((((</span>
</span><span class='line'>  <span class="n">answers</span> <span class="n">a</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">choices</span> <span class="k">c</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">choice_id</span> <span class="o">=</span> <span class="k">c</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">questions</span> <span class="n">qu</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">question_id</span> <span class="o">=</span> <span class="n">qu</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">users</span> <span class="n">u</span> <span class="k">ON</span> <span class="n">a</span><span class="p">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">quizzes</span> <span class="n">qz</span> <span class="k">ON</span> <span class="n">qu</span><span class="p">.</span><span class="n">quiz_id</span> <span class="o">=</span> <span class="n">qz</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">a</span><span class="p">.</span><span class="n">user_id</span><span class="p">,</span> <span class="n">qu</span><span class="p">.</span><span class="n">quiz_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Avi said that we wouldn&#8217;t be actively writing many SQL queries, since Rails abstracts so much of the database interaction. However, there will undoubtedly be times when Rails isn&#8217;t sufficient for complex data queries, and we&#8217;ll have to write our own SQL. Even if we don&#8217;t use SQL that often, its critical to know, and I think its pretty cool, despite the at times frustrating syntax and poor debugging feedback for the sqlite3 shell. I would like to eventually explore more advanced data analysis tools, software like Hadoop or Cassandra, so knowing SQL is going to be invaluable moving forward.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Day 003]]></title>
    <link href="http://eewang.github.com/blog/2013/02/06/flatiron-day-003/"/>
    <updated>2013-02-06T11:30:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/06/flatiron-day-003</id>
    <content type="html"><![CDATA[<p>On Day 3 of The Flatiron School, we continued setting up our Octopress blogs. Avi walked through the rake commands and how each one works, which was helpful in demystifying the commands and directory structure. He reassured us that all of the commands that we execute to create new posts, deploy the site, etc., could themselves be found in files in our application. We examined the Gemfile and Rakefile, making small manipulations and running test code to make sure that they worked.</p>

<!--more-->


<p>I wrote a short script to automate the process of deploying the blog (&#8220;rake deploy&#8221;), staging files on git (&#8220;git add .&#8221;), commiting files (&#8220;git commit -am &#8216;message&#8217;&#8221;) and pushing files to a remote repository on Github. Its pretty simple and permits users to add in a commit message. Here is the code to put in your Rakefile:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Add files to github, commit and deploy&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:gen_deploy_push</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">msg</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="no">STDOUT</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;What is your commit message? &quot;</span>
</span><span class='line'>  <span class="n">msg</span> <span class="o">=</span> <span class="no">STDIN</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;rake gen_deploy&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;git add .&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;git commit -am &#39;</span><span class="si">#{</span><span class="n">msg</span><span class="si">}</span><span class="s2">&#39;&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;git push&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;commit message was &#39;</span><span class="si">#{</span><span class="n">msg</span><span class="si">}</span><span class="s2">&#39;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think the code is fairly straightforward - basically the user inputs a commit message and then the command will deploy the site while commiting the code to Github.</p>

<p>After a morning spent working through the intricacies of the Gemfile and Rakefile in the Octopress application (it looks intimidating, but I found it very helpful to examine the code underlying a command before executing it - makes coding seem less like magic and more like an intricate sequence of interconnected logic), we broke for lunch. In the afternoon, we shifted gears to databases, specifically learning Structured Query Language (SQL). I first learned SQL a few years back when I interned at KPMG. I was part of the Forensic Advisory group, which used Microsoft SQL Server to comb through millions of rows of data and run pricing analyses for pharmaceutical companies. However, even though I learned the syntax and general structure of SQL at KPMG, a lot of it was more copying pre-written SQL queries and modifying them at the margins, rather than writing my own from scratch, so the exercises today were pretty helpful.</p>

<p>After a brief lecture on SQL by Avi, we broke up into our groups and designed a schema for a simple quiz app. This app would have users, quizzes, questions, choices and answers, and the challenge for us was to determine the optimal database design to address the immediate use cases while also leaving room to hypothetically scale the database. Once we created a schema, we then practice writing SQL queries to create, manipulate and access that database. For the rest of the afternoon, we worked as a class to build the quiz app database, with each group contributing a piece of the database structure and Avi using the differences between our schemas to comment on the pros and cons of schema designs.</p>

<p>For me, the class has been moving along at a brisk but manageable pace. In the course of three days, it seems like we&#8217;ve covered a boatload of material related to git, environment setup and databases, but I know that that&#8217;s just the beginning of the journey. We haven&#8217;t even systematically delved into Javascript, Ruby or Rails yet! Its exciting to think of all the stuff that&#8217;s out there to learn - I just need to be diligent and purposeful in completing the homework and grabbing every opportunity to learn something new or contribute to a project, no matter how small.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Day 002]]></title>
    <link href="http://eewang.github.com/blog/2013/02/05/flatiron-day-002/"/>
    <updated>2013-02-05T17:10:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/05/flatiron-day-002</id>
    <content type="html"><![CDATA[<p>Day 2 of The Flatiron School was a success. Today&#8217;s main focus was to set up our Octopress blogs (the result of which is on your screen) and set up our development environments. Its remarkable to think about all of the stuff that goes on &#34;under the hood&#34; when developing software - before today I didn&#8217;t really know what dot files were, and now I realize how fundamental they are to a smooth development experience (case in point, I screwed up my .bash_profile yesterday and that nearly forced me to reformat my machine).</p>

<!--more-->


<p>We started the day going through the various environment issues, including:</p>

<ul>
  <li>Installing necessary development tools like Homebrew, Ruby Version Manager and SQLite3</li>
  <li>Configuring our multiple dot files, including .gitconfig, .bash_profile, .irbrc, .gitignore and .gemrc, adding aliases and modifying preferences</li>
  <li>Pimping out our machines by installing an array of cool programs, like Solarize (for bash and Sublime Text), Alfred (powerful search tool) and Base 2 (visualize SQL queries)</li>
</ul>


<p>Getting everything set up took most of the morning, as we would use Avi&#8217;s dot files as a base and slowly apply changes as we moved forward. For me, learning to use the bash shell has been great, if a bit challenging. Using the shell to interact with your machine makes the user considerably more powerful and efficient in navigating the file system and making changes. However, its a bit of a learning curve, as before I started learning how to code, I accessed files via icons like the vast majority of computer users - I never gave a fleeting thought to the more powerful mode of interacting with a computer that is the Terminal.</p>

<p>At around noon, we left to go to visit the offices of Pivotal Labs - a Ruby development shop in Union Square - where we enjoyed a catered lunch and heard Avi speak about the history of code. Avi Flombaum is a developer-philosopher, if there ever was one. Actually, he&#8217;d probably prefer philosopher-developer. Starting with the fundamentals of coding as communication, Avi weaved together a story that originated with ancient cavemen, using recipes as the first programs, and moved through the fathers (and mothers) of modern programming - luminaries like Ada Lovelace, Alan Turing and Nicola Tesla (among many others).</p>

<p>Here are just a few quotes from several of the awesome people Avi talked about today. The one that stuck with me the most was the last quote by Tesla - he basically predicted the modern web more than a century ago and recognized that the ability to broadly distribute and transmit information would revolutionize economies and societies. Also, Alan Kay&#8217;s quote was encouraging, in that despite the massive growth of the Internet in the past decade, there is still way more to be done. We&#8217;ve only seen the tip of the iceberg. As someone starting to learn how to manipulate technology, its reassuring to think that I&#39;m getting out in front of the wave rather than catching the end.</p>

<blockquote>
  <p>The real romance is out ahead and yet to come. The computer revolution hasn&#8217;t started yet. Don&#8217;t be misled by the enormous flow of money into bad defacto standards for unsophisticated buyers using poor adaptations of incomplete ideas. </p>
  <p>&#8211; Alan Kay, computer scientist</p>
</blockquote>




<blockquote>
  <p>The web is more a social creation than a technical one. I designed it for a social effect — to help people work together — and not as a technical toy. The ultimate goal of the Web is to support and improve our weblike existence in the world. We clump into families, associations, and companies. We develop trust across the miles and distrust around the corner. </p>
  <p>&#8211; Tim Berners-Lee, investor of the World Wide Web</p>
</blockquote>




<blockquote>
  <p>It will soon be possible, for instance, for a business man in New York to dictate instructions and to have them appear instantly in type in London or elsewhere. He will be able to call up from his desk and talk with any telephone subscriber in the world. it will only be necessary to carry an inexpensive instrument not bigger than a watch, which will enable its bearer to hear anywhere on sea or land for distances of thousands of miles. One may listen or transmit speech or song to the uttermost parts of the world. In the same way any kind of picture, drawing, or print can be transferred from one place to another. It will be possible to operate millions of such instruments from a single station. Thus it will be a simple matter to keep the uttermost parts of the world in instant touch with each other. The song of a great singer, the speech of a political leader, the sermon of a great divine, the lecture of a man of science may thus be delivered to an audience scattered all over the world. </p>
  <p>&#8211; Nikola Tesla, scientist, in 1909 (!)</p>
</blockquote>


<p>It was great to hear Avi&#8217;s passion for coding not as merely a process of learning a whole bunch of different computer programming languages, but as a method of rich communication between humans - a method that enables immense creativity and expressiveness and is built for humans rather than computers. To hear his love of coding was inspirational. He was able to break down the immensely complex task of creating software - just to communicate with a server requires a whole host of actions, before any of the actual functional code of a program is written - into simple, manageable problems. This deconstruction-synthesis approach to programming - understanding a large problem and deconstructing it into smaller problems, then reconstructing it into a integrated system - is applicable across all industries and systems, both artificial and natural.</p>

<p>Take the human body for example. The human body is an unfathomably complex system, but 99% of it is below the surface. Its like the ubiquitous iceberg example - most of the complexity is &#8220;under the hood&#8221;. However, when you study the body, you can break it down into individual, relatively less complex components. The human body is comprised of the circulatory system, nervous system, skeletal system, etc. The circulatory system is comprised of veins and arteries that transport red blood cells. The red blood cells are living organisms that are comprised of nuclei, ribosomes, mitochondria and a whole host of other sub-cellular units that I&#8217;ve long since forgot. And so on. The complexity at first seems daunting and unmanageable, but once you learn how to break it down into its constituent parts and understand the interactivity between them, building a system becomes a more manageable mountain to scale.</p>

<p>I think its important to take a similar approach to web development. Or any form of problem solving, for that matter. Thinking about problems in this way does more than make the large problem you&#8217;re trying to solve for more manageable - it also provides motivation to keep moving forward even when wading knee deep in code. It can be frustrating working on a single bug or trying to get a small chunk of code to work, but knowing how that small bug or code set fits within a larger system can be a motivating force to keep progressing, at least for me. I&#8217;m someone that likes to understand how the components of a larger system work together, and that general understanding makes it easier for me to work on the details than if I had no idea of the bigger problem I was trying to solve.</p>

<p>Avi&#8217;s passion for coding is infectious. If you ever have a chance to take a class with him - do it. Avi makes learning how to code about so much more than using git or writing Ruby code or knowing how to manipulate a bash profile. He connects the journey of coding with a larger, innate human desire to communicate, to structure and express the hard-to-articulate thoughts in a way that can be useful to others. In many ways, its more than just a profession or a job, its a way of thinking about life - a philosophy of communication, learning and interaction. But don&#8217;t let this scare you, rather, it should excite you. It should excite you to find underlying connections between seemingly disparate industries, subjects and areas of human exploration. It should excite you that you can learn a common approach to solving problems that can be used in an almost infinite number of applications. It should excite you that there are common patterns across our day-to-day lives, both in software and in human connections. This should provide a basis for a deep desire to learn and explore, from which only great and awesome things can come.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Day 001]]></title>
    <link href="http://eewang.github.com/blog/2013/02/04/flatiron-day-001/"/>
    <updated>2013-02-04T20:00:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/04/flatiron-day-001</id>
    <content type="html"><![CDATA[<p>Day 1 of Winter/Spring 2013 of <a href="http://www.flatironschool.com/" target="_blank">The Flatiron School</a> is in the books! Today, Avi applied the philosophy of &#8220;deploy on day 1&#8221; and required us all to create student profile pages and merge the various branches of the base files using git. Most of the morning was spent establishing a basic working environment (Avi promised that we&#8217;d go through environment configuration in Day 2), forking the Github Flatiron student profile page and modifying the HTML, CSS and JavaScript files to match our content.</p>

<!--more-->


<p>After a lunch break of pizza, salad and soda (and introductions with fellow students), Avi went through class logistics (class is from 9 am to 6 pm, school will be open on weekends for people to work, etc.) and gave us a pep talk about the joys of programming and words of wisdom for the upcoming semester. He explained that we would be progressing through increasing levels of abstraction - starting with the environment, SQL, front-end code, then progressing to Ruby and finally to Ruby on Rails. We likely won&#8217;t get to RoR until a month or so in, as Avi wants us to understand all the individual components of RoR so that we could build the framework ourselves. Personally, I like this approach - I think I learn best when I understand the component pieces of an abstracted framework. Using a framework is fantastic, but its even more powerful when understanding how its constructed so that customization can be performed (even if unnecessary). Overall, it was great to hear his passion for coding come through in his talk - in my brief experience as a (aspiring) developer, I&#8217;ve felt that its easy to get frustrated and irritated when working deep in the weeds with lines of code, but that its a much more enjoyable experience if you take a step back and appreciate the joy of creating a product.</p>

<p>After that talk, we continued working on our student profiles, then later in the afternoon, we all gathered back together to work on merging all of our forked branches into the master branch. Avi acted as a train conductor and went through the branches of each of the groups, slowly diff-ing, rebase-ing and remote-ing through each group&#8217;s work until we came out with a master branch that contained our student profiles. It seemed like arduous work - especially if there are a lot of merge conflicts - but it was also pretty amazing to see the vast functionality of git, and how its able to take an incredibly complex process - people making changes to various components of a given project at various times - and structure it in such a way that is (relatively) easy to understand. Also, Avi showed us a program called Gitx that converts git project data into a multi-color map that isn&#8217;t too different from a live traffic stream. Pretty awesome stuff.</p>

<p>For me, the early part of the day was a little intimidating, although I gather that that was the intention from the get-go. In looking around and browsing other people&#8217;s work, I sensed that the level of skill and understanding varied considerably between people. Some of my fellow students dived straight into the project - adding jQuery functionality, restructuring the base CSS - while others struggled with setting up their environment. I counted myself in this latter group - I couldn&#8217;t get Sublime Text working early on, and nearly nuked my computer after adding some bash code to my .bash_profile, which removed the ability to use basic commands (e.g., &#8220;cd&#8221;, &#8220;ls&#8221;, &#8220;rm&#8221;, etc.) in my bash shell. Thankfully, after some artful troubleshooting by Avi, I was able to revive my shell and get back to work (thanks, Avi!).</p>

<p>I was able to style some links in my student profile, add a few pictures and create a basic layout for the content I wanted to include - mostly resume-related stuff, like my experience, skill set, etc. (boring, I know, compared to what some other people were putting together). Although I&#8217;ve worked with front-end code some before, I still have difficulty fully understanding how to implement a design idea I have, especially with an extensive pre-built stylesheet. I think I need to spend more time systematically understanding how styles are applied and what best practices are with respect to structuring an HTML document. I tend to have too many &lt;div> containers, and still haven&#8217;t fully gotten used to using the new HTML5 element tags. Avi assured us, though, that we would get to all the stuff we&#8217;ll need to know. All in good time!</p>
]]></content>
  </entry>
  
</feed>
