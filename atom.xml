<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[eugenius]]></title>
  <link href="http://eewang.github.com/atom.xml" rel="self"/>
  <link href="http://eewang.github.com/"/>
  <updated>2013-08-26T08:44:07-04:00</updated>
  <id>http://eewang.github.com/</id>
  <author>
    <name><![CDATA[Eugene Wang]]></name>
    <email><![CDATA[eugene.wang@flatironschool.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Navigating the Job Search]]></title>
    <link href="http://eewang.github.com/blog/2013/08/26/navigating-the-job-search/"/>
    <updated>2013-08-26T07:24:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/08/26/navigating-the-job-search</id>
    <content type="html"><![CDATA[<p>Last Friday was graduation day for the most recent cohort of Flatiron School students, and today is the first official day of the post-school job search process. I&#8217;m reminded of the my first day after the last day of Flatiron, when I went back into school just out of habit and a desire to continue the accelerated learning process that I had become so accustomed to. In light of that and with an eye toward helping out the newly-minted Flatiron graduates, here are a few thoughts that I hope can be useful to those who are enduring the frustration, anxiety and, ultimately and hopefully, joy of looking for a junior-level developer gig.</p>

<!--more-->


<p><strong>Don&#8217;t stress out about it!</strong>
Its easy for me to say this from the perch of employment, but anxiety about finding a job can be counter productive. If you find joy in what you&#8217;re doing so much so that you continue to do it in your free time or practice it now that school is done, the job offers will inevitably come. Stress should be a motivating factor to seek out opportunities and explore the start-up landscape; it shouldn&#8217;t devolve into worry and anxiety about where your career will go or whether or not you&#8217;ll go hungry. The best careers seem to progress in a non-linear fashion - every other step seems to be sideways and sometimes even backwards. So don&#8217;t worry if it doesn&#8217;t seem like things are going your way early on, just pursue opportunities to learn new things, continue to write and blog and be as vocal about what you don&#8217;t know and want to learn as you are about what you already can accomplish.</p>

<p><strong>Know what you&#8217;re looking for</strong>
Granted, that&#8217;s not especially useful advice. Knowing what your looking for seems to be an oxymoron - if I already know what I&#8217;m looking for, why would I need to be looking for it? What I mean here is not to have in mind already what the ideal job is, but rather know what you want to be characteristics of that ideal job. Are you passionate about something other than code? Go find a music startup or media company to work at. Are you looking to build rock-solid fundamentals in test-driven development and pair program daily? Go seek out a reputable dev shop. Coming out of a school like Flatiron you have a lot of opportunities, and as all sectors of the economy rapidly digitize and incorporate technology into their products and services, the demand is outpacing the supply of new engineers and developers. And even though positive churn (i.e., developers frequently changing companies for better opportunities) seems common in the technology space, your first job as a developer will invariably have an indelible impact on your future career in technology.</p>

<p><strong>There&#8217;s a whole lot more out there than Ruby&#8230;</strong>
Its clear that Ruby is the lingua franca at Flatiron, as well as many of the other new development schools that are popping up. In the real world though, its just one of many languages that are used to solve engineering problems. At the New York Times, I encounter engineers who are skilled across a range of languages and frameworks, and many do not have Ruby experience. The NYT is a truly polyglot organization - everything from Python to C to Javascript to Go are used to solve the technical challenges of the NYT. Although its great to be an unabashed Rubyist, at the same time its important to understand the criticisms of Ruby and the benefits of a more statically typed language like C or Java. For me, I&#8217;ve learned how different languages really are built for different problems, even if a scripting language like Ruby has applications beyond the web development purposes that so many people use it for today.</p>

<p><strong>&#8230;Yet if you&#8217;re applying for a Rails job, know your Ruby</strong>
One thing the TAs at Flatiron really emphasized that stuck with me was the importance of knowing core Ruby rather than just Rails. Understanding Ruby will help you better understand Rails, but the opposite isn&#8217;t always true. A mature framework like Rails can sometimes make it feel like you&#8217;re just configuring a system or adding magical keywords into your classes rather than actual programming. But at its core, Rails is just Ruby code - it can be extended, modified, pushed and pulled. The more you understand Ruby, the easier it will be to understand how gems or other bits of code can integrate into a piece of software.</p>

<p>Plus, knowing Ruby is good just for job interviews. Most of my technical interviews were focused on Ruby rather than Rails. And if they were focused on Rails, they were typically more high-level, software design questions that happened to use Rails as the development framework. In other words, I would either get questions like, &#8220;How would you sort this array and extract just every third word in Ruby?&#8221; or, &#8220;How would you build a software platform like Kickstarter?&#8221; Knowing Ruby is instrumental (and Rails pretty useless) to answering the former. Yet the latter can be reasoned through by understanding model associations and software design, rather than knowing how to apply specific macros in Rails. Obviously, understanding Rails will be critical for building software if you go to a Rails shop, but in the interview process, its better to walk in as a confident Rubyist rather than as someone who can just program in Rails.</p>

<p>What I did when I left Flatiron to prepare for job interviews mostly focused on Ruby. I worked on <a href="http://www.projecteuler.net">Project Euler</a> problems and tried building multi-class command line programs, which helped me structure my code and think from an object-oriented perspective. Tasks like trying to build a restaurant bill-splitting tool or a sports draft room via the command line can help you think about the fundamental business logic of an application and how to model your schema, rather than focusing on how the front-end looks. While building software requires an understanding of both back and front-end technologies, the core of any good engineer is being able to break down a problem into its constituent parts and to understand how those parts can be composed to build a coherent whole. These skills can be end-agnostic; the effective use of both back-end frameworks like Rails or front-end tools like Backbone.js requires an ability to structure data and process user input.</p>

<p><strong>Being a developer is pretty damn fun</strong>
Sometimes I go to work thinking that its unfair to others that I get to do what I do. Learning to code and working as a developer has been an amazing and fun experience, and I&#8217;ve thus far thoroughly enjoyed working at the NYT. Yet at the same time, coding has a certain escapist quality to it. I can easily zone out for hours at a time, put on my music and just see where my creativity takes me. I&#8217;m a firm believer that the work we do should be service-oriented, despite being a profit-seeking enterprise. Developers have this great skill of solving modern problems, many of which can be addressed by using the powerful connective capabilities of the Internet and accessibility of distribution platforms like smartphones. Solving these problems (which are most often outside the strict domain of an engineer) requires not just technical abilities, but also an empathetic understanding of why those are problems in the first place.</p>

<p>I&#8217;ve always thought that the most fascinating problems developers are meant to solve with software are problems outside the traditional realm of software. This means that to effectively solve problems, knowing who you&#8217;re solving problems for is as important as being technically able to solve those problems. Avi talks a lot about empathy as a developer, and I think he&#8217;s really right about it. I work on a daily basis with editors who are the end users of the product I&#8217;m currently building. Empathy for the needs and interests of my clients (i.e., users) is critical to prioritizing my development tasks and knowing when to hone in on the annoying details and when to back out of a rabbit hole. While solving problems is objectively fun, it can be a fruitless exercise if those problems are not actually the problems faced by the people you&#8217;re tasked to serve in your work. Empathy, understanding, communication - these are all the soft skills that connect you back to the real world as a developer, rather than just zoning out, donning your headphones and coding away at a fantasy world problem.</p>

<p>Hope that was useful for anyone out there looking for a developer job. Best of luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use Rake Tasks to Generate Raw SQL From ActiveRecord Migrations]]></title>
    <link href="http://eewang.github.com/blog/2013/07/29/how-to-use-rake-tasks-to-generate-migration-sql/"/>
    <updated>2013-07-29T19:26:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/07/29/how-to-use-rake-tasks-to-generate-migration-sql</id>
    <content type="html"><![CDATA[<p>Recently at the NYT on the product I&#8217;m working on, we came across the problem of having to convert ActiveRecord migrations into raw SQL in order to be processed on our production database. Our infrastructure/systems team needs SQL in order to generate migrations; since not all teams at the NYT use Rails, ActiveRecord&#8217;s migrations cannot be automatically applied to the production database.</p>

<!--more-->


<p>So the senior developer I work closely with wrote a rake task that parsed the SQL generated by ActiveRecord migration tasks into a .sql file, which our systems team could then use to generate the necessary database migrations. Although I had no role in actually writing the code, I thought that the rake task touched on a few interesting concepts in Ruby, so I felt compelled to post it and annotate it a little bit.</p>

<p>Here&#8217;s the code in its entirety. Its saved in a .rake file in the tasks folder in the lib directory.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span> <span class="ss">:migrate</span><span class="p">,</span> <span class="ss">:rollback</span> <span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>    <span class="n">namespace</span> <span class="n">n</span> <span class="k">do</span> <span class="o">|</span><span class="n">migration_task</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">original_task</span> <span class="o">=</span> <span class="n">migration_task</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@scope&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span> <span class="s2">&quot;:&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">[</span><span class="ss">:with_sql</span><span class="p">,</span> <span class="ss">:to_sql</span> <span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">desc</span> <span class="s2">&quot;Run migration, and generated SQL&quot;</span> <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="ss">:with_sql</span>
</span><span class='line'>        <span class="n">desc</span> <span class="s2">&quot;Generate migration SQL&quot;</span> <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="ss">:to_sql</span>
</span><span class='line'>        <span class="n">task</span> <span class="n">t</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span> <span class="o">|</span><span class="n">sql_task</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">case</span> <span class="n">original_task</span>
</span><span class='line'>          <span class="k">when</span> <span class="s2">&quot;db:migrate&quot;</span>
</span><span class='line'>            <span class="n">filename</span> <span class="o">=</span> <span class="s1">&#39;upgrade.sql&#39;</span>
</span><span class='line'>          <span class="k">when</span> <span class="s2">&quot;db:rollback&quot;</span>
</span><span class='line'>            <span class="n">filename</span> <span class="o">=</span> <span class="s1">&#39;rollback.sql&#39;</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="k">raise</span> <span class="s2">&quot;unkown migration type </span><span class="si">#{</span><span class="n">original_task</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>            <span class="c1"># alias the adapter&#39;s execute for later use</span>
</span><span class='line'>            <span class="k">alias</span> <span class="ss">:old_execute</span> <span class="ss">:execute</span>
</span><span class='line'>
</span><span class='line'>            <span class="no">SQL_FILENAME</span> <span class="o">=</span> <span class="n">filename</span>
</span><span class='line'>            <span class="no">RUN_SQL</span> <span class="o">=</span> <span class="n">sql_task</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">ends_with?</span><span class="p">(</span><span class="s2">&quot;with_sql&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1"># define our own execute</span>
</span><span class='line'>            <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="nb">name</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>              <span class="c1"># check for some DDL and DML statements</span>
</span><span class='line'>              <span class="k">if</span> <span class="sr">/^(create|alter|drop|insert|delete|update)/i</span><span class="o">.</span><span class="n">match</span> <span class="n">sql</span>
</span><span class='line'>                <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">SQL_FILENAME</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">sql</span><span class="si">}</span><span class="s2">;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>                <span class="n">old_execute</span> <span class="n">sql</span><span class="p">,</span> <span class="nb">name</span> <span class="k">if</span> <span class="no">RUN_SQL</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                <span class="c1"># pass everything else to the aliased execute</span>
</span><span class='line'>                <span class="n">old_execute</span> <span class="n">sql</span><span class="p">,</span> <span class="nb">name</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1"># create or delete content of migration.sql</span>
</span><span class='line'>          <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">SQL_FILENAME</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;-- Script created @ </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1"># invoke the normal migration procedure now</span>
</span><span class='line'>          <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="n">original_task</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;Ran </span><span class="si">#{</span><span class="n">original_task</span><span class="si">}</span><span class="s2"> and wrote sql to </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>At a high level, this code does the following:
* Open up the db namespace and add a sub rake task atop the db:migrate and db:rollback commands
* Hijacks the execute method and writes the SQL otherwise executed by Rails to a file.
* Permit users to specify whether they want Rails to actually execute the SQL code or just to write it to a file for later use</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span> <span class="ss">:migrate</span><span class="p">,</span> <span class="ss">:rollback</span> <span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>    <span class="n">namespace</span> <span class="n">n</span> <span class="k">do</span> <span class="o">|</span><span class="n">migration_task</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">original_task</span> <span class="o">=</span> <span class="n">migration_task</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="s2">&quot;@scope&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span> <span class="s2">&quot;:&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code opens up the :db namespace and executes the same block of code for the :migrate and :rollback sub name spaces. The :with_sql and :to_sql commands get appended to both namespaces, for a total of 4 new rake commands. The last line here just reverse engineers the original command; the original_task local variable returns &#8216;db:migrate&#8217; or &#8216;db:rollback&#8217;.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="ss">:with_sql</span><span class="p">,</span> <span class="ss">:to_sql</span> <span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Run migration, and generated SQL&quot;</span> <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="ss">:with_sql</span>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Generate migration SQL&quot;</span> <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="ss">:to_sql</span>
</span><span class='line'><span class="n">task</span> <span class="n">t</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span> <span class="o">|</span><span class="n">sql_task</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="n">original_task</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;db:migrate&quot;</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="s1">&#39;upgrade.sql&#39;</span>
</span><span class='line'>  <span class="k">when</span> <span class="s2">&quot;db:rollback&quot;</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="s1">&#39;rollback.sql&#39;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;unkown migration type </span><span class="si">#{</span><span class="n">original_task</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sets up the creation of a file based on the type of migration task that is being considered. &#8216;upgrade.sql&#8217; will execute a migration while &#8216;rollback.sql&#8217; will reverse one. The idea is that adding these .sql files will make it as easy as possible for a database architect to execute a migration on a staging or production server, rather than deciphering the Rails migration herself. I generally take for granted the fact that I work in Rails; now that I&#8217;m no longer at Flatiron, I need to remember that not all databases uses the Rails ORM to connect to an application, but SQL remains a common language that most databases understand. Although ActiveRecord seems to abstract away so much of the underlying database connections, at the end of the day all its doing is executing SQL, which you can write directly into your Ruby code. In fact, a common complaint I&#8217;ve heard about Rails is that for more complex queries, you can&#8217;t rely just on ActiveRecord to generate efficient queries and instead have to fall back on executing raw SQL.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># alias the adapter&#39;s execute for later use</span>
</span><span class='line'>  <span class="k">alias</span> <span class="ss">:old_execute</span> <span class="ss">:execute</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">SQL_FILENAME</span> <span class="o">=</span> <span class="n">filename</span>
</span><span class='line'>  <span class="no">RUN_SQL</span> <span class="o">=</span> <span class="n">sql_task</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">ends_with?</span><span class="p">(</span><span class="s2">&quot;with_sql&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># define our own execute</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="nb">name</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># check for some DDL and DML statements</span>
</span><span class='line'>    <span class="k">if</span> <span class="sr">/^(create|alter|drop|insert|delete|update)/i</span><span class="o">.</span><span class="n">match</span> <span class="n">sql</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">SQL_FILENAME</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">sql</span><span class="si">}</span><span class="s2">;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">old_execute</span> <span class="n">sql</span><span class="p">,</span> <span class="nb">name</span> <span class="k">if</span> <span class="no">RUN_SQL</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1"># pass everything else to the aliased execute</span>
</span><span class='line'>      <span class="n">old_execute</span> <span class="n">sql</span><span class="p">,</span> <span class="nb">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the core of the rake task, and it includes some nifty metaprogramming components, including class_eval and the alias method. The code overrides ActiveRecord&#8217;s default #execute method. When the interpreter hits the class_eval method, it executes the following code as if that code was included in the class. In this case, execute is an instance method, since class_eval is a method in the Module class and so the code in the enclosed methods is executed in the context of that class (e.g., as an instance method). Confused? Don&#8217;t worry, I&#8217;m still trying to fully grasp how some of these metaprogramming methods work.</p>

<p>Anyways, the use of class_eval enables the rake task to extend the functionality of the standard #execute method and have it write out to a text file. The default method takes in raw sql as an argument and executes it on the connection&#8217;s class. By writing our own method, this allows us to insert logic before the execution occurs. The alias stores the Rails execute method as :old_execute, which is called only if the rake task includes the :with_sql suffix. If the sql that Rails would otherwise execute includes a migration task (e.g., CREATE, ALTER, DROP, INSERT, DELETE or UPDATE), then this sql is written to a file saved to the root Rails directory.</p>

<p>If you&#8217;re interested in the concepts covered in this code, here are a few links that are helpful:</p>

<p><a href="http://www.jimmycuadra.com/posts/metaprogramming-ruby-class-eval-and-instance-eval" target="_blank">Class Eval vs. Instance Eval</a></p>

<p><a href="http://paul-wong-jr.blogspot.com/2012/04/ruby-metaprogramming-with-classeval.html" target="_blank">More about class_eval</a></p>

<p><a href="http://andreacfm.com/2012/11/29/ruby-alias-vs-alias-method/" target="_blank">Ruby&#8217;s alias and alias_method</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using ActiveModel Serializers to Build Great JSON Interfaces]]></title>
    <link href="http://eewang.github.com/blog/2013/07/23/using-activemodel-serializers-to-build-great-json-interfaces/"/>
    <updated>2013-07-23T14:07:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/07/23/using-activemodel-serializers-to-build-great-json-interfaces</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been at the New York Times on the New Digital Products team for a little over two weeks now. Thus far, its been an awesome experience. I&#8217;ve had the opportunity to jump right in and commit code, primarily helping build the Rails backend interface for a mobile application. I&#8217;ve been spending time trying to get up to speed on the various internal software tools that the NYT provides, and I&#8217;ve come to appreciate that from a technical perspective, the NYT is an API-driven organization.</p>

<!--more-->


<p>Most of the APIs I dealt with at Flatiron were for public consumption (e.g., Viewfinder leveraged the Instagram API pretty heavily), so its been interesting to see how the NYT develops internal APIs to decrease inter-team dependencies while reducing the potential for overlapping responsibilities. With so many teams (e.g., internal CMS, user-generated content, video, etc.) working together to build a single journalistic product, I&#8217;ve learned that necessary to have public, internal JSON interfaces for different teams to work with. As such, I&#8217;ve had the chance to use a Rails module called ActiveModel::Serializers that helps developers build a sensible JSON interface in an object-oriented manner that&#8217;s pretty intuitive.</p>

<p>ActiveModel::Serializers is a component of the Rails API that enables an object-oriented approach to serializing ActiveRecord objects. The module can also be used to provide customized JSON objects depending on the requester. Serializers know about both a model and the environment in which it is being accessed, so if an admin user accesses the API you as the developer can provide one level of access to the underlying data, while providing a less detailed view to a non-admin user. To get this functionality, you can just add the &#8216;active_model_serializers&#8217; gem to your Gemfile.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile.rb</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;active_model_serializers&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Serializers serve as a thin layer of abstraction between models and your JSON, and can be a useful tool in quickly adjusting your application&#8217;s API without making large scale changes to the underlying schema. With AM:Serializers, its easy to change JSON presentation logic without affecting underlying model logic, and enables you to quickly add or modify attributes to an object&#8217;s JSON representation that are not explicitly part of the model/table.</p>

<p>For example, say you&#8217;re responsible for building the backend for a football statistics application. The NFL wants to create a mobile app for delivering useful analytics to users and in order to do so, needs to be able to get statistics for individual players and teams. However, the data requirements can vary from week-to-week and by use case - for example, international apps built off the stats API require &#8216;receiving yards&#8217; to be in meters whereas domestic apps display such stats as yards. By adding in serializer support, you can deliver a different data structure to each client application even if the underlying data is the same. Another example might be timestamps, which are saved in the database as a Unix timestamp but may need to be delivered to client apps in a human readable form, adjusted for each user&#8217;s time zone.</p>

<p>This is admittedly a contrived example, but it gets the point across. Serializers make it easy to further separate the presentation layer of your application from the underlying model layer, even though by &#8220;presentation&#8221; I&#8217;m referring to the JSON representation of model objects rather than actual HTML files. This way, other applications can access the underlying data by virtue of a public API while you continue to tinker around with the backend. So long as your API remains consistent (or changes are properly documented), other teams or applications that depend on your API can continue developing without worrying about every change you make to the underlying code.</p>

<p>To get started, just use a Rails generator to create a serializer:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate serializer team
</span></code></pre></td></tr></table></div></figure>


<p>Imagine I have a Team class (i.e., model) to represent a football team. A single team has many games (16 regular season, in the case of the NFL) and many players. In the serializer, I specify which attributes I want available in the JSON object, which typically will correspond to the methods in the body of the class or the attributes of the model. If I have a custom defined attribute (e.g., an attribute that is not the same as an attribute in my model), I need to write out a method with the same signature so that Rails knows how to interpret my serialized attribute.</p>

<p>I can also specify associations and customize how those associations appear in my JSON. Each team has many players, which is a separate model that has data about a player&#8217;s height, weight, jersey number, etc. In this example, I don&#8217;t need all of that information - all I need is the player&#8217;s name, jersey number and age. So I can override the typical association dispatch call (which would embed the JSON representation of each player associated with the team under the :players key) by writing a custom method.</p>

<p>Note that you get access to an &#8216;object&#8217; variable within a given serializer, which returns the related model object (e.g., a given team in this example) and would be the same as referencing &#8216;self&#8217; within the corresponding model file.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TeamSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:team_name</span><span class="p">,</span> <span class="ss">:date_updated</span><span class="p">,</span> <span class="ss">:multimedia</span><span class="p">,</span> <span class="ss">:team_url</span><span class="p">,</span> <span class="ss">:stadium_address</span><span class="p">,</span> <span class="ss">:finances</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:players</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:games</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:current_user</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:scope</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">team_name</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">city</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">date_updated</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">updated_at</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">team_url</span>
</span><span class='line'>      <span class="s2">&quot;http://www.nfl.com/</span><span class="si">#{</span><span class="n">obje</span><span class="o">.</span><span class="n">ctcity</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">stadium</span>
</span><span class='line'>      <span class="n">stadium</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="n">stadium</span>
</span><span class='line'>      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">stadium</span><span class="o">.</span><span class="n">address</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">stadium</span><span class="o">.</span><span class="n">city</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">stadium</span><span class="o">.</span><span class="n">state</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">stadium</span><span class="o">.</span><span class="n">zip</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">multimedia</span>
</span><span class='line'>      <span class="n">object</span><span class="o">.</span><span class="n">team_logo</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">players</span>
</span><span class='line'>      <span class="n">object</span><span class="o">.</span><span class="n">players</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">player</span><span class="o">|</span> <span class="o">[</span><span class="n">player</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">number</span><span class="p">,</span> <span class="n">player</span><span class="o">.</span><span class="n">age</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">finances</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">current_user</span><span class="o">.</span><span class="n">is_admin?</span>
</span><span class='line'>        <span class="p">{</span><span class="ss">:revenue</span> <span class="o">=&gt;</span> <span class="n">object</span><span class="o">.</span><span class="n">revenue</span><span class="p">,</span> <span class="ss">:profit</span> <span class="o">=&gt;</span> <span class="n">object</span><span class="o">.</span><span class="n">profit</span><span class="p">,</span> <span class="ss">:costs</span> <span class="o">=&gt;</span> <span class="n">object</span><span class="o">.</span><span class="n">costs</span><span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="p">{}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the controller, make sure that you add a respond_to block that specifies a json format.JSON responses to requests that hit the &#8216;#show&#8217; action will be translated by the TeamSerializer class and formatted accordingly.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># teams_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TeamsController</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Controller</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@team</span> <span class="o">=</span> <span class="no">Team</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="vi">@team</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice too that I use the &#8216;current_user&#8217; helper method (a method that I would typically define in my application controller to reference the currently logged in user) to restrict the access level to a team&#8217;s financial data only to team administrators. In order to have access to this method, I need to delegate the current_user method call to the scope object, which I can specify in my application controller like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># application_controller.rb</span>
</span><span class='line'><span class="n">serialization_scope</span> <span class="ss">:view_context</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rails will automatically look for a TeamSerializer file when it publishes JSON, but if you want to specify a customized serializer, you can indicate it in your model file, like so, assuming you also change the serializer name to match:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># team.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Team</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">active_model_serializer</span>
</span><span class='line'>      <span class="no">FootballTeamSerializer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, specify the custom serializer within the controller action call by passing a :serializer => :custom_serializer key-value into the render call, like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">:json</span> <span class="o">=&gt;</span> <span class="vi">@team</span><span class="p">,</span> <span class="ss">:serializer</span> <span class="o">=&gt;</span> <span class="no">FootballTeamSerializer</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve posted a few useful links below that go over how to start using serializers in your application (surprise surprise, there&#8217;s even a RailsCast on ActiveModel::Serializers).</p>

<p>As for testing these serializers, I&#8217;ve been testing my serializer classes using model specs with Rspec. I&#8217;ve used OpenStruct to create mock objects within the spec, just to make sure that the resulting JSON is correctly formatted. I&#8217;ve also been meaning to add integration tests so that the full request-response cycle is validated, not just the JSON API endpoint.</p>

<p>If you&#8217;re looking for more information, here are some helpful links that explain further the benefit of using ActiveModel::Serializers in building well-structured JSON for your API.</p>

<p><a href="http://robots.thoughtbot.com/post/50091183897/fast-json-apis-in-rails-with-key-based-caches-and" target="_blank">Thoughtbot on Fast JSON APIs</a></p>

<p><a href="http://www.ruby-doc.org/gems/docs/a/active_model_serializers-0.6.0/ActiveModel/Serializer.html" target="_blank">Documentation on ActiveModel::Serializers</a></p>

<p><a href="http://byroot.github.io/ams-slides/#/" target="_blank">Helpful Slides</a></p>

<p><a href="http://yehudakatz.com/2010/01/10/activemodel-make-any-ruby-object-feel-like-activerecord/" target="_blank">Yehuda Katz on Serialization</a></p>

<p><a href="http://railscasts.com/episodes/409-active-model-serializers" target="_blank">Active Model Serializers Railscast</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Five Lessons Learned On The Job]]></title>
    <link href="http://eewang.github.com/blog/2013/07/14/lessons-learned-on-the-job/"/>
    <updated>2013-07-14T04:52:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/07/14/lessons-learned-on-the-job</id>
    <content type="html"><![CDATA[<p>Last week I started my job at the New York Times. And while I&#8217;ve learned a lot over my first week, I feel it necessary to write a post on what I learned working at 8to18 for four weeks. As my first actual developer gig, working at 8to18 has helped me grasp what it means to be a professional developer, and while I undoubtedly still have a lot to learn, I felt better prepared going into my job at the NYT having worked at a start-up for a short period of time. Here are a few lessons that I&#8217;ve learned now that I&#8217;ve had a chance to explore an existing code base for a non-trivial web application that has an active userbase.</p>

<!--more-->


<p><strong>1) Make git commits informative</strong></p>

<p>Git commits should communicate your intent as a developer through both the code changed within a given commit and the associated commit message. I&#8217;ll try to include active verbs in my commit messages and separate sub-units of work by semi colons (e.g., something like &#8220;adds functional tests, refactors model code&#8221;). At 8to18, Jira was the primary tool for workflow management, so every code commit reflected a specific Jira issue. Adding the Jira issue number to my commit messages and specific language preceded by a hashmark allowed for tighter integration between Github and Jira. Initially, this was difficult for me as I had admittedly been sloppy with my commits at Flatiron, where I would fix whatever I saw that was wrong rather than noting it in Trello or Github issues and reverting back to fix it later in a different git branch. Working in a professional development environment has shown me the communicative value of tight, focused git commits with informative messages.</p>

<p><strong>2) Its (almost) all about forms</strong></p>

<p>A wise teacher (i.e., Avi) once said, &#8220;90% of web development is just building forms.&#8221; I found this to be especially true in the work I did for 8to18, which consisted primarily of bug fixes and feature developement for their registration application. Used by parents and school administrators to register students for extracurriculars and sports, the registration app has easily been the most complex set of forms that I&#8217;ve worked with. And I say &#8220;set of forms&#8221; rather than just &#8220;forms&#8221;, because the app has an added twist by enabling admins to create their own forms on the fly - adding and removing form steps depending on the particular sport or activity in question. Furthermore, the app had to address idiosyncratic use cases  specific to certain schools (e.g., schools in North Carolina require prospective athletes to note their felony conviction history before registering whereas other states do not have that requirement).</p>

<p>Building this app in a modular way required the use of not just the domain models that contain the core business logic but a set of support modules to perform specific tasks like validate, present or format data. Form workflow follows a certain pattern - users input information, information is checked and validated, then that information is used elsewhere in the application. This pattern isn&#8217;t inherently difficult to implement in Rails as the framework provides a lot of helpers and guidance to get forms up and running quickly. Yet knowing which components of the workflow can be abstracted into a module or class to enable user flexibility and minimize the added work needed when requirements change (as they most certainly will), therein lies the challenge of building usable, scalable forms and seems to come with just more experience.</p>

<p><strong>3) Testing is like eating your vegetables</strong></p>

<p>Learning to write test code before implementation code has not been easy. Admittedly, I&#8217;m not quite at full test-driven development; I&#8217;m closer to test-and-implement-at-the-same-time development. Writing tests can be frustrating - I&#8217;ve spent a good chunk of time banging my head against the wall trying to write meaningful tests. And while its not always fun to write tests, you have to do it, and you generally feel better after writing meaningful, passing tests.</p>

<p>Also, I&#8217;ve learned that not all tests are made equal. I&#8217;m more willing to write unit tests rather than functional or integration tests, as my frustration level rises when I&#8217;m faced with a number of preconditions just to get certain controller actions to be triggered (e.g., before filters, login requirements, etc.). Unit tests are generally easier for me to write - the universe of dependencies is smaller and the model layer is the business logic of the application. Coming in to work on an existing application, much of the model code had already been written, so I worked a lot in the controllers - utilizing existing model methods to produce new functionality. Over the course of the 4 weeks at 8to18, however, I&#8217;ve come to appreciate the value of good tests in building a resilient application. They&#8217;ve also come in handy as documentation - when I&#8217;m not sure what a model or controller is intended to do, I&#8217;d revert to the tests to provide clues.</p>

<p><strong>4) Metaprogramming isn&#8217;t always the answer</strong></p>

<p>In my zeal to try new programming techniques that I&#8217;ve learned, I&#8217;ve tended to see metaprogramming techniques as the end goal when writing code - good practice regardless of the context. However, I&#8217;ve learned that while metaprogramming can reduce the absolute number of lines of code in your application, it can come at the expense of readibility for other developers on your team. In some instances, this is unavoidable. Whenever I&#8217;ve explored the Rails source code, for example, the sheer amount of metaprogramming makes it difficult for me to grasp what&#8217;s going on. At the same time, that code gives Rails the out-of-the-box functionality that makes it so easy to get apps up and running. I can imagine that writing that customizable functionality into Rails without using metaprogramming would be practically impossible.</p>

<p>What matters the most is balancing the readibility of normal code with the power and flexibility of metaprogramming. Like anything in the world of programming, its all about the right tool for the job. For a framework like Rails, with a core group of contributors and a wide universe of use cases, metaprogramming is essential. However, for a smaller team with new developers and a more defined set of uses cases, metaprogramming could be more detrimental than helpful.</p>

<p><strong>5) Commercial concerns trump all</strong></p>

<p>While clean, beautiful code is an ideal worth aspiring to, at the end of the day, its still subordinate to the commercial needs of the product or business. For example, usage of the registration app that I&#8217;m working tends to be lumpy and clustered in certain months of the year (e.g., August, right before the start of the school year). Spending weeks to write perfect code for a feature could actually be detrimental if that means its release is pushed beyond the period of peak usage.</p>

<p>Knowing when to focus on great code versus just get something working and out the door is something I think Flatiron positioned me well to understand. Coming from a non-traditional coding background (i.e., didn&#8217;t take a computer science class in college), I feel like I have a good sense of commerciality when it comes to building products for actual customers. Working at 8to18 just reinforced my understanding of code as a tool to solve real world problems; when writing beautiful code rather than finding a solution to the problem at hand becomes the end goal, that&#8217;s when you need to recalibrate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing Web Applications with 8to18 Media]]></title>
    <link href="http://eewang.github.com/blog/2013/06/11/developing-web-applications-with-8to18-media/"/>
    <updated>2013-06-11T20:49:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/06/11/developing-web-applications-with-8to18-media</id>
    <content type="html"><![CDATA[<p>I&#8217;ll admit it - I&#8217;ve been slacking the past few weeks about blogging. Most of what I&#8217;ve been doing since mid-May since my job search concluded has been enjoying NYC, hanging out with friends and doing a some Javascript learning. Its tough to keep up the pace of Flatiron after the end of the program. While I&#8217;ve still be trying to code every day and spend quality time learning Javascript and Backbone, I&#8217;ve taken time to relax and enjoy myself since I&#8217;ll have many more years of working ahead of me and increasingly less time to just live and enjoy the city.</p>

<!--more-->


<p>However, also like Flatiron, all good things must come to an end, so since Monday, I&#8217;ve been working at a startup called 8to18 Media in Lombard, IL (~30 mins west of Chicago) as a contract developer. My brother works as the co-head of engineering at 8to18, which builds web applications for high school activities (e.g., sports, clubs, summer camps, etc.), and they agreed to bring me on for a month before I start at the NYT to work on their backlog of bug fixes and feature requests. For me, I&#8217;m excited for the opportunity to get back into the habit of daily coding and to learn more about how to be a professional developer. While the 6 or so free weeks post-Flatiron were great (well, at least the 3 or so since wrapping up the job search process), I&#8217;ll admit that I was getting a bit antsy and was itching to get back into coding and learning every day. I hope that this experience will give me momentum leading up to my NYT job this July.</p>

<p>For example, in just the first few days on the job, its been great to learn more about the project management aspects of being a developer. I&#8217;m working on 8to18&#8217;s registration application, which is a Rails app that parents and schools use to register children in activities. The app is under active development and usage, so its been great to see how customer feedback directly affects development. 8to18 uses a project management tool called Jira, which is similar at a high level to Trello (used by the Handrai.se team at Flatiron) but much more robust and full featured. Jira syncs with Github and commits are pulled into a dashboard newsfeed that shows what everyone on the team is working on. It also provides cool analytics on which tickets have been assigned, what their status is and what else is scheduled in the queue.</p>

<p>Compared to the group work at Flatiron, the git process here is more rigorous. I&#8217;ve learned how to keep my commits focused on a single issue; rather than cleaning up every unrelated error I see when going into the code to fix a bug, I&#8217;m trying to get into the habit of creating Jira tickets. This makes the bug fix commit as limited as possible, which minimizes the risk of introducing more bugs. Each commit message is prefixed with a Jira ticket number (e.g., REG-100 for the 100th ticket under the &#8220;Registration&#8221; project) and a hashtag that can then be read by the Jira system and allocated accordingly. For example, a #resolve hashtag appended to a commit message will automatically resolve the issue in Jira when the commit is pushed to Github. At Flatiron, our commits (at least mine) may not have had the most informative messages, which made them more difficult to tie to a specific issue, bug or feature. Also, we tended to make batch commits that included a lot of unrelated code changes in one commit. At 8to18, I&#8217;m trying to get into the habit of having smaller, more focused commits that are easier to audit and test.</p>

<p>Speaking of testing, another habit that I&#8217;m learning is being more vigorous about writing tests. 8to18 emphasizes test-driven development, so I&#8217;m learning a ton about how to think about the implementation code I&#8217;m writing through the lens of Rspec tests. Yesterday, I wrote about 5 lines of code in a Rails controller that I had to support with approximately 20 lines of test code to confirm expected behavior in edge case situations. While it took me more time to wrap up the bug fix, I came out more confident in my code because I had tests to support the functionality.</p>

<p>My contract work at 8to18 will end around July 4 for a total of four weeks, after which I&#8217;ll start my job at the NYT. I&#8217;m happy to have the opportunity to code in a professional work environment and learn more about developer best practices at 8to18 before starting my full time job later this summer.</p>

<p>&#8211;
<em>Correction: 8to18 uses the default Rails testing framework (TestCase) rather than Rspec</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I'm Learning Javascript]]></title>
    <link href="http://eewang.github.com/blog/2013/05/24/how-im-learning-javascript/"/>
    <updated>2013-05-24T07:45:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/05/24/how-im-learning-javascript</id>
    <content type="html"><![CDATA[<p>For my job at the NYT that I&#8217;ll be starting in July, I&#8217;ll likely be working a lot in Ruby and Javascript. At the Flatiron School, the focus was on becoming a back-end Ruby developer, and while we learned our fair share of JavaScript and jQuery, it was always in the context of a Ruby or Rails application. Most of the front-end focus gravitated toward DOM manipulation and traversal using jQuery and less on the functionality of Javascript as a programming language (e.g., objects, closures, inheritance / composition, etc.).</p>

<!--more-->


<p>Given that I expect that Javascript will be a substantial component of my role at the NYT, I&#8217;m planning to spend much of the next 5 weeks or so until I start refining and building my Javascript skillset. I&#8217;ve been cruising the Web accumulating JS learning resources, and I think I put together a solid syllabus.</p>

<p>I&#8217;m thinking of learning Javascript from three perspectives. First, Javascript is a full-fledged programming language and it should be learned as such. This means exploring data structures, iteration, objects, etc. in Javascript much the same way we did for Ruby. Second, Javascript is the language of the Web browser, which means learning DOM manipulation and front-end user interaction. Finally, Javascript has seen an explosion of front-end MVC frameworks in the past few years, the most well-known of which include <a href="http://backbonejs.org/" target="_blank">Backbone.js</a>, <a href="http://emberjs.com/" target="_blank">Ember.js</a> and <a href="http://angularjs.org/" target="_blank">Angular.js</a>. These frameworks help you structure and organize your Javascript, and generally improve the user&#8217;s experience as they can decrease the server communication overhead involved in any modern, database-driven application.</p>

<p>Here are a few of the ways I&#8217;m planning to practice writing and understanding Javascript over the next few weeks:</p>

<p><strong>Build Ruby Methods</strong></p>

<p>One of the benefits of coding in Ruby is that it provides a lot of the Enumerable methods like #collect and #inject that abstract away the need to write a basic iterator like a for loop. While these abstract methods provide a considerable amount of functionality in a terse, human-readable syntax, its easy to take them for granted. Thus, I&#8217;m planning to practice Javascript by writing the JS equivalent of the Ruby methods I use most frequently but do not have parallels in core JS (not considering jQuery or other libraries). Hopefully, this will force me to dive deep into both the Ruby and Javascript documentation and build up my Javascript muscle memory.</p>

<p><strong>Solve Project Euler</strong></p>

<p>Completing <a href="http://projecteuler.net" target="_blank">Project Euler</a> problems using Ruby has been a great way for me to strengthen not only my Ruby scripting skills but also my software design understanding, as I always try to properly encapsulate my Project Euler solutions and make the solution object-oriented. I plan to use the same approach to learning Javascript. First, I&#8217;ll translate the Project Euler problems that I&#8217;ve already solved from Ruby into Javascript, if only as a way to get in the habit of building JS objects using the constructor and prototype patterns. Then, I&#8217;ll work on new Project Euler problems and do the reverse translation - Javascript to Ruby. This way, I&#8217;ll become better at moving seamlessly between JS and Ruby, which will undoubtedly help me in my role at the intersection of the front-end and back-end.</p>

<p><strong>Read Books</strong></p>

<p>I&#8217;ve solicited advice from a number of developers on what are the best Javascript books to read, and here&#8217;s the list that I&#8217;m planning to go through to learn JS:</p>

<ul>
<li>&#8220;Professional Javascript for Web Developers&#8221; by Nicholas Zakas</li>
<li>&#8220;Developing Backbone.js Applications&#8221; by Addy Osmani</li>
<li>&#8220;Javascript Patterns&#8221; by Stoyan Stefanov</li>
<li>&#8220;Object Oriented Javascript&#8221; by Stoyan Stefanov</li>
</ul>


<p>These four books seem to be relatively accessible to developers first exploring Javascript, yet also are challenging enough to keep me engaged and constantly learning. I think these books focus more on software design and code patterns in Javascript, which I like, rather than just DOM manipulation. I learn best by understanding the core of a language so that I can use libraries like jQuery knowing full well how its implemented under the hood. Much like how the Flatiron School teaches Rails only after teaching Ruby, SQL, ORMs, etc., I&#8217;d like to be proficient in core Javascript as a prerequisite to becoming an expert in libraries/frameworks like jQuery or Backbone.</p>

<p><strong>Complete Online Tutorials (Codecademy, Code School)</strong></p>

<p>When I first started to learn how to code, I learned primarily through in Codecademy and Code School tutorials. Those were helpful in providing a general overview to Javascript, but with a lot of hand-holding. Also, neither Codecademy and Code School have perfect interpreters, so there are times when you write perfectly valid code, but you can&#8217;t pass the challenge because of some quirk or bug in the in-browser interpreter. This led to much frustration when I was first learning how to code, and the content I learned via Codecademy, while useful, felt somewhat disjointed as I was chained to working in the browser interpreter they provided.</p>

<p>Now that I know how to code though, going back through Codecademy and Codeschool has been a great way to solidify core concepts. I still feel like they hold your hand too much when completing code challenges, but I can get more out of the tutorials now that I have a stronger foundation in code. Codecademy has a pretty solid Javascript course, and Code School offers tutorials in Backbone and jQuery that I&#8217;ve found useful.</p>

<p><strong>Work on a Project</strong></p>

<p>This is a bit of no-brainer as a learning technique. Completing a project will help me most with learning front-end frameworks. I am familiar with Angular, having used that in project, but I&#8217;m planning to turn my focus to Backbone, given that the NYT uses Backbone pretty heavily for its front-end code (perhaps because Jeremy Ashkenas, the creator of Backbone, used to be a developer on the NYT&#8217;s Interactive News team). I&#8217;m still tossing around a few ideas of what I could build, but this Backbone tutorial for an <a href="http://coenraets.org/blog/2011/12/backbone-js-wine-cellar-tutorial-part-1-getting-started/" target="_blank">interactive wine cellar</a> seems like a good project that I could translate to another domain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Landing the Dream Job]]></title>
    <link href="http://eewang.github.com/blog/2013/05/18/landing-the-dream-job/"/>
    <updated>2013-05-18T23:40:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/05/18/landing-the-dream-job</id>
    <content type="html"><![CDATA[<p>I&#8217;m happy to announce that I will be joining the New York Times as a software developer this July. I&#8217;ll be working on the new Emerging Technologies team, which is a team tasked with building a new suite of web and mobile technologies for consuming NYT content. The small group consists of developers, designers, product folks and journalists/editors. I&#8217;m extremely excited to join the world&#8217;s newspaper of record and a talented developer team that will define the future of such a storied institution. I feel humbled and honored for the opportunity, and I&#8217;m eager to explore the opportunities to grow at an organization like the NYT.</p>

<!--more-->


<p>Throughout the last three weeks, I&#8217;ve had the opportunity to speak with a variety of start-ups and technology firms. While there are a ton of great start-ups out there doing amazing work, I couldn&#8217;t have asked for a better opportunity to learn more about the craft of code and work at the epicenter of a rapidly-changing journalism industry that continues to grapple with the effects of technology on its business and product model. I&#8217;ve been blessed to find a position that can combine my professional experience serving as an editor at the <a href="http://dukechronicle.com" target="_blank">Duke Chronicle</a> and working on investment products at <a href="http://www.blackstone.com/our-businesses/aam/hedge-fund-solutions-(baam)" target="_blank">Blackstone</a>. I&#8217;ll likely be coding mostly in Ruby and Javascript, and will have the chance to learn other languages and technologies, like Objective-C. I&#8217;m incredibly thankful to Avi &amp; Co. and my classmates at <a href="http://flatironschool.com/" target="_blank">the Flatiron School</a> for not only teaching me how to code, but showing me how code can be equal parts analytical and creative.</p>

<p>The job will undoubtedly be challenging, having to build products for a newspaper that gets <a href="http://en.wikipedia.org/wiki/The_New_York_Times#Online_activity" target="_blank">30 million unique visitors per month</a>, but I&#8217;m eager for the challenge and excited for the growth potential at the NYT!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metaprogramming Ruby and Rails Antipatterns (Part 2 of 2)]]></title>
    <link href="http://eewang.github.com/blog/2013/05/17/metaprogramming-ruby-and-rails-antipatterns-part-2-of-2/"/>
    <updated>2013-05-17T08:45:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/05/17/metaprogramming-ruby-and-rails-antipatterns-part-2-of-2</id>
    <content type="html"><![CDATA[<p>I wrapped up Rails Antipatterns about a week ago shortly after reading Metaprogramming Ruby. Reading both books side-by-side has helped me better understand the relationship between Ruby and Rails and how Ruby&#8217;s metaprogramming capabilities provide the &#8220;magic&#8221; that Rails is often associated with. Rails Antipatterns is a great book that uses commonly abused patterns in Rails to illustrate refactoring opportunities. I was able to complete the book a few weeks back, but I&#8217;ve been keeping busy with the interview process (more on that in another post) and side projects such that I haven&#8217;t been able to blog as much as I would have wanted. That&#8217;s been one of the hardest parts of the interview process in that I just have less time to actually code, blog and read. Anyways, I figured that I&#8217;d write down some of my thoughts on Rails Antipatterns alongside Metaprogramming Ruby and the areas where Antipatterns helped me the most in structuring my Rails code.</p>

<!--more-->


<p>I recommend Rails Antipatterns as a great way to improve your &#8220;code smell.&#8221; It provides practical advice to how to structure your code and general best practices when developing a Rails application. Compared to Metaprogramming Ruby, you won&#8217;t get the same depth into Ruby&#8217;s object model and method dispatch process in Rails Antipatterns, but then again, that&#8217;s not the purpose of the book. Rails Antipatterns will tell you that you should use &#8220;delegate_to&#8221; as a way to reduce method chaining for your domain objects, whereas Metaprogramming Ruby will explain the fundamentals of how &#8220;delegate_to&#8221; actually works and less about the day-to-day use cases for the macro. One of my favorite parts of Metaprogramming Ruby is that it goes in depth in the second half of the book into how ActiveRecord creates its so-called &#8220;magical&#8221; finder methods dynamically using #method_missing. Conversely, Rails Antipatterns provides practical advice on when to use those macros and helper methods that Rails provides. Antipatterns explains what&#8217;s in the Rails toolkit and how to use it, while Metaprogramming explains how the toolkit works.</p>

<p>I thought Antipatterns was overall a useful book, but at times I found it a bit disjointed. More like a compilation of various how-to guides rather than a coherent instruction flow. Whereas Metaprogramming has the core theme of the Ruby object model, Antipatterns is less grounded on an overriding programming construct and is driven more by observation of bad habits by the average Rails programmer (hence the title). Its still a useful book, but one that I think can be valuable even if you just skim to the sections that you struggle with the most and read the book in bits and parts. Here were a few of the sections that I found most useful to remind myself of a few overarching principles in application development - keep code DRY (don&#8217;t repeat yourself), minimize and manage dependencies and properly encapsulate logic.</p>

<p><strong>Use view helpers</strong></p>

<p>When I first started building applications with Rails, I tended to put logic in the first place where I could fit it in. Unfortunately, this often meant in my application views. Over time, my views would look like convoluted piles of mixed in HTML and ERb code with loops and conditionals alongside div tags and class attribute declarations. Antipatterns explains that one way to avoid this tendency is to move presentation logic into view helpers. Rails provides all sorts of helpful methods to mimic HTML markup in view helpers. For example, #content_tag is an instance method created by Rails that can be used to define a block of markup. The first argument is the HTML tag as a symbol, followed by any number of attributes structured as a hash that you want to appear in the markup (e.g., :class => &#8220;new_project&#8221;), followed by a block, like so:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rss_link</span><span class="p">(</span><span class="n">project</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">content_tag</span> <span class="ss">:div</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;feed&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">link_to</span> <span class="s2">&quot;Subscribe to these </span><span class="si">#{</span><span class="n">project</span><span class="o">.</span><span class="n">name</span> <span class="k">if</span> <span class="n">project</span><span class="si">}</span><span class="s2"> alerts.&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="n">alerts_rss_url</span><span class="p">(</span><span class="n">project</span><span class="p">),</span>
</span><span class='line'>            <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;feed_link&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code does the same as the below HTML, but instead extracts the logic into a Ruby method that can then be applied elsewhere in your views. This makes the code easier to maintain by centralizing any updates into one file rather than having to wade through multiple ERb files to pick out the same block of code to fix.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;feed&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% if @project %&gt;
</span><span class='line'>    <span class="err">&lt;</span>%= link_to &quot;Subscribe to #{@project.name} alerts.&quot;, project_alerts_url(@project, :format =&gt; :rss), :class =&gt; &quot;feed_link&quot; %&gt;
</span><span class='line'>  <span class="err">&lt;</span>% else %&gt;
</span><span class='line'>    <span class="err">&lt;</span>%= link_to &quot;Subscribe to these alerts.&quot;,
</span><span class='line'>    alerts_url(format =&gt; :rss), :class =&gt; &quot;feed_link&quot; %&gt;
</span><span class='line'>  <span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In fact, the #rss_link helper method can be abstracted even more by replacing the #link_to macro with another #content_tag macro. #content_tag (documentation <a href="http://apidock.com/rails/ActionView/Helpers/TagHelper/content_tag" target="_blank">here</a>)is an abstracted method that can be used to define other view methods like link_to or image_tag. All you have to do is define the HTML tag in the first argument, the content in the second argument, then pass in all the other arguments as a hash after that. Its useful in structuring HTML in a friendly Ruby syntax, and can be especially helpful in creating view helpers that provide semantic method names to blocks of logic.</p>

<p>This last point is why I like using view helpers so much. The larger an application becomes, the more difficult it is to look at code in views and understand what&#8217;s going on. For example, there may a block of ERb code that loops over a collection of objects and conditionally inserts a div element if a certain condition is met. Overtime, relying on this block of code can get cumbersome, especially as more conditionals are added, which further decreases the readability of code. View helpers provide a name to a block of logic so that people reading your code have insight into what that code is meant to do. They properly encapsulate logic and provide semantic meaning to what is at first glance just a bundle of HTML tags and Ruby code.</p>

<p><strong>Organize finder methods into scopes</strong></p>

<p>When I was building my TicketTracker side project during the first half of the Flatiron School, I quickly realized that I needed to have an easy way to query my database and organize / filter the results. ActiveRecord provides a helpful #scope class macro that can be used to chain together database query logic that you find yourself using regularly. For example, if you find yourself always retrieving objects from the database that are less than 5 days old, its easy in Rails to define a scope called &#8220;recent&#8221; that you can then apply as a class method to your model (e.g., Model.recent) rather than using (Model.where(:timestamp &lt; Time.now - 5.days) ). There&#8217;s a good deal of documentation on scopes in Rails, but at its core, scopes are just class methods. Here is a <a href="http://blog.plataformatec.com.br/2013/02/active-record-scopes-vs-class-methods/" target="_blank">great blog post from Platformatec</a> about using scopes and class methods to organize your database queries.</p>

<p><strong>Apply callback macros</strong></p>

<p>Rails has a slew of useful class macros that are executed during the ActiveRecord saving process. Similar to how Ruby has a few built in methods that are automatically triggered when a module is included (#self.included) or a method is added (#method_added), methods which conveniently allow for some pretty cool metaprogramming techniques, Rails also has methods that it looks out for when saving to the database. These callback macros include #before_validation, #after_validation, #before_save and #after_save. You can find a full listing of them <a href="http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html" target="_blank">here</a>.</p>

<p>For example, when building ViewFinder, we wanted to add the address of a  geotagged photo to the database immediately after the photo was saved. This way, we could always query the database by address as well as by coordinates rather than calculating the address at runtime. This was the result of decision that we had to make - do we save the address data to the database or calculate it whenever we need to use it? From a performance perspective, we figured that given that we were planning to make regular use of the address data (e.g., when displaying the actual location of a guessed photo), it would be more optimal to just retrieve static data from the database rather than using Geocoder each time to determine the address from the coordinates (which itself would make a Google Maps API call, so it would be slower than a database call).</p>

<p>Here is what the method looks like to convert coordinates to address. This was part of the Locatable (Locateable?) module that was mixed into the photo and guess models to enable point mapping.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Locatable</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">generate_street_address</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">latitude</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">longitude</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="no">Geocoder</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">latitude</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">longitude</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">address</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">save</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using a callback macro, we could ensure that Rails would execute the #generate_street_address method whenever a new photo was deemed valid to our database by including the following into any model that included Locatable instance methods:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Photo</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="n">after_validation</span> <span class="ss">:generate_street_address</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Callback macros are useful for cleaning and validating data and ensuring that objects are saved to the database are properly vetted. If you&#8217;re saving the results of an API call as we were doing for ViewFinder, these callback macros can programmatically insert your application logic into the chain of events in converting the raw JSON result of an API call to application data.</p>

<p>Overall, Antipatterns provides useful nuggets of advice when creating Rails applications. That said, its important to know what to expect when reading the book - you won&#8217;t get much in terms of explaining the inner workings of Rails or how Ruby code can generate all those dynamic finder and callback methods. Best go to Metaprogramming Ruby for a full walk-through of the Ruby object model. But, if you&#8217;re looking for immediate, practical advice on how to leave behind bad habits, Antipatterns is a useful guide. When I started reading Antipatterns, I would only have to read a few pages before I could apply what I was reading to an application I was building. Think of it as a what-not-to-do guide to Rails and you&#8217;ll be able to apply its instructions to an application right away.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metaprogramming Ruby and Rails Antipatterns (Part 1 of 2)]]></title>
    <link href="http://eewang.github.com/blog/2013/04/29/metaprogramming-ruby-and-antipatterns-in-rails/"/>
    <updated>2013-04-29T15:03:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/04/29/metaprogramming-ruby-and-antipatterns-in-rails</id>
    <content type="html"><![CDATA[<p>I recently finished reading two programming books in parallel - Metaprogramming Ruby and Rails Antipatterns. As Ruby/Rails books go, the two could not be further apart. Metaprogramming Ruby focuses on explaining the Ruby object model and how core Ruby is constructed in order to enable you as a Ruby programmer to unlock functionality that isn&#8217;t immediately obvious. Conversely, Rails Antipatterns is more about focusing on the bad coding habits most new Rails developers experience and simple, tangible ways to avoid those  pitfalls. One book explains core Ruby (although also touches some on Rails), while the other applies specifically to Rails. One book goes as deep as possible into Ruby&#8217;s construction as a language, while the other aims to hit developers in their day-to-day programming habits. Arguably, Rails Antipatterns is more &#8220;practical&#8221; and Metaprogramming Ruby is more &#8220;theoretical,&#8221; as its generally easier to find more daily code applications of Rails Antipatterns than Metaprogramming Ruby. This post will focus on Metaprogramming Ruby and the next will focus on Rails Antipatterns.</p>

<!--more-->


<p>Reading the two books in tandem, however, has forced me to move quickly between Rails and Ruby. Its oftentimes easy to forget that Rails is just a Ruby library at its core and is constructed using many of the metaprogramming techniques described in Metaprogramming Ruby. While the two books are pretty different in their construction, they&#8217;ve helped me better understand how programming works generally along all levels of abstraction - from the Ruby core object model to the abstract class macros provided in Rails. In many ways, Metaprogramming Ruby picks up where Rails Antipatterns ends up. Reading the latter might inspire you to begin using the <a href="http://apidock.com/rails/Module/delegate" target="_blank">&#8220;delegate &#8230; to&#8221;</a> pattern in your Rails applications as a way to avoid long method chains, but Antipatterns won&#8217;t go into the nitty gritty of how Rails implements that class macro. Metaprogramming, however, will go pretty deep into how a macro like &#8220;delegate &#8230; to&#8221; is implemented and how it uses dynamic method definition to create methods in the class in which the &#8220;delegate&#8221; method is called.</p>

<p>Metaprogramming is a great way to act on the mantra that good developers take complexity and deliver simplicity. A simple definition for metaprogramming is code that writes code. An application that actively uses metaprogramming seems simple on the outside (like magic!) but is quite complex on the inside. Arguably the best example for this in the Ruby community is the eponymous Ruby on Rails. Rails presents simplicity to users; for example, whenever you create model and corresponding table and call a finder method (e.g., #find_by_name()), these finder methods are generated dynamically by Rails. The internal source code for these finder methods use liberal doses of metaprogramming and thus are tough to decipher, but the benefit of designing the application in that way means that users can build quickly using a huge library of &#8220;free&#8221; methods provided by Rails (specifically ActiveRecord in this example) without thinking too much about the method implementation.</p>

<p>I would definitely recommend reading Metaprogramming Ruby if you feel like you have a decent grasp of the language and would like to accelerate your learning. If you feel like you don&#8217;t fully understand the concepts the first time you read it, don&#8217;t worry, just read it again. Then read it a third time. Metaprogramming Ruby is one of those books that you could read it multiple times and keep learning new things from it each time, since the material is dense and the opportunities to apply the concepts are not always obvious in every Ruby script or application. Here&#8217;s a quote from the book that I think explains the value of metaprogramming and tradeoffs to consider when applying the technique.</p>

<blockquote>
If you use it sparingly, metaprogramming can make your code more readable for humans—but it will probably make it less readable for programs such as refactoring engines or code analysis tools. Ruby’s extremely dynamic nature makes life very hard for such tools, and that’s why some IDE features that work great for static languages (such as finding all the calls to a method, renaming a variable, or jumping from a method usage to its definition) are difficult to implement well in Ruby. Add metaprogramming to the mix, and your poor IDE will be even more confused. That’s one of the fundamental trade-offs of metaprogramming (and, to a point, of dynamic languages). You have the freedom to write expressive, terse code, but to read that code, you need a human brain.
</blockquote>


<p>I try to explain some of the topics included in Metaprogramming Ruby below, but its difficult to take each of these independent of the other. The most valuable part of the book for me was the in-depth explanation of the overall structure of the Ruby language and how objects and methods work. I&#8217;m someone who likes to have an understanding of the broad, high-level context in which I work, and Metaprogramming Ruby provides that context so that whenever I&#8217;m looking at a piece of code, I feel like I have a better understanding now of what&#8217;s going on (e.g., What variables are in scope? What is &#8216;self&#8217;? What methods can be accessed?).</p>

<p><strong>Procs vs. Lambdas</strong></p>

<p>At a high level, procs and lambdas define blocks of code that can be executed when called. They are somewhat analogous to anonymous functions in Javascript. Procs and lambdas are generally used for the same purpose, but they have subtle differences between them:</p>

<p>1) Procs are more flexible when evaluating arguments vs. lambdas. For example, if you define 2 arguments for a proc and only call the proc with 1, the other will be considered nil, whereas for a lambda, the call will return an ArgumentError</p>

<p>2) The return value for a proc comes from the scope in which the proc itself was defined, whereas the return value for a lambda comes from the lambda block.</p>

<p>Lambdas tend to be the first choice for Rubyists because they&#8217;re more similar to methods in that they are strict about the number of methods they accept (the &#8216;arity&#8217; of a method) and exit when return is called. Both lambdas and Procs are part of the Proc class.</p>

<p><strong>Dynamic Methods</strong></p>

<p>Dynamic methods are a set of methods that can create or call methods when the actual name of the method is not known. I&#8217;ve listed out a few of the methods used to either create or call methods dynamically and apply them to the following example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">toy</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@favorite_toy</span> <span class="o">=</span> <span class="n">toy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">colors</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span>
</span><span class='line'>      <span class="n">define_method</span> <span class="n">arg</span> <span class="k">do</span>
</span><span class='line'>        <span class="s2">&quot;I am </span><span class="si">#{</span><span class="n">arg</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_call</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Sorry, we don&#39;t recognize the color </span><span class="si">#{</span><span class="n">method_call</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">colors</span><span class="p">(</span><span class="ss">:green</span><span class="p">,</span> <span class="ss">:blue</span><span class="p">,</span> <span class="ss">:red</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>    <span class="s2">&quot;You shouldn&#39;t be able to see me!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fido</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Fido&quot;</span><span class="p">,</span> <span class="s2">&quot;Ball&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>#send</em><br></p>

<p>The #send method is useful for whenever you want to call a method dynamically and are not sure of the method name at runtime. In the example above, a user can input a color among the three available options, and the #send method will figure out which method to call in the Dog class. Another use case for #send is to call private methods:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;What color do you want your dog?&quot;</span>
</span><span class='line'><span class="n">color</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span> <span class="c1"># =&gt; blue</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">fido</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="c1"># =&gt; I am blue</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">fido</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;private_method&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;You shouldn&#39;t be able to see me!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>#define_method and #define_singleton_method</em><br></p>

<p>These two methods are used to define instance methods and class methods, respectively. They are methods that, when executed, create other methods that can then be called on either an instance or class object. In the code above, I call a class method called &#8220;colors&#8221; at runtime. This class method takes in an arbitrary number of arguments (in this instance, 3 colors) and creates a method for each argument. The methods that get created then return the name of the method. Admittedly, this example is a bit contrived as the same behavior could be achieved by just passing a color argument into a method that returns the value of the color. However, using #define_method and #define_singleton_method can help keep code DRY if you find a certain pattern used repeatedly in a number of different methods in your code. For me, I&#8217;ve used #define_method and #define_singleton_method whenever I notice that I&#8217;m repeating code in methods where the only difference is a reference to another object or column.</p>

<p><em>#method_missing</em><br></p>

<p>&#8220;#method_missing&#8221; acts as a catch-all method for intercepting method calls that an object doesn&#8217;t know how to interpret. If a method is called on an object that doesn&#8217;t know how to respond to the method after Ruby goes through the method lookup chain (i.e., first going into the immediate class, then upward into modules, parent classes, etc.), Ruby will call the #method_missing method that&#8217;s part of the Kernal module and mixed into every Ruby object. By creating a #method_missing method, you can hijack Ruby&#8217;s call stack and redefine what gets executed or returned whenever an unknown method is called on an object.</p>

<p>In my example, I used #method_missing to serve as a catch-all for any colors that are not recognized by the Dog class. However, #method_missing can be used to define attributes dynamically:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@attributes</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">attribute</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">attribute</span> <span class="o">=~</span> <span class="sr">/=$/</span>
</span><span class='line'>      <span class="vi">@attributes</span><span class="o">[</span><span class="n">attribute</span><span class="o">.</span><span class="n">chop</span><span class="o">]</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@attributes</span><span class="o">[</span><span class="n">attribute</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows me to create any attribute of a dog that I want on the fly and #method_missing will create both a setter and getter for the method. This is possible because in the below example, &#8220;fido.legs = 4&#8221; is equivalent to fido.legs=(4), where &#8220;legs=&#8221; is the name of the method called on &#8220;fido&#8221; and &#8220;4&#8221; is the sole argument. When this method is first called, the Dog class doesn&#8217;t know how to respond to the method since there is no method called &#8220;legs&#8221;. Thus, the method call is directed to #missing_method, which then sets the attribute to the name of the method and sets the value to the first argument that is passed in.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fido</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Fido&quot;</span><span class="p">,</span> <span class="s2">&quot;Ball&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">fido</span><span class="o">.</span><span class="n">legs</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="n">fido</span><span class="o">.</span><span class="n">legs</span> <span class="c1"># =&gt; 4</span>
</span><span class='line'>
</span><span class='line'><span class="n">fido</span><span class="o">.</span><span class="n">bark</span> <span class="o">=</span> <span class="s2">&quot;BARK BARK&quot;</span>
</span><span class='line'><span class="n">fido</span><span class="o">.</span><span class="n">bark</span> <span class="c1"># =&gt; &quot;BARK BARK&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Binding Module</strong></p>

<p>One of my favorite gems in the Ruby universe is the <a href="https://github.com/pry/pry" target="_blank">Pry</a> gem. Pry is a debugging tool that allows you to enter into the local universe when code is run. Including &#8220;binding.pry&#8221; in a set of code will pry open the code at runtime and enable you to poke around and see how certain variables are defined or used. Its probably the gem I use the most - whenever I&#8217;m writing code, be it a full-blown Rails app or a simple Ruby script, Pry tends to be the first gem I include.</p>

<p>But even though I use the gem quite often, I didn&#8217;t exactly realize how it worked. Metaprogramming Ruby explains that &#8220;binding&#8221; is actually a method in Ruby that converts a scope into an object that can then be called at a later moment. This can be an incredible tool, as the use of the &#8220;binding&#8221; method in a block of code makes that scope portable for future use, even to the point where &#8220;self&#8221; can change based on the binding context.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">toy</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@favorite_toy</span> <span class="o">=</span> <span class="n">toy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_binding</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">binding</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">fido</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Fido&quot;</span><span class="p">,</span> <span class="s2">&quot;Ball&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">fido_scope</span> <span class="o">=</span> <span class="n">fido</span><span class="o">.</span><span class="n">get_binding</span>
</span><span class='line'><span class="n">snuffles</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Snuffles&quot;</span><span class="p">,</span> <span class="s2">&quot;Stick&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">snuffles_scope</span> <span class="o">=</span> <span class="n">snuffles</span><span class="o">.</span><span class="n">get_binding</span>
</span><span class='line'>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;puts @name; puts @favorite_toy&quot;</span><span class="p">,</span> <span class="n">fido_scope</span><span class="p">)</span> <span class="c1"># =&gt; Fido Ball</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;puts @name; puts @favorite_toy&quot;</span><span class="p">,</span> <span class="n">snuffles_scope</span><span class="p">)</span> <span class="c1"># =&gt; Snuffles Stick</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the &#8220;binding&#8221; is helpful for accessing a scope in an object-oriented manner. The binding method is defined within the Kernal module, which is mixed into Ruby&#8217;s Object class, from which all objects inherit. This is why you can use the binding method in any class, since all classes inherit the Kernal module functionality. Pry essentially adds functionality to the binding method and literally prys open the scope and creates an IRB-like environment out of a scope, which makes testing and debugging considerably easier than if there was not a binding method.</p>

<p><strong>Flat Scope</strong></p>

<p>Flat scope is used to enable the use of variables and methods defined outside of a traditional scope gate (e.g., a method definition, class or module). Variables defined outside of a block can be accessed within a block, so a nifty technique is to define a class via a block rather than a using the &#8220;class&#8221; keyword, as in the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dog</span> <span class="o">=</span> <span class="s2">&quot;Fido&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dog</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">define_method</span> <span class="s2">&quot;name&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">dog</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">myDog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">myDog</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; Fido</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is in contrast to the &#8220;normal&#8221; way of defining a class, which acts as a scope gate and prevents previously defined variables from being accessed within the class scope.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dog</span> <span class="o">=</span> <span class="s2">&quot;Fido&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">dog</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">myDog</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">myDog</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; ERROR: undefined local variable or method &quot;name&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Using alias_method</strong></p>

<p>The #alias method is a helpful way of changing method names while still maintaining the functionality of the old method name. It can also be used to modify programmer behavior; for example, #alias is used for deprecating functionality by providing warnings and advice on what other method to use instead of the called method, while still allowing users to call the old method.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="k">alias</span> <span class="ss">:size</span> <span class="ss">:length</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">length</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Please use #size to determine array element count from now on.&quot;</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Metaprogramming in Rails</strong></p>

<p>Rails makes heavy use of metaprogramming techniques to provide a huge amount of functionality out of the box whenever a new application is created. For example, one of the benefits of using Rails and ActiveRecord specifically is that ActiveRecord creates an array of attribute accessors and dynamic finder methods that match the columns in the database tables. If you have a User model that includes columns for name, date_of_birth and phone_number, ActiveRecord will create methods like User#find_by_name, User#find_all_by_date_of_birth and User#find_or_create_by_phone_number dynamically. How does ActiveRecord know what finder methods to create? Through metaprogramming, and specifically through the #method_missing method.</p>

<p>Whenever you first make a call to a dynamic finder method in Rails, #method_missing will get triggered. If you look at the source code for ActiveRecord::Base, you&#8217;ll find a class method called #method_missing, which hijacks the method call chain for Ruby and create finder methods if the method you are calling follows the find_by pattern. The finder methods are based on the table columns in the database. In the first call to a finder method, #method_missing will create the necessary finder methods in your application, so that the second time you call that finder method, it will execute an actual block of code that corresponds with that method rather than make a call to a ghost method within #method_missing. This pattern seems to be a theme within the construction of Rails - active use of #method_missing and ghost methods to create the potential for a lot of functionality, but to not create that functionality until its actually called as adding all possible functionality at runtime could slow down the application. Rails wants to make sure that you&#8217;re going to use a dynamic finder method before it actually adds the code to your codebase. Thus, the first call to a dynamic finder generates the actual method via #method_missing.</p>

<p>Its interesting to think about the design decisions that went into the construction of ActiveRecord. The first call to a dynamic finder method is to a ghost method within #method_missing. However, this first call is enough for Rails to infer that you probably want to use the ghost method again. At this point, Rails creates an actual method for you to use in the future. Accessing a real method is generally faster than accessing a ghost method. However, adding a ton of real methods can also make your application bloated, especially if you never use most of them. Knowing some more about metaprogramming has made me appreciate even more the construction of Rails and how it enables rapid application development.</p>

<p>I particularly like this excerpt from Metaprogramming Ruby, as I think it explains well design decision for ActiveRecord as it relates to creating dynamic methods.</p>

<blockquote>
If you look at the current optimized source code [for Rails], you can try to guess some of the motivations behind it. Calling a real method is faster than calling a Ghost Method, so Rails chooses to define real methods to access attributes. On the other hand, defining a method also takes time, so Rails doesn’t do that until it’s sure that you really want to access at least one attribute on your ActiveRecord objects. Also, define_ method() is known to be slower than def on some Ruby implementations (but not on others!), and that might be one reason why the authors of Rails opted to use Strings of Code to define accessors.

None of these considerations is obvious, however. As a rule, you should never optimize your code prematurely—whether it’s metaprogramming code or not.
The source code behind dynamic attributes proves that metaprogramming can either impair your system’s performance or help you optimize it. For example, if you find out that you’re slowing down your system by calling too many Ghost Methods, you can get some performance back by defining Dynamic Methods. So, when it comes to metaprogramming, performance generally is no more of an issue than it is with any other code.
</blockquote>


<p>Overall, I&#8217;d recommend cracking open Metaprogramming Ruby if you have a decent grasp of Ruby and want to really delve into the inner workings. It&#8217;s probably not the most practical book, in that you may not use many of the metaprogramming recipes on a day-to-day basis, but its great for providing an overall understanding of how the Ruby method lookup chain works, how different classes and modules interact, etc. That said, its a dense book, and it took me a while to get through. I&#8217;ll likely try and read it again at some point, as it feels like one of those books where you can read over and over again and keep discovering new and interesting nuggets of wisdom.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Recursion With Project Euler]]></title>
    <link href="http://eewang.github.com/blog/2013/04/28/using-recursion-with-project-euler/"/>
    <updated>2013-04-28T08:00:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/04/28/using-recursion-with-project-euler</id>
    <content type="html"><![CDATA[<p>I previously set a goal for myself to try and do one Project Euler problem every day. In retrospect, I think that goal was a little ambitious, what with all the coding, reading and blogging that I&#8217;m trying to do on a day-to-day basis. However, I was able to work in a problem earlier this week that helped me get a better grasp of using recursion in Ruby.</p>

<!--more-->


<p>For those who don&#8217;t know, recursion is a computer science concept that seems simple on its face, but can mask considerable complexity. A recursive function is basically a function that calls itself. You know how when you go to a barbershop and your barber puts a mirror up to the back of your head after the haircut? The resulting mirror-on-mirror effect that looks like a never-ending pyramid of the same image in increasingly smaller size is an example of recursion. Applying recursion in a Ruby script can be a powerful and succinct way of moving programmatically applying a pattern to a given problem until the solution is found.</p>

<p>However, using recursion can also lead to &#8220;call stack too deep&#8221; errors the same way that using a while loop without providing for some incrementor will lead to an infinite loop. Recursion can also be difficult to track mentally since each call to method is made within the execution of such method, just one &#8220;layer&#8221; above. This means that when the executing code finally reaches its terminating condition, it has to go &#8220;back&#8221; through all the previous calls to the same method. At school, we had explored recursion early on in the semester to solve the Tower of Hanoi problem, but I&#8217;ll admit that it was difficult for me to grasp and follow the logic. Thankfully, as I went through Project Euler problem 7 earlier this week, I was able to apply the principles of recursion to solve it and gain a better understanding of using recursion in the process.</p>

<p>Problem 7 asks you to find the 10,001st prime number. My strategy for solving this problem was to take a starting number, pass in prime index that I would like to solve for, then move iteratively toward that index based on the starting index (i.e. the prime index of the closest prime number less than or equal to the starting number). To do this, I created an Integer#prime? method to check if a number is prime and metaprogrammed an Integer#next_prime and Integer#previous_prime method to find the closest prime number greater than and less than, respectively, the given number. I then created an Integer#find_prime method that would recursively call itself via the Integer#move_to_next_prime method that would eventually return the value of the prime_index that was initally passed to the #find_prime method.</p>

<p>I think the code that I ended up with is okay, but I could have made other changes to make the search process of finding the n-th prime faster. For example, instead of having the script move incrementally to find the value of the n-th prime given a starting number, I could have written it so that based on the delta between the prime index of the starting number and the target prime index, the script could make a someone intelligent guess as to how much to add or subtract to the starting number to get closer to the target value. The difference between the value of the starting prime index of 10 (i.e., the 10th prime) and the 15th prime will be smaller than the difference between the 10th and 20th prime. This fact could be baked into the recursive function in order to find a better &#8220;ballpark&#8221; estimate of the target prime index value rather than just incrementing by one prime number each time the function is called.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># PROBLEM NUMBER 7</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># PROBLEM NAME</span>
</span><span class='line'><span class="c1"># 10001st prime</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># PROBLEM DESCRIPTION</span>
</span><span class='line'><span class="c1"># By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># What is the 10 001st prime number?</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># PROCESS</span>
</span><span class='line'><span class="c1"># =&gt; I want to be able to determine a prime number by passing in the index for it within the prime number universe</span>
</span><span class='line'><span class="c1"># =&gt; Find the pattern of determining prime numbers</span>
</span><span class='line'>  <span class="c1"># =&gt; Look at factors for determining a prime number</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ANSWER</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; 104743</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Integer</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="n">prime</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">even?</span>
</span><span class='line'>      <span class="n">prime</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">even_prime_check</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">prime</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">odd_prime_check</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">prime</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">odd_prime_check</span>
</span><span class='line'>    <span class="n">prime</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">divisor</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">prime</span> <span class="o">==</span> <span class="kp">true</span> <span class="o">&amp;&amp;</span> <span class="n">divisor</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nb">self</span><span class="o">**</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">self</span> <span class="o">%</span> <span class="n">divisor</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">prime</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">divisor</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">prime</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">even_prime_check</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_for_primes</span>
</span><span class='line'>    <span class="n">primes</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.self</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">i</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'>        <span class="n">primes</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">primes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sum_all_primes</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">check_for_primes</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">num</span><span class="o">|</span> <span class="n">result</span> <span class="o">+</span> <span class="n">num</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">which_prime?</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">check_for_primes</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">prime_search</span><span class="p">(</span><span class="o">*</span><span class="n">searches</span><span class="p">)</span>
</span><span class='line'>    <span class="n">searches</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">search</span><span class="o">|</span>
</span><span class='line'>      <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">search</span><span class="si">}</span><span class="s2">_prime&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">prime_test</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">search</span>
</span><span class='line'>        <span class="k">when</span> <span class="ss">:next</span>
</span><span class='line'>          <span class="n">prime_test</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'>          <span class="n">prime_test</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">until</span> <span class="n">prime_test</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'>        <span class="k">when</span> <span class="ss">:previous</span>
</span><span class='line'>          <span class="n">prime_test</span> <span class="o">-=</span> <span class="mi">1</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'>          <span class="n">prime_test</span> <span class="o">-=</span> <span class="mi">1</span> <span class="k">until</span> <span class="n">prime_test</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">prime_test</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">prime_search</span> <span class="ss">:next</span><span class="p">,</span> <span class="ss">:previous</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_prime</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">prime?</span>
</span><span class='line'>      <span class="n">starting_prime</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">starting_prime</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">previous_prime</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">starting_prime</span><span class="o">.</span><span class="n">which_prime?</span><span class="si">}</span><span class="s2"> prime: </span><span class="si">#{</span><span class="n">starting_prime</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">starting_index</span> <span class="o">=</span> <span class="n">starting_prime</span><span class="o">.</span><span class="n">which_prime?</span>
</span><span class='line'>    <span class="n">move_to_next_prime</span><span class="p">(</span><span class="n">starting_prime</span><span class="p">,</span> <span class="n">starting_index</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_to_next_prime</span><span class="p">(</span><span class="n">start_prime</span><span class="p">,</span> <span class="n">start_index</span><span class="p">,</span> <span class="n">target_index</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">start_index</span> <span class="o">==</span> <span class="n">target_index</span>
</span><span class='line'>      <span class="n">start_prime</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">start_index</span> <span class="o">&lt;</span> <span class="n">target_index</span>
</span><span class='line'>      <span class="n">next_num</span> <span class="o">=</span> <span class="n">start_prime</span><span class="o">.</span><span class="n">next_prime</span>
</span><span class='line'>      <span class="n">next_num</span><span class="o">.</span><span class="n">find_prime</span><span class="p">(</span><span class="n">target_index</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="n">start_index</span> <span class="o">&gt;</span> <span class="n">target_index</span>
</span><span class='line'>      <span class="n">next_num</span> <span class="o">=</span> <span class="n">start_prime</span><span class="o">.</span><span class="n">previous_prime</span>
</span><span class='line'>      <span class="n">next_num</span><span class="o">.</span><span class="n">find_prime</span><span class="p">(</span><span class="n">target_index</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I&#8217;ve mentioned before, working on Project Euler problems has forced me to dust off the Ruby core documentation and practice applying concepts that I learned before but may have forgotten over time. Also, given that we&#8217;ve focused so much on the abstractions of Rails over the past two months, its great to have to go back to working with just Ruby. Its not easy to make time to do Project Euler problems, but I definitely recommend trying to work on at least a few of them (or similar logic problems) just to get more practice at writing Ruby scripts.</p>

<p>Finally, I&#8217;ll leave you with some other good resources on recursion in Ruby in case you&#8217;re interested in learning more:</p>

<p><a href="http://natashatherobot.com/recursion-factorials-fibonacci-ruby/" target="_blank">Recursion and Fibonacci in Ruby</a></p>

<p><a href="http://kaibun.net/blog/2010/03/17/simple-thought-about-recursion-in-ruby/" target="_blank">Recursion in Ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron Graduation]]></title>
    <link href="http://eewang.github.com/blog/2013/04/27/flatiron-graduation/"/>
    <updated>2013-04-27T07:57:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/04/27/flatiron-graduation</id>
    <content type="html"><![CDATA[<p>Yesterday was the final day of the Flatiron School semester. I&#8217;ll write a longer blog post hopefully next week with my reflections and thoughts on the 3 month program, but I just wanted to say that its been an awesome experience. I&#8217;ve met some amazing people and I&#8217;m so happy to have a skill set now that I can continue to cultivate for the rest of my life. I used to have a lot of ideas for applications or programs that could never reach fruition without knowing how to code; now, I can have an idea and write a simple exploratory Rails app or script to see if its feasible. The skill of being able to ideate and execute simultaneously is a true blessing, and I&#8217;m thankful to have had the opportunity to build it at the Flatiron School.</p>

<!--more-->


<p>Despite the end of the program, I have no plans to slow down. Sure, I&#8217;ll be heading back to Chicago next weekend for about 5 days, but I plan to keep coding whenever I&#8217;m not hanging out with friends and family. I&#8217;ll still keep going into school to code with others. I&#8217;ll still keep blogging about what I&#8217;m learning and building. I&#8217;ll still keep reading coding books and working on Project Euler problems. In many ways, the end of Flatiron just means that I&#8217;ll have more flexibility during the day to grab coffee or a longer lunch; I don&#8217;t expect the learning process to decelerate.</p>

<p>Oh, and looking for jobs. That process will start imminently. While I don&#8217;t exactly relish the idea of the job search process, it will be a great opportunity for me to meet people in the tech community and learn about what cool stuff companies in New York are building. And if you know of somewhere that looks interesting or someone you think I should meet, feel free to shoot me an e-mail (eugene.wang.77@gmail.com)!</p>

<p><em>Updated Saturday, April 27, 10:00 pm</em></p>

<p>I had the opportunity today to serve as a judge in the Big Stakes Challenge for <a href="http://defyventures.org/" target="_blank">Defy Ventures</a>. If you haven&#8217;t heard of Defy, its an entrepreneurial program for formerly incarcerated individuals. The program is structured as a mini-MBA; students have classes for a few hours two evenings during the week and all-day Saturday for about 8 months. They learn about the fundamentals of entrepreneurship - business plans, marketing, finance, operations, etc. And while they take classes, they apply their education to their own business ventures. As a judge in today&#8217;s competition (the last of three that they held throughout the program), I heard from promising entrepreneurs about a computer repair business, an artisan ice cream cart and a brand management agency, among many others. All of the men and women I heard from today have criminal records (a few spent the majority of their lives in prison), but I honestly forgot they served hard time after a few minutes. I found them to be articulate, passionate and eager to take on the challenge of (legal) entrepreneurship, and hearing their personal stories and business pitches helped me break down stereotypes I have of ex-convicts.  You can find more information about the program <a href="http://www.nytimes.com/2012/09/24/nyregion/helping-ex-criminals-develop-start-ups.html" target="_blank">here</a>.</p>

<p>After the all-day business plan competition, I attended the graduation ceremony for the students this evening. Having just gone through my own graduation ceremony at the Flatiron School yesterday, I found it interesting to compare the missions of Defy and Flatiron. Like Flatiron, Defy just wrapped up its second semester in New York City. At its core, both Flatiron and Defy are about personal transformation and rejecting the popular narrative about their respective target populations. Flatiron seeks to refute the notion that developers and coders have to come out of computer science programs, or that programming is more about solving mathematical equations than creative expression. In the same vein, Defy aims to demonstrate that ex-convicts and felony offenders are talented, hard-working individuals who just so happened to get the short end of the straw in going to prison. Both programs inspire confidence and faith that the past is not prescient about our future and that we can shape our future if only we have the right tools at our fingertips and a supporting community to encourage us along the way. Despite the vastly different curricular focus, both Flatiron and Defy believe that its never too late to make a change for the better, and that while our past experiences undoubtedly shape our present selves, they do not define the who we&#8217;ll become.</p>

<p>I&#8217;m incredibly grateful for programs like the Flatiron School and Defy Ventures, and I&#8217;m especially thankful for the desire of individuals like Adam and Avi of Flatiron and Catherine Rohr of Defy to serve their respective target communities and give people a chance to change their personal career trajectory. Society today seems to slowly ossifying into socioeconomic categories that are defined earlier and earlier in life. We&#8217;re told that what college we go to matters because the people we meet will define the rest of our lives. We&#8217;re told that how many high school AP classes we take will ripple throughout our lives because it&#8217;ll affect what college we go to. Backtracing these assumptions to their logical conclusion partially explains why tuition at &#8220;top&#8221; pre-schools can hit five digits.</p>

<p>And while I&#8217;m not saying that these early decisions don&#8217;t matter (research shows that a good early education program has a huge multiplier effect on future earnings), its dangerous to assume those decisions are destiny. Avi described in his commencement speech that his grades steadily deteriorated throughout high school and that he eventually dropped out of college. By conventional wisdom, Avi&#8217;s future should have been pretty dim. Instead, he found a way to reject the narrative that your college defines your future and is today the founder of two successful startups. Both Flatiron and Defy reminds us that humans are more malleable and mentally flexible farther along in their lives than people think; its not just children who can learn new skills and transform themselves. Flatiron and Defy are doing awesome things in New York City, and I&#8217;m humbled to have had the opportunity to play a role in the two programs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Build A Simple News Reader]]></title>
    <link href="http://eewang.github.com/blog/2013/04/25/building-a-simple-news-reader/"/>
    <updated>2013-04-25T16:58:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/04/25/building-a-simple-news-reader</id>
    <content type="html"><![CDATA[<p>A Flatiron TA (Blake Johnson) recently introduced us to the &#8216;say&#8217; command in the Mac terminal. The command does exactly what you think it would - if you send in a string after the command, your computer will talk back to you! With this new-found coder superpower, I thought it would be interesting to try and build a simple news reading application. I&#8217;ve pasted the code below after the fold, or you can find my code <a href="https://github.com/eewang/automated-news-reader" target="_blank">here on Github</a>.</p>

<!--more-->


<p>I used to read the news constantly, checking my Google Reader feed or the New York Times several times an hour. Since starting at Flatiron, its been difficult for me to keep up with my regular news consumption. I try to read a number of newspapers and periodicals throughout the week, including the Economist, Atlantic, NY Mag and the NYT. With my deep-end dive into coding, however, traditional news reading has been difficult, so I&#8217;ve been trying to find new ways to get my news. For example, I started to get back into podcasts, which has been great as a way not only to get my news, but to take a break from constantly looking at screens.</p>

<p>I wanted to build a simple script that could scrape the New York Times front page and read the news back to me. As I thought about the problem, I decided to create two classes to represent the page that I wanted to scrape and the actual story itself. The code itself is pretty simple; it uses Nokogiri to open up the NYTimes front page and extracts the stories using a the &#8220;story&#8221; class css selector. Using Nokogiri to scrape a webpage converts the HTML into Nokogiri nodes, to which methods like &#8216;text&#8217; or &#8216;value&#8217; can be used to get information about the specific Nokogiri node. After extracting the stories, I could then execute terminal commands from my Ruby script using the backtick character - `.</p>

<p>The &#8220;front_page_stories&#8221; instance method in the Page class extracts all the stories from the front page. Then, the &#8220;create_stories&#8221; method goes through each story and creates a Story instance, on which it calls various methods to get the headline, byline and lede graph.</p>

<p>To get the full text of the article, I extracted the link to the full story from the front page story node and passed that link into the Nokogiri HTML parser. Each story page includes the full body text in a paragraph tag with an &#8220;itemprop = articleBody&#8221; attribute, which makes it easy to access the body text of a given article. I then save each paragraph as a separate element in an array, which can then be iterated over for the terminal &#8216;say&#8217; command to read.</p>

<p>One challenge that I had to address was the fact that the NYTimes uses different headline tags for the primary, secondary, tertiary, etc. stories. So what I did was write a Story instance method to check which headline tag was not empty for a given story. The script then takes the text value of the non-empty headline tag and applies it to the story headline attribute.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Page</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:url</span><span class="p">,</span> <span class="ss">:bylines</span><span class="p">,</span> <span class="ss">:stories</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@url</span> <span class="o">=</span> <span class="n">url</span>
</span><span class='line'>    <span class="vi">@stories</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">document</span>
</span><span class='line'>    <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="vi">@url</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">front_page_stories</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">document</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.story&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_stories</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">front_page_stories</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">story</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">story</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;h6.byline&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="no">Story</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">get_headline</span><span class="p">(</span><span class="n">story</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">get_byline</span><span class="p">(</span><span class="n">story</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">get_link</span><span class="p">(</span><span class="n">story</span><span class="p">)</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">get_lede_graph</span><span class="p">(</span><span class="n">story</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@stories</span> <span class="o">&lt;&lt;</span> <span class="n">s</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">read_stories</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">create_stories</span>
</span><span class='line'>    <span class="vi">@stories</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">story</span><span class="o">|</span>
</span><span class='line'>      <span class="sb">`say -v &quot;</span><span class="si">#{</span><span class="n">story</span><span class="o">.</span><span class="n">voice</span><span class="si">}</span><span class="sb">&quot; &quot;Story </span><span class="si">#{</span><span class="vi">@stories</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">story</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="sb"> of </span><span class="si">#{</span><span class="vi">@stories</span><span class="o">.</span><span class="n">size</span><span class="si">}</span><span class="sb">&quot;`</span>
</span><span class='line'>      <span class="n">story</span><span class="o">.</span><span class="n">speak_story</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Story</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:headline</span><span class="p">,</span> <span class="ss">:byline</span><span class="p">,</span> <span class="ss">:lede_graph</span><span class="p">,</span> <span class="ss">:link</span><span class="p">,</span> <span class="ss">:voice</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">VOICES</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;Alex&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Bruce&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Fred&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Junior&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Ralph&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Agnes&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Kathy&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Princess&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Vicki&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Victoria&quot;</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@doc</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="vi">@body_paragraphs</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="vi">@voice</span> <span class="o">=</span> <span class="no">VOICES</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1"># .shuffle[0]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">doc</span>
</span><span class='line'>    <span class="vi">@doc</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="vi">@link</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_link</span><span class="p">(</span><span class="n">story</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">link</span> <span class="o">=</span> <span class="n">story</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">attribute</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_byline</span><span class="p">(</span><span class="n">story</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">byline</span> <span class="o">=</span> <span class="n">story</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;h6.byline&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_lede_graph</span><span class="p">(</span><span class="n">story</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">lede_graph</span> <span class="o">=</span> <span class="n">story</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_headline</span><span class="p">(</span><span class="n">story</span><span class="p">)</span>
</span><span class='line'>    <span class="n">attrs</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;h2&#39;</span><span class="p">,</span> <span class="s1">&#39;h3&#39;</span><span class="p">,</span> <span class="s1">&#39;h5&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">attrs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">headline</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">story</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="n">headline</span><span class="p">)</span><span class="o">.</span><span class="n">text</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">headline</span> <span class="o">||=</span> <span class="n">story</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="n">headline</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_text</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">doc</span>
</span><span class='line'>    <span class="vi">@doc</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s2">&quot;p[itemprop=articleBody]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@body_paragraphs</span> <span class="o">&lt;&lt;</span> <span class="nb">p</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@body_paragraphs</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">speak_story</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">byline</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="sb">`say -v &quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">voice</span><span class="si">}</span><span class="sb">&quot; &quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">byline</span><span class="si">}</span><span class="sb">&quot;`</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">headline</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="sb">`say -v &quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">voice</span><span class="si">}</span><span class="sb">&quot; &quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">headline</span><span class="si">}</span><span class="sb">&quot;`</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">lede_graph</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="sb">`say -v &quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">voice</span><span class="si">}</span><span class="sb">&quot; &quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">lede_graph</span><span class="si">}</span><span class="sb">&quot;`</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">full_text</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">p</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="sb">`say -v &quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">voice</span><span class="si">}</span><span class="sb">&quot; &quot;</span><span class="si">#{</span><span class="nb">p</span><span class="si">}</span><span class="sb">&quot;`</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">news</span> <span class="o">=</span> <span class="no">Page</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;http://www.nytimes.com&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">news</span><span class="o">.</span><span class="n">read_stories</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, I can theoretically wake up in the morning, fire up my terminal, run this script and get ready for the day as my computer reads the news to me. In practice, the computer voice isn&#8217;t all that sexy and it inaccurately pronounces some names or other proper nouns and generally has a lumpy, awkward quality to it. I&#8217;m sure there are programs out there that you can download to add custom voices to the computer that are better than the standard voices. Another feature I&#8217;d like to add would be a scrape for Twitter to add a news feed feature. Also, I&#8217;d like to add a cron job feature with the Twilio API to notify me when the NYTimes adds a banner breaking news headline to the site. I know that the NYT sends out e-mail alerts for breaking news already, but it never hurts to be the first to know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not All Sort Algorithms Are Created Equal]]></title>
    <link href="http://eewang.github.com/blog/2013/04/22/sort-algorithms/"/>
    <updated>2013-04-22T11:20:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/04/22/sort-algorithms</id>
    <content type="html"><![CDATA[<p>Yesterday we explored a few computer science topics, such as sort algorithms, Big O notation, linked lists and binary search nodes. I was tasked with learning more about sort algorithms, which is something I typically take for granted when coding, since Ruby has a built in #sort method (which, incidentally, uses the quick sort algorithm that I&#8217;ll go into later). At a high level, a sort algorithm is a set of instructions to follow to sort a collection (e.g., an array) based on one or multiple criterion.</p>

<!--more-->


<p>A quick <a href="http://en.wikipedia.org/wiki/Sort_algorithms" target="_blank">search</a> on Wikipedia indicates that there are quite a few sort algorithms out there to choose from. Each of them have pros and cons depending on the context in which they are used. Applying a bubble sort algorithm to sort an array of numbers performs differently (in terms of computation speed) depending on how large the array is (e.g., 2 numbers or 2000 numbers?) or how organized the array is (e.g., is it entirely randomized or mostly sorted already?). For large, randomized data sets, an insertion sort may perform better than a bubble sort, but a bubble sort may perform better than an insertion sort for small sets.</p>

<p>Sort algorithms can be categorized among several parameters, including efficiency, stability and computational complexity. Efficiency is a proxy for speed, or how quickly it takes for a given set to be sorted by the algorithm in question. This can vary considerably by the complexity and order of the input set.</p>

<p>Stability is a concept that considers the original placement of a value within a set. For example, in the array [1, 2, 3, 4, 2], a correctly sorted list will come out to [1, 2, 2, 3, 4]. A sort algorithm is stable if the first &#8216;2&#8217; in the original array is in the first &#8216;2&#8217; in the sorted array and the second &#8216;2&#8217; in the original array is the second &#8216;2&#8217; in the sorted array. This example of stability is a bit contrived in this example, but is more relevant for sorting a set of objects that have more than one attribute. For example, say I have a list of NBA point guards and various stats (e.g., points per game, assists per game, etc.). If two point guards have the exact same PPG and I run a sort algorithm that does not lead to a stable result, then each time I run that sort algorithm I could have a different order of players, even if by PPG, the list is correctly sorted.</p>

<p>Computational complexity relates to what operations are used to actually sort the list and determine relative size. For example, a comparison sorting algorithm, like a bubble sort or insertion sort, uses relational operators (e.g., &lt;=, >=, !=) to determine where a given value should be placed in a sorted list. Conversely, an adaptive sort uses the existing sort order of a set to determine how the sort performs, with the basic understanding that the better sorted an initial input is, the faster the sort algorithm should perform.</p>

<p>Here&#8217;s a quick description on the sort algorithms that seemed to come up most frequently in my research on the topic. I tried to understand the most common search algorithms and implement them in Ruby. I also benchmarked the performance of the algorithms in question for an already sorted array, a reverse sorted array and a randomized array. Benchmarking the performance of the sort algorithms was helpful for me to better understand when you might want to use a bubble sort over a selection sort. You can see my full code below (note that the code is far from perfect - if you have any comments on anything that I may have missed or done inefficiently, please let me know!).</p>

<p><strong>Bubble Sort</strong></p>

<p>To sort an array of numbers (the simplest example of a set) a bubble sort algorithm goes through each index in the array and compares the value with the following value. If the first value is larger than the second value, then the two values will be switched (assuming the sort is done in ascending order). This pattern is repeated until all the numbers are sorted. On the first iteration, the largest number will &#8220;bubble&#8221; to the end of the array (i.e., index of n-1). On the second iteration, the second largest number will &#8220;bubble&#8221; to the n-2 position in the array. And so on until the array is sorted.</p>

<p>The bubble sort algorithm performs decently well on small sets, but performance degrades as sets get larger. The downside of the bubble sort is that small numbers toward the end of a set will slow down the sort as the algorithm has to move them one-by-one all the way to the front of the set. A modified version of the bubble sort is the comb sort, which helps address the  small number issue that the bubble sort presents.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bubble_sort</span>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="k">until</span> <span class="nb">self</span><span class="o">.</span><span class="n">sorted?</span>
</span><span class='line'>      <span class="c1"># puts self.join(&quot;&quot;)</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.length</span><span class="o">-</span><span class="mi">2</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">compare</span> <span class="o">=</span> <span class="o">[</span><span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">compare</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">compare</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>          <span class="n">switch_num</span> <span class="o">=</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">switch_num</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The bubble sort takes an array and goes through each value, switching that value with the next value if the next value is smaller than the first value. Each time the sort goes through the array, it checks if the array is sorted. If it is, then it stops, otherwise it continues to sort the array.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="mi">58927384</span><span class="o">.</span><span class="n">array</span><span class="o">.</span><span class="n">bubble_sort</span>
</span><span class='line'>
</span><span class='line'><span class="mi">58927384</span>
</span><span class='line'><span class="mi">58273849</span>
</span><span class='line'><span class="mi">52738489</span>
</span><span class='line'><span class="mi">25374889</span>
</span><span class='line'><span class="mi">23547889</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Selection Sort</strong></p>

<p>A selection sort starts by taking the first element in a list of numbers. Then, the algorithm goes through all of the remaining numbers and finds the minimum value, which it then swaps positions with the first number. After this first iteration, the smallest number in the array is now in the correct (i.e., first) position. This process continues until n - 1 iterations have been made and all numbers are sorted.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">selection_sort</span>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="n">sorted</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.length</span><span class="o">-</span><span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># puts sorted.join(&quot;&quot;)</span>
</span><span class='line'>      <span class="n">search_array</span> <span class="o">=</span> <span class="n">sorted</span><span class="o">[</span><span class="n">i</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="n">current_num</span> <span class="o">=</span> <span class="n">sorted</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>      <span class="n">min_num</span> <span class="o">=</span> <span class="n">search_array</span><span class="o">.</span><span class="n">min</span>
</span><span class='line'>      <span class="n">switch_index</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">search_array</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">min_num</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sorted</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">min_num</span>
</span><span class='line'>      <span class="n">sorted</span><span class="o">[</span><span class="n">switch_index</span><span class="o">]</span> <span class="o">=</span> <span class="n">current_num</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">sorted</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sort algorithm will go through an array and for each value it checks, it will find the minimum value for the sub-set of the array following the value it is checking. It will then replace the current value with the minimum value that it finds. This way, the smallest number of a successively smaller sub-set of the original array is placed just before such sub-set. By the time the loop gets to the end of the array, the array has been sorted.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="mi">58927384</span><span class="o">.</span><span class="n">array</span><span class="o">.</span><span class="n">selection_sort</span>
</span><span class='line'>
</span><span class='line'><span class="mi">58927384</span>
</span><span class='line'><span class="mi">28957384</span>
</span><span class='line'><span class="mi">23957884</span>
</span><span class='line'><span class="mi">23457889</span>
</span><span class='line'><span class="mi">23457889</span>
</span><span class='line'><span class="mi">23457889</span>
</span><span class='line'><span class="mi">23457889</span>
</span><span class='line'><span class="mi">23457889</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Insertion Sort</strong></p>

<p>An insertion sort starts by taking the last two numbers in an array. The algorithm then takes each number in the original array and puts that number in the correct place in the new sorted array, and continues that pattern until all of the original array is now in a sorted new array.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">insertion_sort</span>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="n">sorted</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">sorted</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="nb">self</span><span class="o">[</span><span class="n">length</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="n">.length</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">max</span><span class="p">)</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="nb">self</span><span class="o">[</span><span class="n">length</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="n">.length</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">min</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">2</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># puts sorted.join(&quot;&quot;)</span>
</span><span class='line'>      <span class="n">num</span> <span class="o">=</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>      <span class="n">insert_at</span> <span class="o">=</span> <span class="n">sorted</span><span class="o">.</span><span class="n">max</span> <span class="o">&lt;</span> <span class="n">num</span> <span class="p">?</span> <span class="n">sorted</span><span class="o">.</span><span class="n">length</span> <span class="p">:</span> <span class="n">sorted</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">int</span><span class="o">|</span> <span class="n">int</span> <span class="o">-</span> <span class="n">num</span> <span class="p">}</span><span class="o">.</span><span class="n">index</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">sorted</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">insert_at</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">sorted</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sort code creates a second array of two numbers, then goes back through the original array and puts each number in the correct place in the second array. The &#8220;insert_at&#8221; variable determines where in the second array the value from the original array should be included.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="mi">58927384</span><span class="o">.</span><span class="n">array</span><span class="o">.</span><span class="n">insertion_sort</span>
</span><span class='line'>
</span><span class='line'><span class="mi">48</span>
</span><span class='line'><span class="mi">458</span>
</span><span class='line'><span class="mi">4588</span>
</span><span class='line'><span class="mi">45889</span>
</span><span class='line'><span class="mi">245889</span>
</span><span class='line'><span class="mi">2457889</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Merge Sort</strong></p>

<p>Merge sort is an algorithm that recursively breaks down a set until each item is in its own array. Then, the algorithm recreates the set by merging successively larger sub-sets in an orderly fashion until the original set is sorted. This was a challenging one for me to conceptualize, and I&#8217;ll admit that the code below was mostly taken from the Phil Crissman blog I link to below. The speed of the merge sort comes from the fact that its easier to a sorted list with another already sorted list. The algorithm breaks down a large array until it can reconstruct the set by merging sorted sub-sets.</p>

<p><strong>Quick Sort</strong></p>

<p>I didn&#8217;t implement a quick sort algorithm, but the basic notion behind the quick sort algorithm is that it selects a element in the set called the pivot (typically, the median value), moves all values less than the pivot to before the pivot and all values greater than the pivot to after the pivot. After this first iteration, the pivot value is in the correct place in the set, even if the values before and after the pivot are not in the correct order. Then, this process is repeated for the sub-sets smaller and larger than the pivot value until the entire set is sorted.</p>

<p>The quick sort seems to be a pretty fast and efficient algorithm, and its used in Ruby for the array#sort algorithm. However, it doesn&#8217;t seem to be the most stable algorithm, as the original set order is not preserved in the event of a perfect match between two values. Conceptually, I find this sort algorithm the most interesting, because it uses contextual clues to sort more efficiently. The Wikipedia entry for <a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank">quick sort</a> has a great graphic illustrating how the quick sort works. I might try and implement my own quick sort at some point; if I do, I&#8217;ll definitely update this post!</p>

<p><strong>Benchmarking</strong></p>

<p>For each of these tests, I created a random number and converted that number into an array using the number#array function in the code at the bottom. For the quick sort, I used the Ruby array#sort method. I wanted to see how the sort algorithms I chose to examine varied based on the size of the array and the sort level of the input array. I tested each algorithm on an already sorted array, a reverse sorted array and a randomly sorted array.</p>

<p>Let me just say upfront that I think the merge sort implementation seems off here. Based on my reading, the merge sort should be a relatively efficient and fast sort algorithm (falling below a quick sort but above the other sort algorithms), but for some reason the merge sort I examined doesn&#8217;t perform that well. I suspect that its because the method is making an unnecessary number of recursive loops. It would be interesting to examine more closely, but I&#8217;m afraid that this may be a rabbit hole that I don&#8217;t have the expertise (or time) yet to delve fully into.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>number = 58927384
</span><span class='line'>
</span><span class='line'>Sort Algorithm (input type)     Sort Time (ms)
</span><span class='line'>----------------------------------------------
</span><span class='line'>Bubble Sort (sorted)            0.013
</span><span class='line'>Insertion Sort (sorted)         0.035
</span><span class='line'>Selection Sort (sorted)         0.038
</span><span class='line'>Merge Sort (sorted)             0.093
</span><span class='line'>Quick Sort (sorted)             0.011
</span><span class='line'>  
</span><span class='line'>Bubble Sort (reverse)           0.055
</span><span class='line'>Insertion Sort (reverse)        0.028
</span><span class='line'>Selection Sort (reverse)        0.027
</span><span class='line'>Merge Sort (reverse)            0.066
</span><span class='line'>Quick Sort (reverse)            0.007
</span><span class='line'>  
</span><span class='line'>Bubble Sort (random)            0.045
</span><span class='line'>Insertion Sort (random)         0.027
</span><span class='line'>Selection Sort (random)         0.027
</span><span class='line'>Merge Sort (random)             0.067
</span><span class='line'>Quick Sort (random)             0.006</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>number = 52398471342
</span><span class='line'>
</span><span class='line'>Sort Algorithm (input type)     Sort Time (ms)
</span><span class='line'>----------------------------------------------
</span><span class='line'>Bubble Sort (sorted)            0.012
</span><span class='line'>Insertion Sort (sorted)         0.041
</span><span class='line'>Selection Sort (sorted)         0.038
</span><span class='line'>Merge Sort (sorted)             0.105
</span><span class='line'>Quick Sort (sorted)             0.008
</span><span class='line'>  
</span><span class='line'>Bubble Sort (reverse)           0.094
</span><span class='line'>Insertion Sort (reverse)        0.041
</span><span class='line'>Selection Sort (reverse)        0.035
</span><span class='line'>Merge Sort (reverse)            0.095
</span><span class='line'>Quick Sort (reverse)            0.007
</span><span class='line'>  
</span><span class='line'>Bubble Sort (random)            0.083
</span><span class='line'>Insertion Sort (random)         0.04
</span><span class='line'>Selection Sort (random)         0.034
</span><span class='line'>Merge Sort (random)             0.096
</span><span class='line'>Quick Sort (random)             0.005</span></code></pre></td></tr></table></div></figure>


<p>For relatively small arrays, there doesn&#8217;t seem to be a huge difference in performance, but its clear that the quick sort is the most efficient method, which should come as no surprise since its the actual Ruby array#sort method. My sort algorithm implementations are no match for the Ruby sort algorithm.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>number = 2984579834759824759082347509823475098274509827409582745980274359872490
</span><span class='line'>8572890457209384572908345790284570981374908274598027450923845092846738945729834
</span><span class='line'>579873465934758923745897459083745890273490587246897234985739485634596394
</span><span class='line'>
</span><span class='line'>Sort Algorithm (input type)     Sort Time (ms)
</span><span class='line'>----------------------------------------------
</span><span class='line'>Bubble Sort (sorted)            0.075
</span><span class='line'>Insertion Sort (sorted)         5.182
</span><span class='line'>Selection Sort (sorted)         5.079
</span><span class='line'>Merge Sort (sorted)             5.528
</span><span class='line'>Quick Sort (sorted)             0.01
</span><span class='line'>  
</span><span class='line'>Bubble Sort (reverse)           22.589
</span><span class='line'>Insertion Sort (reverse)        3.836
</span><span class='line'>Selection Sort (reverse)        1.37
</span><span class='line'>Merge Sort (reverse)            11.13
</span><span class='line'>Quick Sort (reverse)            0.014
</span><span class='line'>  
</span><span class='line'>Bubble Sort (random)            17.069
</span><span class='line'>Insertion Sort (random)         4.37
</span><span class='line'>Selection Sort (random)         1.344
</span><span class='line'>Merge Sort (random)             8.258
</span><span class='line'>Quick Sort (random)             0.007</span></code></pre></td></tr></table></div></figure>


<p>For larger sets, the efficiency loss becomes much more evident for the non quick sort algorithms. The bubble sort, for example, performs very well for an already sorted list, but falls way behind for lists that are not well sorted (randomized or in reverse sort order). The insertion and selection sorts seem to perform relatively similarly, although it appears that the selection sort seems to be consistely better than the insertion sort. This further supports the notion that which sort algorithm is &#8220;best&#8221; is context-dependent and varies based on the complexity and size of the set to be sorted. That said, there are certain sort algorithms that are generally worse than others (e.g., the bubble sort is probably sub-optimal in most all cases).</p>

<p>The main lesson I learned throughout trying to implement my own sort algorithms is to not try and implement my own sort algorithms. Ruby seems to have the sort method down pretty well, although I&#8217;ve read that there are some edge cases where the array#sort method lags behind custom sort algorithms. At this point in my programming career though, I can probably rely on array#sort for most all of my sorting needs.</p>

<p>Needless to say though, implementing your own sort algorithm is a pretty interesting intellectual exercise. It forces you to use less abstract Ruby methods (I tried to just use for loops in my implementation), which helps you develop a better understanding and appreciation for more abstract Ruby methods like array#collect or array#inject.</p>

<p><strong>Good Resources:</strong></p>

<p>Here are a few good web resources about sorting algorithms. I actually found the Wikipedia entry about sort algorithms to be remarkably helpful, as well as a few of the links included within the page.</p>

<p><a href="https://en.wikipedia.org/wiki/Sort_algorithm" target="_blank">https://en.wikipedia.org/wiki/Sort_algorithm</a></p>

<p><a href="http://www.sorting-algorithms.com/" target="_blank" >http://www.sorting-algorithms.com/</a></p>

<p><a href="http://atschool.eduweb.co.uk/mbaker/sorts.html" target="_blank">http://atschool.eduweb.co.uk/mbaker/sorts.html</a></p>

<p><a href="http://blog.8thlight.com/will-warner/2013/03/26/stable-sorting-in-ruby.html" target="_blank">http://blog.8thlight.com/will-warner/2013/03/26/stable-sorting-in-ruby.html</a></p>

<p><a href="http://philcrissman.com/2010/07/18/how-not-to-write-sorting-algorithms-in-ruby/" target="_blank">http://philcrissman.com/2010/07/18/how-not-to-write-sorting-algorithms-in-ruby/</a></p>

<hr />

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">array</span>
</span><span class='line'>    <span class="n">array</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">array</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bignum</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">array</span>
</span><span class='line'>    <span class="n">array</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">array</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">reverse_array</span>
</span><span class='line'>    <span class="n">reversed_array</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">size</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="n">reversed_array</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span><span class="o">[</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">reversed_array</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sorted?</span>
</span><span class='line'>    <span class="n">sorted</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">sorted</span> <span class="o">==</span> <span class="kp">true</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>        <span class="n">sorted</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">sorted</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bubble_sort</span>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="k">until</span> <span class="nb">self</span><span class="o">.</span><span class="n">sorted?</span>
</span><span class='line'>      <span class="c1"># puts self.join(&quot;&quot;)</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.length</span><span class="o">-</span><span class="mi">2</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">compare</span> <span class="o">=</span> <span class="o">[</span><span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">compare</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">compare</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>          <span class="n">switch_num</span> <span class="o">=</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">switch_num</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">selection_sort</span>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="n">sorted</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.length</span><span class="o">-</span><span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># puts sorted.join(&quot;&quot;)</span>
</span><span class='line'>      <span class="n">search_array</span> <span class="o">=</span> <span class="n">sorted</span><span class="o">[</span><span class="n">i</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="n">current_num</span> <span class="o">=</span> <span class="n">sorted</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>      <span class="n">min_num</span> <span class="o">=</span> <span class="n">search_array</span><span class="o">.</span><span class="n">min</span>
</span><span class='line'>      <span class="n">switch_index</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">search_array</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">min_num</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sorted</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">min_num</span>
</span><span class='line'>      <span class="n">sorted</span><span class="o">[</span><span class="n">switch_index</span><span class="o">]</span> <span class="o">=</span> <span class="n">current_num</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">sorted</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">insertion_sort</span>
</span><span class='line'>    <span class="n">length</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="n">sorted</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">sorted</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="nb">self</span><span class="o">[</span><span class="n">length</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="n">.length</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">max</span><span class="p">)</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="nb">self</span><span class="o">[</span><span class="n">length</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="n">.length</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">min</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">2</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># puts sorted.join(&quot;&quot;)</span>
</span><span class='line'>      <span class="n">num</span> <span class="o">=</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>      <span class="n">insert_at</span> <span class="o">=</span> <span class="n">sorted</span><span class="o">.</span><span class="n">max</span> <span class="o">&lt;</span> <span class="n">num</span> <span class="p">?</span> <span class="n">sorted</span><span class="o">.</span><span class="n">length</span> <span class="p">:</span> <span class="n">sorted</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">int</span><span class="o">|</span> <span class="n">int</span> <span class="o">-</span> <span class="n">num</span> <span class="p">}</span><span class="o">.</span><span class="n">index</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">sorted</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="n">insert_at</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">sorted</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># puts &quot;starting merge_sort&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">first</span> <span class="o">&lt;</span> <span class="n">last</span>
</span><span class='line'>      <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="n">last</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>      <span class="c1"># puts &quot;starting first recursive loop: self: #{self}; first: #{first}; mid: #{mid}; last: #{last};&quot;</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">merge_sort</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># puts &quot;starting second recursive loop: self: #{self}; first: #{first}, mid: #{mid+1}, last: #{last}&quot;</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">merge_sort</span><span class="p">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># puts &quot;start merge: self: #{self}; first: #{first}; mid: #{mid + 1}; last: #{last}&quot;</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># puts &quot;done&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># puts self[0..-2].join(&quot;&quot;)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quick_sort</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sort_benchmark</span>
</span><span class='line'>    <span class="n">sorted_order</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">insertion_sort</span>
</span><span class='line'>    <span class="n">sorted_reverse_order</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">insertion_sort</span><span class="o">.</span><span class="n">reverse_array</span>
</span><span class='line'>    <span class="n">random_order</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">shuffle</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bubble Sort (sorted):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">sorted_order</span><span class="o">.</span><span class="n">bubble_sort</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Insertion Sort (sorted):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">sorted_order</span><span class="o">.</span><span class="n">insertion_sort</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Selection Sort (sorted):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">sorted_order</span><span class="o">.</span><span class="n">selection_sort</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Merge Sort (sorted):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">sorted_order</span><span class="o">.</span><span class="n">merge_sort</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bubble Sort (reverse):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">sorted_reverse_order</span><span class="o">.</span><span class="n">bubble_sort</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Insertion Sort (reverse):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">sorted_reverse_order</span><span class="o">.</span><span class="n">insertion_sort</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Selection Sort (reverse):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">sorted_reverse_order</span><span class="o">.</span><span class="n">selection_sort</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Merge Sort (reverse):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">sorted_reverse_order</span><span class="o">.</span><span class="n">merge_sort</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bubble Sort (random):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">random_order</span><span class="o">.</span><span class="n">bubble_sort</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Insertion Sort (random):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">random_order</span><span class="o">.</span><span class="n">insertion_sort</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Selection Sort (random):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">random_order</span><span class="o">.</span><span class="n">selection_sort</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Merge Sort (random):&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">random_order</span><span class="o">.</span><span class="n">merge_sort</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">size</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'>    <span class="n">left</span> <span class="o">=</span> <span class="nb">self</span><span class="o">[</span><span class="n">first</span><span class="o">.</span><span class="n">.mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="n">right</span> <span class="o">=</span> <span class="nb">self</span><span class="o">[</span><span class="n">mid</span><span class="o">.</span><span class="n">.last</span><span class="o">]</span>
</span><span class='line'>    <span class="n">left</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">max</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">right</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">max</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="c1"># puts &quot;MERGE (before) - self: #{self}; left: #{left}; right: #{right}&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">first</span><span class="o">.</span><span class="n">.last</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">left</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">[</span><span class="n">j</span><span class="o">]</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">=</span> <span class="n">left</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">=</span> <span class="n">right</span><span class="o">[</span><span class="n">j</span><span class="o">]</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># puts &quot;MERGE (after) - self: #{self}; left: #{left}; right: #{right}&quot;</span>
</span><span class='line'>    <span class="c1"># self[0..-2]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Of Science Fairs and Space Apps (Flatiron - Week 11)]]></title>
    <link href="http://eewang.github.com/blog/2013/04/21/science-fairs-and-space-apps-flatiron-week-11/"/>
    <updated>2013-04-21T21:56:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/04/21/science-fairs-and-space-apps-flatiron-week-11</id>
    <content type="html"><![CDATA[<p>I can hardly believe that there is only one week left in the Flatiron School. This past week we had our Science Fair where we showed off the applications that we had been building for most of the second half of the semester. I talked about <a href="http://handrai.se" target="_blank">HandRaise</a> and <a href="http://viewfinder.io" target="_blank">ViewFinder</a>, the two apps that I&#8217;ve spent the most time building. We had a strong showing from the NYC tech community; I was definitely exhausted by the end of the four-hour long event.</p>

<!--more-->


<p>Most of the week other than the Science Fair was spent working on apps. This next week will be pretty heavy on testing (we worked some on Rspec the previous week) and interview prep as the program wraps up. There are also a few side projects that I&#8217;d like to focus on more. Also, I&#8217;m hoping to write a post looking back on my Flatiron experience toward the end of this week and early next, as well as my next goals that I hope others both in Flatiron and in the dev community more broadly can hold me accountable to.</p>

<p>This weekend me and a few other Flatiron classmates went to <a href="http://spaceappschallenge.org/" target="_blank">NYC Space Apps</a>. The hackathon was sponsored by NASA and focused on an array of space- and not-so-space-related projects. While other projects focused on using Arduinos to build space-related hardware to an Asteroid mapper, our project was to build an app to help people discover ways to boost energy efficiency and save money. Specifically, we were hoping to build a social tool for people to input in information about their energy and gas bills, see how much they pay relative to the neighborhood average and their friends (via Facebook OAuth) and, ultimately, discover relevant incentive programs (often tax credits or rebates offered at the federal, state and local levels) that they can use to lower their energy bills. It didn&#8217;t have anything to do with space, but here&#8217;s <a href="http://spaceappschallenge.org/challenge/mobile-incentives-tied-to-utility-rates/" target="_blank">proof</a> that it was actually a project on offer. Its a conceptually interesting idea, but one that we found was difficult to put together as we would have liked to do ideally within the course of a hackathon weekend. And while we didn&#8217;t end up presenting our product, I think I learned a few useful lessons for future hackathons.</p>

<p><strong>1) Establish a clear workflow </strong> - At Flatiron, I take for granted my HandRaise team&#8217;s process of pushing code to a feature branch, submitting pull requests and requiring the developer to explain the code to the pull request acceptor. I think this is a solid process, but it may not be the best process for a hackathon, where code is pushed more regularly. I found it difficult to work on a project with so many people all pushing code at the same time. I&#8217;m not sure what the best git process is for a hackathon, but whatever is decided, make sure the whole team agrees to it and is communicating regularly on what they&#8217;re pushing to either the master or staging branch.</p>

<p><strong>2) Use the recommended APIs </strong> - Hackathons often encourage participants to use the APIs of the sponsoring firms, and Space Apps was no different. Companies like FourSquare, TokBox and 10gen were there to talk about their products and APIs. While we had to listen to some marketing pitches early on, I would have liked to try and integrate the sponsoring company APIs more into the product we tried to build, if only to get the practice and be considered in the running for the best app to use a given API.</p>

<p><strong>3) Meet people </strong> - This mostly goes without saying, but hackathons are an awesome way to meet people in the development community. Its not easy to balance the desire to hack away and build something with being social, but its important to see what others are working on and trying to create. I find inspiration in the creative pursuits of others, and hackathons are a great way to see how people can bring an array of different skills to the table to be productive and create cool stuff.</p>

<p><strong>4) Start hacking early and iterate quickly</strong> - An agile development process is all the rage (so hot right now), and hackathons are a great way to put to apply agile best practices. When we were discussing what to do for the hackathon on Saturday morning, I think we spent too much time planning out our application and not enough time just hacking away. In part this was unavoidable given the size of our team (we had about 10 people at one point), but in general, its a good idea to have something small to start with and just see where that goes.</p>

<p><strong>5) Think big, but start (and demo) small</strong> - Its great to think of how your hackathon app might change lives, but in reality, its best to focus tightly in on a single user flow that can be reliably demoed by the end of the hackathon. Best for the team to each work on different components of the same flow or feature than for each member to work on the first part of multiple features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In Praise of Project Euler]]></title>
    <link href="http://eewang.github.com/blog/2013/04/17/in-praise-of-project-euler/"/>
    <updated>2013-04-17T16:39:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/04/17/in-praise-of-project-euler</id>
    <content type="html"><![CDATA[<p>On the suggestion of my Flatiron classmates <a href="http://chickenriceplatter.github.io/" target="_blank">David</a> and <a href="http://andrewcallahan.github.io" target="_blank">Andrew</a>, I started trying out <a href="http://projecteuler.net/" target="_blank">Project Euler</a> recently. For the uninitiated, Project Euler is a series of math problems aptly named after the famed mathemetician Leonhard Euler, known for such learned things like fluid dynamics, number theory and calculus. Project Euler is effectively a database of math problems that are intended to be solved using code (any language can be used; I&#8217;m using Ruby). The questions test your logical thinking skills, and while they&#8217;re named after a mathemetician, the actual math necessary is more along the lines of high school math (e.g., prime numbers, factoring, etc.). This is not to diminish the difficulty of these problems - some of them are quite challenging - but rather to distinguish between the problem solving skills, which Project Euler helps build, versus pure math skill, which is more the province of a graduate school program. I&#8217;ve also throw my efforts to solve these problems on Github if you want to <a href="https://github.com/eewang/project-euler" target="_blank">check them out</a>.</p>

<!--more-->


<p>I&#8217;ve only completed about 5 problems, but I&#8217;m already an advocate of trying them out. I like Project Euler because the problems are challenging enough where they really force you to build a clear, logical problem solving process yet not so obscure that you need to break out your AP Calculus book. Don&#8217;t be turned away from the problems because of the math - the biggest challenge is taking the large problem and breaking it down small-step-by-small-step.</p>

<p>Here&#8217;s an example problem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>If we list all the natural numbers below 10 that are multiples of 3 or 5, 
</span><span class='line'>we get 3, 5, 6 and 9. The sum of these multiples is 23. 
</span><span class='line'>Find the sum of all the multiples of 3 or 5 below 1000.</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the problems are challenging but manageable. The prompt typically has an example pattern and then asks you to extrapolate that pattern to some large number (in this case, 1000). Here are the main reasons why I think its great to try a few Project Euler problems:</p>

<p><strong>1) Great mental exercise</strong></p>

<p>I&#8217;m trying to average a problem a day as a form of mental exercise. While doing Project Euler problems probably won&#8217;t directly make you a better Rails programmer, it will boost your overall problem solving process. And what else is coding at its core but implementing a clear process to solving problems via technology? Just as going for a 6-mile run today may not keep you from getting a cold tomorrow, doing Project Euler problems won&#8217;t help you solve that nasty bug in your code today, but having a consistent habit of problem solving exercise will make your mind healthier in the long run.</p>

<p><strong>2) Learning core Ruby</strong></p>

<p>Having to solve Project Euler problems has forced me back into the core Ruby documentation to try and find creative solutions. For example, I don&#8217;t typically use Ruby&#8217;s &#8216;inject&#8217; method in my day-to-day coding. Inject is a pretty high-level Ruby function that allows you to specify an initial value and apply a code block to an Enumerable (e.g., an array), the result of which becomes the initial value in the following iteration. Most of the code I&#8217;ve written rely on the less abstract &#8216;collect&#8217; or &#8216;map&#8217; methods in Ruby. However, I&#8217;ve rediscovered the utility of the inject method since Project Euler problems tend to include some sort of iterative sum or product. I won&#8217;t go into the details of the inject method here, but you can find more information about it in <a href="http://blog.jayfields.com/2008/03/ruby-inject.html" target="_blank">this blog post</a> if you&#8217;re interested.</p>

<p><strong>3) Refactoring practice</strong></p>

<p>Refactoring is the near-constant process of changing code without affecting what the user sees. Its the middle part of the &#8220;make it work, make it right, make it fast&#8221; adage. Recognizing patterns and understanding the tradeoffs included in applying certain methods or approaching a problem in a certain way are critical to skillful refactoring. Project Euler problems really help hammer in the practice of always looking over your code and finding ways to refactor it.</p>

<p>I&#8217;ve started taking a three-pronged approach to solving Project Euler problems. First, I&#8217;ll try and solve the problem for a smaller number (e.g., less than 100) with whatever code works. Second, I&#8217;ll solve the problem for the large number stated in the Project Euler prompt. Finally, I&#8217;ll refactor the code into an object-oriented manner, either by creating my own class or monkey-patching an existing Ruby class (often, the Integer class). This three-step process has helped me practice raw problem-solving and get into the habit of breaking down complex problems into small, simple tasks. Refactoring is a universal coding skill, so I&#8217;m hopeful that Project Euler will help me develop a better sense for patterns and make me a better problem solver.</p>

<p><strong>4) Creative problem solving</strong></p>

<p>This reason falls in line with the refactoring practice Project Euler provides. As the cliche goes, there&#8217;s often more than one way to skin a cat, and problem solving is no different. An example of this is the code below (warning: spoiler alert) that I wrote to solve Project Euler problem 8. The problem provides a 1000-digit number and you are required to find the greatest product of any five consecutive digits.</p>

<p>When I was thinking about this problem, I could see a few solutions. One way it could be done would be to go through the number in 5-digit chunks, basically creating sub-arrays out of the number, storing the value into a products array, then returning the maximum value. Another way to solve the problem would be to find the product of 5-digit chunks, store the result in a variable, then replace the value of that variable with subsequent products only if such product is larger. Yet another way to solve the problem would be to calculate the product of a 5-digit chunk, then iteratively check whether the next number is larger than the first number in the 5-digit array (i.e., the next product calculation). If so, then calculate the product. Otherwise, move onto the next number to add.</p>

<p>I think this last process is the most efficient, because each product that is actually calculated is guaranteed to be larger than the previous max product, since all else equal, replacing one number in a 5-digit product with a larger number will result in a larger number. This saves computation time and moves the determination of whether to calculate the product to a less computationally intensive task (comparing two numbers versus multiplication. At least, I think this is the case. I&#8217;m not super well versed in algorithm efficiency, but this makes sense to me at least.</p>

<p>The code I ended up implementing takes the most from the middle process. I could have extended the code further to make it more efficient, but I focused instead on making the code more object-oriented. My below code shows the three-step process I&#8217;m taking toward these problems - first, make it work with a smaller number, then make it work with the actual number, then refactor into an object.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># PROBLEM NUMBER 8</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># PROBLEM NAME</span>
</span><span class='line'><span class="c1"># Largest product in a series</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># PROBLEM DESCRIPTION</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Find the greatest product of five consecutive digits in the 1000-digit number.</span>
</span><span class='line'><span class="c1"># 73167176531330624919225119674426574742355349194934</span>
</span><span class='line'><span class="c1"># 96983520312774506326239578318016984801869478851843</span>
</span><span class='line'><span class="c1"># 85861560789112949495459501737958331952853208805511</span>
</span><span class='line'><span class="c1"># 12540698747158523863050715693290963295227443043557</span>
</span><span class='line'><span class="c1"># 66896648950445244523161731856403098711121722383113</span>
</span><span class='line'><span class="c1"># 62229893423380308135336276614282806444486645238749</span>
</span><span class='line'><span class="c1"># 30358907296290491560440772390713810515859307960866</span>
</span><span class='line'><span class="c1"># 70172427121883998797908792274921901699720888093776</span>
</span><span class='line'><span class="c1"># 65727333001053367881220235421809751254540594752243</span>
</span><span class='line'><span class="c1"># 52584907711670556013604839586446706324415722155397</span>
</span><span class='line'><span class="c1"># 53697817977846174064955149290862569321978468622482</span>
</span><span class='line'><span class="c1"># 83972241375657056057490261407972968652414535100474</span>
</span><span class='line'><span class="c1"># 82166370484403199890008895243450658541227588666881</span>
</span><span class='line'><span class="c1"># 16427171479924442928230863465674813919123162824586</span>
</span><span class='line'><span class="c1"># 17866458359124566529476545682848912883142607690042</span>
</span><span class='line'><span class="c1"># 24219022671055626321111109370544217506941658960408</span>
</span><span class='line'><span class="c1"># 07198403850962455444362981230987879927244284909188</span>
</span><span class='line'><span class="c1"># 84580156166097919133875499200524063689912560717606</span>
</span><span class='line'><span class="c1"># 05886116467109405077541002256983155200055935729725</span>
</span><span class='line'><span class="c1"># 71636269561882670428252483600823257530420752963450</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># PROCESS</span>
</span><span class='line'><span class="c1"># =&gt; Convert Fixnum to String to Array</span>
</span><span class='line'><span class="c1"># =&gt; Go through first five numbers and find the product</span>
</span><span class='line'><span class="c1"># =&gt; Save the result in a &quot;result&quot; variable</span>
</span><span class='line'><span class="c1"># =&gt; Remove the first number (1) (unshift) and add the 6th number (push)</span>
</span><span class='line'><span class="c1"># =&gt; Find the product of the second set of 5 numbers</span>
</span><span class='line'><span class="c1"># =&gt; If the result is larger than the value of &quot;result&quot;, replace the result value. Otherwise, discard the latest result</span>
</span><span class='line'><span class="c1"># =&gt; Repeat steps 3 to 5 until the end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; With each number that is removed and added, check if the number being added is greater than the number being removed. If so, calculate the product.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ANSWER</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; 40824</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; METHOD 1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># num = 4938294829384</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># num_array = num.to_s.split(&quot;&quot;).collect { |i| i.to_i }</span>
</span><span class='line'><span class="c1"># iterations = num_array.length - 5</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># start = 0</span>
</span><span class='line'><span class="c1"># finish = 4</span>
</span><span class='line'><span class="c1"># product_array = []</span>
</span><span class='line'><span class="c1"># max_product = 0</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># (0..iterations).each do |i|</span>
</span><span class='line'><span class="c1">#   sub_array = (start..finish).collect { |n| num_array[n] }</span>
</span><span class='line'><span class="c1">#   product = sub_array.inject(1) { |result, num| result * num }</span>
</span><span class='line'><span class="c1">#   product_array &lt;&lt; product</span>
</span><span class='line'><span class="c1">#   if product &gt; max_product</span>
</span><span class='line'><span class="c1">#     max_product = product</span>
</span><span class='line'><span class="c1">#   end</span>
</span><span class='line'><span class="c1">#   start += 1</span>
</span><span class='line'><span class="c1">#   finish += 1</span>
</span><span class='line'><span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; METHOD 2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># num = &quot;73167176531330624919225119674426574742355349194934</span>
</span><span class='line'><span class="c1"># 96983520312774506326239578318016984801869478851843</span>
</span><span class='line'><span class="c1"># 85861560789112949495459501737958331952853208805511</span>
</span><span class='line'><span class="c1"># 12540698747158523863050715693290963295227443043557</span>
</span><span class='line'><span class="c1"># 66896648950445244523161731856403098711121722383113</span>
</span><span class='line'><span class="c1"># 62229893423380308135336276614282806444486645238749</span>
</span><span class='line'><span class="c1"># 30358907296290491560440772390713810515859307960866</span>
</span><span class='line'><span class="c1"># 70172427121883998797908792274921901699720888093776</span>
</span><span class='line'><span class="c1"># 65727333001053367881220235421809751254540594752243</span>
</span><span class='line'><span class="c1"># 52584907711670556013604839586446706324415722155397</span>
</span><span class='line'><span class="c1"># 53697817977846174064955149290862569321978468622482</span>
</span><span class='line'><span class="c1"># 83972241375657056057490261407972968652414535100474</span>
</span><span class='line'><span class="c1"># 82166370484403199890008895243450658541227588666881</span>
</span><span class='line'><span class="c1"># 16427171479924442928230863465674813919123162824586</span>
</span><span class='line'><span class="c1"># 17866458359124566529476545682848912883142607690042</span>
</span><span class='line'><span class="c1"># 24219022671055626321111109370544217506941658960408</span>
</span><span class='line'><span class="c1"># 07198403850962455444362981230987879927244284909188</span>
</span><span class='line'><span class="c1"># 84580156166097919133875499200524063689912560717606</span>
</span><span class='line'><span class="c1"># 05886116467109405077541002256983155200055935729725</span>
</span><span class='line'><span class="c1"># 71636269561882670428252483600823257530420752963450&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># num_array = num.split(&quot;&quot;).collect { |i| i.to_i }</span>
</span><span class='line'><span class="c1"># iterations = num_array.length - 5</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># start = 0</span>
</span><span class='line'><span class="c1"># finish = 4</span>
</span><span class='line'><span class="c1"># product_array = []</span>
</span><span class='line'><span class="c1"># max_product = 0</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># (0..iterations).each do |i|</span>
</span><span class='line'><span class="c1">#   sub_array = (start..finish).collect { |n| num_array[n] }</span>
</span><span class='line'><span class="c1">#   product = sub_array.inject(1) { |result, num| result * num }</span>
</span><span class='line'><span class="c1">#   product_array &lt;&lt; product</span>
</span><span class='line'><span class="c1">#   if product &gt; max_product</span>
</span><span class='line'><span class="c1">#     max_product = product</span>
</span><span class='line'><span class="c1">#   end</span>
</span><span class='line'><span class="c1">#   start += 1</span>
</span><span class='line'><span class="c1">#   finish += 1</span>
</span><span class='line'><span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; METHOD 3 (Object Orientation)</span>
</span><span class='line'>
</span><span class='line'><span class="n">num</span> <span class="o">=</span> <span class="s2">&quot;73167176531330624919225119674426574742355349194934</span>
</span><span class='line'><span class="s2">96983520312774506326239578318016984801869478851843</span>
</span><span class='line'><span class="s2">85861560789112949495459501737958331952853208805511</span>
</span><span class='line'><span class="s2">12540698747158523863050715693290963295227443043557</span>
</span><span class='line'><span class="s2">66896648950445244523161731856403098711121722383113</span>
</span><span class='line'><span class="s2">62229893423380308135336276614282806444486645238749</span>
</span><span class='line'><span class="s2">30358907296290491560440772390713810515859307960866</span>
</span><span class='line'><span class="s2">70172427121883998797908792274921901699720888093776</span>
</span><span class='line'><span class="s2">65727333001053367881220235421809751254540594752243</span>
</span><span class='line'><span class="s2">52584907711670556013604839586446706324415722155397</span>
</span><span class='line'><span class="s2">53697817977846174064955149290862569321978468622482</span>
</span><span class='line'><span class="s2">83972241375657056057490261407972968652414535100474</span>
</span><span class='line'><span class="s2">82166370484403199890008895243450658541227588666881</span>
</span><span class='line'><span class="s2">16427171479924442928230863465674813919123162824586</span>
</span><span class='line'><span class="s2">17866458359124566529476545682848912883142607690042</span>
</span><span class='line'><span class="s2">24219022671055626321111109370544217506941658960408</span>
</span><span class='line'><span class="s2">07198403850962455444362981230987879927244284909188</span>
</span><span class='line'><span class="s2">84580156166097919133875499200524063689912560717606</span>
</span><span class='line'><span class="s2">05886116467109405077541002256983155200055935729725</span>
</span><span class='line'><span class="s2">71636269561882670428252483600823257530420752963450&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Product</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:number</span><span class="p">,</span> <span class="ss">:set</span><span class="p">,</span> <span class="ss">:start</span><span class="p">,</span> <span class="ss">:finish</span><span class="p">,</span> <span class="ss">:max_product</span><span class="p">,</span> <span class="ss">:product_array</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">set</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@set</span> <span class="o">=</span> <span class="n">set</span>
</span><span class='line'>    <span class="vi">@start</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@finish</span> <span class="o">=</span> <span class="n">set</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="vi">@max_product</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@product_array</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_array</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">number</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">iteration_count</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">create_array</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="nb">self</span><span class="o">.</span><span class="n">set</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find_max_product</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.self</span><span class="o">.</span><span class="n">iteration_count</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="n">sub_array</span> <span class="o">=</span> <span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">start</span><span class="o">.</span><span class="n">.self</span><span class="o">.</span><span class="n">finish</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="nb">self</span><span class="o">.</span><span class="n">create_array</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">product</span> <span class="o">=</span> <span class="n">sub_array</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">num</span><span class="o">|</span> <span class="n">result</span> <span class="o">*</span> <span class="n">num</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">max_product</span> <span class="o">=</span> <span class="n">product</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">max_product_compare</span><span class="p">(</span><span class="n">product</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">start</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">finish</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">max_product</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">max_product_compare</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">true</span> <span class="k">if</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">max_product</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">number</span> <span class="o">=</span> <span class="n">num</span>
</span><span class='line'><span class="nb">p</span><span class="o">.</span><span class="n">find_max_product</span>
</span><span class='line'>
</span><span class='line'><span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I mentioned above, don&#8217;t be intimidated by the math parts of Project Euler. In retrospect, I wish I had started doing these problems earlier on in the semester, but its never too late to get some good mental exercise in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TRUE Object-Oriented Design]]></title>
    <link href="http://eewang.github.com/blog/2013/04/13/custom-activerecord-queries-in-rails/"/>
    <updated>2013-04-13T11:23:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/04/13/custom-activerecord-queries-in-rails</id>
    <content type="html"><![CDATA[<p>Avi always stresses that being a good developer is about more than just being a good coder. Like all professions, coding is only part of the job. What&#8217;s arguably more important than coding are the soft skills that transcend any individual profession. Skills like communication, empathy, diligence and hard work. All good professional jobs help build these skills, and software development is no different.</p>

<!--more-->


<p>But building those skills aren&#8217;t easy, especially when applied to the domain of coding. Clearly and succinctly explaining the internals of a codebase to a newbie is really difficult; it requires not only communication skills but also empathy and patience. As I&#8217;ve been learning how to code, I&#8217;m also trying to broaden my understanding of technology generally through reading, writing and engaging in the community (e.g., meetups, hackathons). Work-work balance is critical; while its important to code most every day when learning the skill, its also important to not just code. Regular coding enables me to get deep into the weeds and determine exactly how to properly route requests through my application, while reading and blogging helps me look at code from a high-level and develop a high-level understanding of software design and structure.</p>

<p>I&#8217;ve started to think of good design like a mountain range. The most abstract/least concrete layers are the most foundational to the application - the base of the mountain, if you will - whereas the least abstract/most concrete layers are the items that you actually see - the peaks. Each peak might represent a different component of your application, yet the base of the mountain represents the shared functionality or code patterns between the peaks. In looking at a mountain range from afar, no one can perceive the geological complexity of the sandstone or granite that allow the peaks to reach the sky. In the same way, good application design hides the complex inner workings of a program, yet it is this complexity that enables the public interface of an well-built application to work so seamlessly. As our teacher Bob Whitney said, the job of a developer is to take in complexity and deliver simplicity.</p>

<p>Admittedly, the mountain range metaphor is a bit contrived, but the same effective design pattern can be seen in other spheres, both natural and artificial. A rainforest&#8217;s beauty is seen from the treetops, but the complexity deep within the roots and vines that create an interlocking and co-dependent ecosystem and enable the treetops to extend high above the earth is hidden from the external observer. A well-functioning corporation requires harmony between its many internal groups in order to provide a service or product to its customers effectively. Software design just takes these common patterns of loose coupling, modularity and composition and applies them in the context of objects, classes and methods.</p>

<p>One book that I&#8217;ve recently finished reading that covers software design best practices is &#8220;Practical Object Oriented Design in Ruby&#8221; by Sandi Metz.
In POODR (her own acronym), Sandi Metz expresses these design patterns in a pithy and effective manner, complete with code examples, comparisons of good and bad design patterns and a common example of designing a bike shop application that weaves the 9 chapters together. POODR is an eminently readable book, and Ms. Metz does a remarkable job balancing deep dives into code with plain English explanations of good application design. As an aside, Ms. Metz&#8217;s day job is as an application developer for my alma mater, Duke University, which makes her all the more awesome.</p>

<p>Here are a few of her most quotable quotables and a few thoughts on how to consider her advice:</p>

<blockquote><p>Code should be transparent, reasonable, usable and exemplary.</p></blockquote>


<p>Sandi Metz is perhaps best known for this pithy guide on how to write code. Programs should be easily understandable, well-suited for their purpose, navigable and malleable and just awesome. TRUE is a useful north star for good code.</p>

<blockquote><p>Depend on things that change less often than you do.</p></blockquote>


<p>Dependencies in code are often unavoidable. Thus, what matters most is picking the right dependencies rather than trying to write entirely dependency-free code. Create dependencies that are manageable by ensuring that classes and objects that will likely change in the future should have proportionately fewer dependencies than code blocks that are more stable. The Ruby core library is a great example of this - it is better to build objects that depend on the String class, for example, than depend on an internal, domain-specific class, since the Ruby String class is pretty well-established and less likely to change going forward.</p>

<p>In a similar vein&#8230;</p>

<blockquote><p>Depend on behavior, not data.</p></blockquote>


<p>Data can take many different formats. A lot of coding is about taking one data item and cutting it up a hundred different ways before its actually displayed to the user. Thus, data will change frequently relative to behavior, which tends to be more consistent. Think of data as rows and behavior as columns in a database - its easier to grow a database vertically than horizontally. This means that its better to depend on behavior rather than data, because behavior is less likely to change.</p>

<blockquote><p>Create public methods that allow senders to get what they want without knowing how your class implements its behavior.</p></blockquote>


<p>Classes should have a well defined public API that enables interaction with other objects without knowing too much about those objects. One example that Sandi Metz uses is the notion of polymorphic interfaces, which are basically methods that can iteract with multiple data types (e.g., arrays or hashes). A common pitfall among new developers is designing methods that only take in a single data type. This requires a class B that might interact with class A to know what type of data class A expects. Oftentimes, its not class B&#8217;s responsibility to know what data class A expects; class A&#8217;s public method should have a polymorphic interface to lessen the dependencies between the two classes.</p>

<blockquote><p>&#8220;This tension between the costs of concretion and the costs of abstraction is fundamental to object-oriented design. Concrete code is easy to understand but costly to extend. Abstract code may initially seem more obscure but, once understood, is far easier to change. Use of a duck type moves your code along the scale from more concrete to more abstract, making the code easier to extend but casting a veil over the underlying class of the duck.&#8221;</p></blockquote>


<p>I love this quote in POODR because it highlights an underlying tradeoff that developers consider whenever refactoring code and applying the priciples of good object-oriented design. On the one end of the spectrum is concrete code that relies on well-defined dataset. On the other end is highly abstract code (e.g., methods that write methods via metaprogramming) that is more powerful and flexible than concrete code, but also often less readable to the untrained eye or freshman developer. A duck type is an object that can be of any type and used within function calls. I&#8217;m sure that&#8217;s not the technical definition, but to me, I think of duck types as abstract objects that can take many different forms, and so methods that can accept duck types need to be written abstractly in order to function properly.</p>

<blockquote><p>&#8220;The ability to tolerate ambiguity about the class of an object is the hallmark of a confident designer. Once you begin to treat your objects as if they are defined by their behavior rather than by their class, you enter into a new realm of expressive<br/>flexible design.&#8221;</p></blockquote>


<p>Fundamental to Sandi Metz&#8217;s software design philosophy seems to be the focus on defining behavior rather than data or data types. I like this quote because it focuses on building a flexible product that can adapt to whatever the future holds for an application. Early on in the development process, ambiguity reigns supreme since programmers cannot know what the product will eventually look like. Thus, a good developer and application designer should be able tolerate and accept that uncertainty and design around the problem. Building abstract frameworks to define object behavior enables an application to grow iteratively and organically as the product specifications change.</p>

<p>One thing I learned from the book is that different tools exist in software design to address different problems. The use of class inheritance, for example, should be used in some instances whereas modules and duck types should be used in others. Its difficult to go into a full example in the length of a blog post, but I would especially recommend reading chapters 5 through 8 about duck typing, inheritance, behavior sharing via modules and object composition. Sandi Metz does a great job of mixing in code examples along with good explanations of the high-level thought process of the pros and cons of each programming technique. Not every tool is right for every job, and so a hallmark of a good developer is being able to spot which tools are right for which jobs.</p>

<p>A lot of being a more experienced developer seems to revolve around this spidey sense about coding design patterns. Avi demonstrates this regularly when he&#8217;ll spend just a few minutes flying between levels of abstraction that take us beginners hours to implement ourselves. In fact, experience in most any profession or skillset can be reflected in the &#8220;sixth sense&#8221; someone has about recognizing patterns. An experienced trader can front-run the market because he or she &#8220;senses&#8221; that prices will move in a certain direction. A branding expert can quickly conceptualize a marketing campaign because he or she can immediately grasp the underlying nature of the message a client wants to convey. In the same way, experience as a developer means that you get better at spotting patterns in code. POODR aims to provide beginners with a jumpstart in finding those patterns.</p>

<p>Two other Ruby/Rails books that I&#8217;m reading are &#8220;Rails Antipatterns&#8221; by Chad Pytel and Tammer Saleh and &#8220;Metaprogramming Ruby&#8221; by Paolo Perrotta. I&#8217;m hoping to write a post on those books as well in the coming week or two, so stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building ViewFinder (Flatiron - Week 9)]]></title>
    <link href="http://eewang.github.com/blog/2013/04/07/building-viewfinder-flatiron-week-9/"/>
    <updated>2013-04-07T14:42:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/04/07/building-viewfinder-flatiron-week-9</id>
    <content type="html"><![CDATA[<p>The majority of this past week was spent building <a href="http://viewfinder.io" target="_blank">ViewFinder</a>, which is a Rails app that leverages the Instagram API to enable users to guess where photos were taken and gamefies Instagram photo feeds. Building ViewFinder along with <a href="http://www.erinandcode.com" target="_blank">Erin Lee</a> and <a href="http://jlarusso.github.io" target="_blank">Jesse LaRusso</a> has been a pretty great experience; we got way farther than I had expected initially for the NYC on Rails presentation. Looking back at our Trello board, we defined our MVP for the presentation as an app where users could browse tagged photos and write in the address or intersection where they think the photo was taken. What we ended up with was much more than that, and more visually appealing than I could have imagined initially.</p>

<!--more-->


<p><strong>1) Brainstorming and ideation</strong></p>

<p>The idea for ViewFinder came from the View From Your Window (VFYW) game that the blogger Andrew Sullivan has on his blog, <a href="http://dish.andrewsullivan.com/" target="_blank">The Daily Dish</a>. If you haven&#8217;t read the Daily Dish, you should start (and pay for the privilege!). Sully is a coherent and reasoned blogger, and his writing covers a large swath of topics, from public policy and politics, to business, to arts and literature. For his VFYW game, readers will send him photos of their view outside their window and since his readership spans the globe, the photos tend to be from far-flung regions like Japan, Indonesia or Estonia. I&#8217;ve never played the game, because the amount of context clues provided by a VFYW photo are not enough for me to have a reasoned guess of where the photo was taken, given the global scope. However, I&#8217;ve always thought that the concept of the game was fun, and that it could be made more accessible to the average person by adding context, localizing the game and making it social.</p>

<p>I had initially planned to pursue this as a side project during the Flatiron program. Separately, Jesse, Erin and I were considering doing a project for The Disruptor Cup, which is a NYC hackathon that focuses on emergency preparedness. We had discussed an idea centered on analyzing government spending data in the aftermath of Hurricane Sandy and using the d3 Javascript library for data visualization as the interface for users to interact with the data. However, that idea didn&#8217;t get too far, as just getting up to speed with the d3 library such that we could build complex data visualizations presented a pretty steep learning curve. And given the timing of the Disruptor Cup (early/mid-April) relative to our actual class projects, we decided to punt on the hackathon. We figured that there will always be other hackathons to participate in (and civic data is a particular passion for Jesse and I), and we didn&#8217;t want to get too bogged down such that our in-class work quality would fall.</p>

<p>We explored a few other data visualization ideas for the NYC on Rails presentation. Most of these centered on using the NYC Open Data API to build a data visualization or map. However, we couldn&#8217;t quite figure out what we could build that would be a great learning experience, be a functional product and, most importantly, actually be fun to build. We knew that we wanted to work with data and APIs in some form, do something with maps and build an the end product with a well-designed front end.</p>

<p>In the end, I proposed ViewFinder as our NYC on Rails presentation. Erin and Jesse seemed to warm up to the idea pretty quickly, and we brainstormed a lot of ideas and features that we could build. We ended up agreeing to focus on building out a location-based game, where users could guess where Instagram photos were taken by geographic area in New York. Initially, we had Union Square, Times Square and 30 Rock as our main areas, but those gradually evolved into Midtown Manhattan, Downtown Manhattan and Downtown Brooklyn.</p>

<p><strong>2) Schema, design and gameplay</strong></p>

<p>I was happy that I was able to apply various programming techniques and tools that Avi/Bob/Blake have covered over the past few weeks. The two that come most clearly to mind are metaprogramming and asynchronous background job processing. Metaprogramming is a really useful technique to write methods that write their own methods. They are most applicable to code abstract patterns that vary by the data they accept rather than the actual methods that are applied to the data.</p>

<p>The area where I used metaprogramming most actively was in designing the Instagram API calls and connecting that to the gameplay. For the Instagram API calls, there are a few different ways to access the API - you can search by tag, by geographic location, by user or by popular media. For each of these calls, I needed to filter the data to remove any images that were not geotagged, as non-geotagged photos would be useless in a location guessing game. Thus, in my Instagram wrapper class - which wraps the Instagram gem, which itself directly accesses the Instagram API - I have the following code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># instagram_wrapper.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">acts_as_locatable</span><span class="p">(</span><span class="o">*</span><span class="n">queries</span><span class="p">)</span>
</span><span class='line'>  <span class="n">queries</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">query</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="s2">&quot;filter_</span><span class="si">#{</span><span class="n">query</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">options</span><span class="o">|</span>
</span><span class='line'>      <span class="n">location_images</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span><span class="o">.</span><span class="n">delete_if</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">nil?</span><span class="p">}</span>
</span><span class='line'>      <span class="n">location_images</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">acts_as_locatable</span> <span class="ss">:tag_recent_media</span><span class="p">,</span> <span class="ss">:media_search</span><span class="p">,</span> <span class="ss">:user_recent_media</span><span class="p">,</span> <span class="ss">:media_popular</span><span class="p">,</span> <span class="ss">:user_media_feed</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8220;acts_as_locatable&#8221; at the end of the above code block is a class method that takes in an arbitrary number of arguments and is executed at runtime. For each argument, it creates a method with the name of the argument prefixed with &#8220;filter_&#8221;. Each of these filter methods strip away the non-geotagged results of any of the Instagram API queries defined by the parameters passed to the acts_as_locatable class method. These methods flow into the photo model, which then takes the results of the filtered Instagram query and saves them to the database.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">acts_as_instagrammable</span><span class="p">(</span><span class="o">*</span><span class="n">queries</span><span class="p">)</span>
</span><span class='line'>  <span class="n">queries</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">query</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_singleton_method</span> <span class="s2">&quot;instagram_</span><span class="si">#{</span><span class="n">query</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">options</span><span class="o">|</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="no">InstagramWrapper</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>      <span class="n">filtered_images</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;filter_</span><span class="si">#{</span><span class="n">query</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>      <span class="n">filtered_images</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">pic</span><span class="o">|</span>
</span><span class='line'>        <span class="no">Photo</span><span class="o">.</span><span class="n">save_instagram_photos</span><span class="p">(</span><span class="n">pic</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">acts_as_instagrammable</span> <span class="ss">:media_search</span><span class="p">,</span> <span class="ss">:tag_recent_media</span><span class="p">,</span> <span class="ss">:media_popular</span><span class="p">,</span> <span class="ss">:user_media_feed</span><span class="p">,</span> <span class="ss">:user_recent_media</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like in the first code block, &#8220;acts_as_instagrammable&#8221; is a class method that creates a new instance of the Instagram wrapper, calls the relevant filtered Instagram API call and saves the photos to the database. This way, I know that whenever I want to get photos from Instagram, I can use their method names (e.g., tag_recent_media) and know that what I ultimately get back are instances of my photo database, which will only include geotagged items.</p>

<p>Finally, the below meta-method is the crux of the gameplay, and queries the database for photos while simultaneously initiating a background processing job via Sidekiq to get more data from Instagram.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">location_games</span><span class="p">(</span><span class="o">*</span><span class="n">games</span><span class="p">)</span>
</span><span class='line'>  <span class="n">games</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">game</span><span class="o">|</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">game</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@game</span> <span class="o">=</span> <span class="n">game</span>
</span><span class='line'>      <span class="vi">@coordinates</span> <span class="o">=</span> <span class="no">LOCATION_GAMES</span><span class="o">[</span><span class="n">game</span><span class="o">.</span><span class="n">to_sym</span><span class="o">][</span><span class="ss">:coordinates</span><span class="o">]</span>
</span><span class='line'>      <span class="n">radius</span> <span class="o">=</span> <span class="no">LOCATION_GAMES</span><span class="o">[</span><span class="n">game</span><span class="o">.</span><span class="n">to_sym</span><span class="o">][</span><span class="ss">:radius</span><span class="o">]</span>
</span><span class='line'>      <span class="n">size</span> <span class="o">=</span> <span class="no">LOCATION_GAMES</span><span class="o">[</span><span class="n">game</span><span class="o">.</span><span class="n">to_sym</span><span class="o">][</span><span class="ss">:size</span><span class="o">]</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="n">current_user</span>
</span><span class='line'>      <span class="vi">@photos</span> <span class="o">=</span> <span class="no">Photo</span><span class="o">.</span><span class="n">game_photos_random</span><span class="p">(</span><span class="vi">@coordinates</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@photos</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">p</span><span class="o">.</span><span class="n">locale_lat</span> <span class="o">=</span> <span class="no">LOCATION_GAMES</span><span class="o">[</span><span class="n">game</span><span class="o">.</span><span class="n">to_sym</span><span class="o">][</span><span class="ss">:coordinates</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>        <span class="nb">p</span><span class="o">.</span><span class="n">locale_lon</span> <span class="o">=</span> <span class="no">LOCATION_GAMES</span><span class="o">[</span><span class="n">game</span><span class="o">.</span><span class="n">to_sym</span><span class="o">][</span><span class="ss">:coordinates</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>        <span class="nb">p</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">create_game</span><span class="p">({</span><span class="ss">:game</span> <span class="o">=&gt;</span> <span class="vi">@game</span><span class="p">,</span> <span class="ss">:coordinates</span> <span class="o">=&gt;</span> <span class="vi">@coordinates</span><span class="p">,</span> <span class="ss">:photos</span> <span class="o">=&gt;</span> <span class="vi">@photos</span><span class="p">})</span>
</span><span class='line'>      <span class="vi">@start_photo</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="n">game</span><span class="o">][</span><span class="ss">:photos</span><span class="o">].</span><span class="n">empty?</span> <span class="p">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="no">Photo</span><span class="o">.</span><span class="n">first_unguessed_photo</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="n">game</span><span class="o">][</span><span class="ss">:photos</span><span class="o">]</span><span class="p">,</span> <span class="n">current_user</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@guessed_count</span> <span class="o">=</span> <span class="vi">@photos</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">.</span><span class="n">guessed_by?</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="no">InstagramWorker</span><span class="o">.</span><span class="n">perform_async</span><span class="p">(</span><span class="vi">@coordinates</span><span class="p">)</span>
</span><span class='line'>      <span class="n">render</span> <span class="s2">&quot;index&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">location_games</span> <span class="ss">:downtown</span><span class="p">,</span> <span class="ss">:midtown</span><span class="p">,</span> <span class="ss">:downtown_brooklyn</span> <span class="c1">#, :world_trade, :dumbo</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above block does a number of things, and is admittedly probably a decent candidate for additional refactoring. This meta-method creates a method for each game that is created. Initially, we just defined three games in a hash (not shown here) called LOCATION_GAMES, but eventually we think it would be cool for users to create their own games. For example, someone who is really into architecture or beautiful aboreal landscapes can tag photos on Instagram with #viewfinder and another tag and basically create themed games. Additionally, we imagine that this game can be replicated across most any geography, so we wanted to have a flexible design where you could quickly define the parameters of a game and have that flow into the application. Currently, games are defined within the context of a photo, but I think we are looking to break out games into their own game model and make ViewFinder more solidly object-oriented.</p>

<p>Anyways, the above code is activated when a user clicks on a location-based game on the ViewFinder landing page. For each game, the method will determine the game parameters (i.e., coordinates, radius and photo set size), go to the database and get a random set of photos that have not been guesesd by the logged in user, are tagged with #viewfinder or #vfyw and are within the defined radius of the coordinates. Simultaneously, the method will set off a background job to get more data from Instagram within the location parameters of the game. This way, as more people play and demand for a given game scales, the application should theoretically make more API calls and thus get more real-time data from Instagram, all without impacting the user experience as the arduous task of accessing the Instagram API and saving photos to the database is disassociated from the photos that are loaded on the front-end.</p>

<p>There are definitely many areas where we can do additional refactoring and clean up the code. One place specifically where I think we can do better is in using view helper methods more actively, as well as moving more logic to our controllers. With the NYC on Rails presentation coming up on Thursday, I&#8217;ll admit that we took a few shortcuts in the middle of the week just to get stuff working. In the next few weeks, I hope to go back through the code from start to finish and refactor extensively.</p>

<p>In terms of the front-end design of the application, we wanted to make the user interface highly visual and intuitive for new users to quickly get up to speed on the game. We went through several iterations of design that used various photo carousel options. We eventually rotated back to Twitter Bootstrap&#8217;s carousel, and I&#8217;m pretty happy with how the design ended up.</p>

<p><strong>3) Technical challenges</strong></p>

<p>Probably the biggest technical challenge that we faced was in figuring out how to use the Google Maps API to drag and drop a map marker that then posts to our guesses controller to create a photo location guess. We had to delve deeper into Javascript than we had previously in class, and we also learned how to use AJAX in the process. The map that is displayed when a user decides to guess on a photo is centered on the game that the user is playing. When a user decides to play the Midtown game, for example, the photos that get loaded into the game are tagged with the coordinates of the game origin. This way, when the guess map is loaded, the map is centered and zoomed in accordingly.</p>

<p>After figuring out how to load the map correctly, we needed to be able to post the coordinates of the map marker to create a guess. To do this, we used Javascript to recalculate the map marker coordinates whenever the map changed (the map marker automatically moves to the center of the map) and AJAX to create a guess with the respective coordinates when the user pressed &#8220;GUESS&#8221;. Then, when the next page is loaded (i.e., the guesses show page), the map contains a marker for each guess that has been made on that photo. Figuring out how to make Rails and Javascript play nice in terms of transferring data between the two was challenging, but now that we were able to do that successfully, it&#8217;s a great feeling to know that I now have that skill in my toolbelt.</p>

<p>Another challenge we faced was working with Instagram authentication and enabling users to sign-in via Instagram and display their user feed and friend feeds. This challenge tied in with the difficulty of designing a clean, intuitive user flow - from choosing a game all the way to viewing the results after making a guess. The first thing I tried to do actually when working on ViewFinder was to try and set up Instagram authentication. I used the Omniauth gem to do this, but it was a frustrating experience. I learned eventually that I was over-programming, in a sense, and needed to just let Omniauth take care of the authentication process. Building an intuitive user experience with Instagram authentication is still something we&#8217;re working on, and I think that making the gameplay more object-oriented will help in that regard.</p>

<p><strong>4) Future extensions</strong></p>

<p>I think it would be great to enable users to create their own games. Eventually, I&#8217;d like it for people passionate about sculptures, for example, to be able to take pictures across the globe and tag their pics with #sculpture and #viewfinder and have the application pick that up for their followers to guess where they&#8217;ve been. In general, I like the notion of themed games as a way to enable people that are passionate about whatever to better express that passion.</p>

<p>Also, it would be really cool if users could play timed games on ViewFinder, or challenge their friends to see who can best guess a set of 10 photos in a fixed amount of time. Another feature that I&#8217;d like to work on is to build out the analytics of the game and tap into the competitive nature of people. I&#8217;m a bit of a data analytics geek, and it would be super cool if we could use user data from the game to create cool data visualizations.</p>

<p>On the technical side, there is a certain amount of technical debt that got built up with the rush to deploy before the NYC on Rails presentation. I don&#8217;t think the debt is insurmountable, but the app can definitely benefit from some refactoring. Using view helpers more effectively, moving some code into modules for shared functionality and making gameplay more object-oriented are all changes that I think would make the codebase cleaner and the user experience more fluid.</p>

<p>I definitely would like to continue developing ViewFinder and building out new features. I&#8217;ve enjoyed the process of designing the product, working in a team and writing code. There&#8217;s an undefinable joy in having an idea and being able to execute on that idea and see the results. Like many creative ventures, coding is hard enough so that its always challenging, but its also accessible and progress is possible with concerted effort. And to steal a phrase from Avi, coding is all about taking complexity and delivering simplicity. A simple, sensible user interface hides the complexity within a codebase, and now being able to understand how that complexity creates simplicity has been fantastic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Product Development (Flatiron - Week 7)]]></title>
    <link href="http://eewang.github.com/blog/2013/03/23/flatiron-week-7/"/>
    <updated>2013-03-23T22:56:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/03/23/flatiron-week-7</id>
    <content type="html"><![CDATA[<p>We spent this past week focused mostly on getting our group projects off the ground. We didn&#8217;t really have lecture this week; each day was spent pair programming and building our applications using agile development best practices. My group, which consists of myself, <a href="http://janeeats.github.com" target="_blank">Jane Vora</a>, <a href="http://anthonywijnen.com" target="_blank">Anthony Wijnen</a> and <a href="http://ei-lene.github.com" target="_blank">Ei-lene Heng</a>, is building an app to structure and streamline the process of asking questions in class during group work. The current process of just raising your hand and hoping that a teacher is free is pretty inefficient and awards the lucky students rather than students who have an especially urgent question or have been waiting a long time.</p>

<!--more-->


<p>Since this was the first week at Flatiron devoted to building applications, I learned a lot about how to work effectively in a group and maintain an agile approach to building web products. Here are a few lessons I learned this past week:</p>

<p><strong>1) Design a good group workflow that holds people accountable</strong></p>

<p>Our team this past week developed a pretty solid workflow. Each day, we pair programming with a different teammate. This enabled us to get an understanding of how each person codes, while switching roles periodically such that whomever was coding in the morning became the person giving instructions in the afternoon. Also, we established a rule such that every code commit to Github must be to a feature branch with a pull request to the master branch. This way, the team submitting the pull request would have to walk the other pair through the changes so that the other pair could ask questions, understand the code changes and ultimately be responsible for approving the request.</p>

<p>I think this is an effective group workflow because it forces developers to explain and clearly articulate the purpose of the code they wrote. It helps the entire team spot patterns and refactoring opportunities, while holding individual team members accountable for the code they write. Oftentimes in the process of reviewing the other pair&#8217;s pull request, we would find opportunities to more efficiently merge code or enter into a discussion of how a feature will actually behave. While I&#8217;ve come to appreciate the Git/Github process and workflow (after much wall head-banging, no doubt), it doesn&#8217;t replace actual in-person communication, which is how features are flushed out and errors spotted.</p>

<p><strong>2) Explore rabbit holes but don&#8217;t dive in</strong></p>

<p>Avi often talks about the notion of a programming &#8220;rabbit hole&#8221; - a non-core path in building an application that lead to great frustration without actual productive learning opportunities. These are often littered throughout the application building process - using gems, for example, can become a rabbit hole when trying to properly configure a gem or customize its functionality in a certain way. I don&#8217;t think rabbit holes should be avoided entirely; often, you don&#8217;t know something is a rabbit hole until you&#8217;ve started going down it. Rather, what&#8217;s more important is to have discipline and perception in recognizing what is a rabbit hole, knowing how far to go down it and establishing a clear path out.</p>

<p>An example of a rabbit hole I encountered this past week was in using <a href="https://github.com/intridea/omniauth-github" target="_blank">OmniAuth for Github</a>. OmniAuth enables applications to permit users to authenticate using third-party applications, like Facebook, Twitter or Github. This allows developers to build off the Facebook platform, for example, and extend its functionality using Facebook data. OmniAuth is an incredibly useful tool and streamlines login/logout functionality shared by nearly every application.</p>

<p>However, OmniAuth does its magic by working in the Rack middleware in Rails, which is an area that I don&#8217;t feel particularly strong in. Also, after learning authentication just over a week ago, we&#8217;ve been working mostly on building our own simple authentication systems rather than applying a third-party auth system. Needless to say, trying to implement OmniAuth for Github this past week was a challenge. I had to improve my understanding of authentication generally while also implementing the OmniAuth gem and exploring the Github API. It felt a bit overwhelming. As I tried to implement OmniAuth for Github, error messages kept popping up and it seemed like I was going nowhere with it. I had come across a rabbit hole, at least for the moment. Eventually, Github integration will be a necessary component of our application (so that users can create gists and share code snippets when asking questions through the app), but its not necessarily a core feature. By putting off the implementation of OmniAuth for Github until I have a better understanding of OmniAuth generally (i.e., this week, hopefully), I can be more efficient in building my app by focusing on the MVP functionality.</p>

<p>Knowing when exploration turns into a rabbit hole and being disciplined about turning back is hard. My natural tendency is to just plow through and try and solve the problem, regardless of how much time I spent on it and even if taking a step back and learning more about the underlying problem before is the more efficient strategy in the long-run. You get that nagging feeling that you just can&#8217;t step away from the code, even if you know you should stop going down the rabbit hole. That&#8217;s how I&#8217;ll end up coding late into the night, by trying to climb out of a rabbit hole - an exercise in futility at 3 am in the morning.</p>

<p>I&#8217;ve come to realize that its better to just take a step back, calm down, re-evaluate and pick it back up in the morning. A good night&#8217;s sleep helps refocus the mind. But having that discipline to stop working is often as hard to develop as the motivation to begin work.</p>

<p><strong>3) Embrace the uncertainty that comes with agile development</strong></p>

<p>With this past week being our first extended experience with an agile development process, I learned not to be too beholden to individual features or processes, but rather to maintain flexibility and get comfortable with not knowing. Early on in the development process, not only do you not know what the end product will look like, you don&#8217;t even know what you don&#8217;t know about the obstacles, challenges and opportunities along the way. Thus, instead of writing out long, detailed specs about every feature of the product, its better to work iteratively with tight, short feedback loops to boost software responsiveness.</p>

<p>In our daily work, we&#8217;ve tried to work in short sprints using <a href="http://www.trello.com" target="_blank">Trello</a> as our project management tool. Checking in regularly with the other team also enabled us to keep moving in the right direction while avoiding rabbit holes. I appreciate the iterative process of software development, as it emphasizes flexibility, testing and product feedback rather than grand design and extensive planning before actual coding. This next week we&#8217;ll go back to splitting up the day between lecture and groupwork; I&#8217;m eager to get into some more advanced Rails topics that we can hopefully apply immediately to our projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to hack Lollapalooza and still not get tickets]]></title>
    <link href="http://eewang.github.com/blog/2013/03/21/how-to-hack-lollapalooza-and-still-not-get-tickets/"/>
    <updated>2013-03-21T17:50:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/03/21/how-to-hack-lollapalooza-and-still-not-get-tickets</id>
    <content type="html"><![CDATA[<p>As a Chicago native (and by &#8220;native&#8221; I mean a resident of a leafy suburb about 45 minutes away), my secret shame is that I&#8217;ve never been to <a href="http://www.lollapalooza.com" target="_blank">Lollapalooza</a>. Whenever I talk to people not from Chicago about Chicago, they always seem to mention that one time they went to Lolla and had a blast rocking out all night along Lake Shore Drive just a stone&#8217;s throw away from the Sears (that&#8217;s right, Sears) Tower. Conversations like these tend to end awkwardly when I can&#8217;t match their enthusiasm for the premier music festival in my home city.</p>

<!--more-->


<p>Thus, I was pretty excited when I got an e-mail this week from the Lollapalooza organizing people that tickets would go on sale shortly for the August festival. Specifically, &#8220;Souvenir&#8221; tickets for $75 would go on sale at some unannounced time this week. Early bird tickets go for $200 and regular tickets for $225, so I definitely wanted to try and get steep discount by snagging a Souvenir ticket. However, I didn&#8217;t want to have to constantly be refreshing the Lollapalooza site every moment of the day just to get a chance to buy the discount tickets. So, I figured I&#8217;d put to good use my developer skills and hack together a Ruby script that would monitor the Lollapalooza site for me and notify me if anything related to the Souvenir tickets changed.</p>

<p>I wanted this script to basically do three things:</p>

<p>  1) Know what elements on the Lollapalooza site were likely to change<br>
  2) Check the site on a frequent basis<br>
  3) Contact me when the site changes per #1<br></p>

<p>In order to do this, I used Nokogiri to scrape the Lollapalooza site, the Whenever gem to monitor the site and the Twilio API to text me if something changed. My first step was to use Nokogiri and the Chrome Inspector to examine the structure of the Lolla home page. I toyed around with a number of Nokogiri methods to try and pinpoint the exact location of the words &#8220;SOON&#8221; and &#8220;Souvenir&#8221;, as those were the main keywords that identified the sale of discounted tickets. I assumed that the moment Souvenir tickets would start selling on the site, either the location of the &#8220;Souvenir&#8221; text would move to a more prominent position on the page or the accompanying word &#8220;SOON&#8221; would change, since &#8220;SOON&#8221; as an indicator of when tickets would go on sale would become irrelevant once they actually started selling tickets. Finally, I assumed that the text itself would change into a link to the ticket purchase site once tickets went on sale.</p>

<p>Taking these three assumptions - that the position of &#8220;SOON&#8221; or &#8220;Souvenir&#8221; would change, or the entire element would be converted into a link - as my event triggers, I used Nokogiri to first determine where the current text positions of these words were in the entirety of the HTML using the following code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lolla.rb </span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Lolla</span>
</span><span class='line'>
</span><span class='line'>  <span class="vc">@@source</span> <span class="o">=</span> <span class="s2">&quot;http://www.lollapalooza.com&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="vc">@@doc</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:XML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="vc">@@source</span><span class="p">))</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search_index</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="vc">@@doc</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This returned 764 and 743 as the array index positions where &#8220;SOON&#8221; and &#8220;Souvenir&#8221; began if the entirety of the site&#8217;s text was strung together. So, I set these values as the values that I would check the site against periodically, so that if the words changed position (or disappeared entirely), that would mean that discounted tickets were available for purchase. I recognize that this is a pretty hairpin trigger, as in if a single letter was added to the text before the two keywords I was targeting, this would shoot off a text message to me. However, I figured that I&#8217;d rather have the script be too sensitive and notify me to check the site too often than to miss an opportunity to buy a ticket.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lolla.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Lolla</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">INDEX_CHECK</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:SOON</span> <span class="o">=&gt;</span> <span class="mi">764</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:Souvenir</span> <span class="o">=&gt;</span> <span class="mi">743</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Lolla</span><span class="o">.</span><span class="n">index_check</span><span class="o">[</span><span class="n">string</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">index_check</span>
</span><span class='line'>    <span class="no">INDEX_CHECK</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">index_changed?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">search_index</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">!=</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, I examined the structure of the element that encapsulated the Souvenir ticket indicator. I wrote a few methods that would check if an anchor tag or href attribute was added to the parent span. This way, if the organizers added a link to buy the tickets but for some reason forgot to change text, the notification would still trigger.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lolla.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Lolla</span>
</span><span class='line'>
</span><span class='line'>  <span class="vc">@@lolla_node</span> <span class="o">=</span> <span class="vc">@@doc</span><span class="o">.</span><span class="n">children</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">7</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">node_names</span>
</span><span class='line'>    <span class="n">children_names</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="no">Lolla</span><span class="o">.</span><span class="n">check_link</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
</span><span class='line'>      <span class="n">children_names</span> <span class="o">&lt;&lt;</span> <span class="n">node</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">children_names</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">node_contains_link?</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">node_names</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">node_names</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, I put it all together with the Twilio API and some control flow so that the script would check each of the three conditions sequentially and if they changed from their initial state, it would send me an SMS text message. If the condition didn&#8217;t change, it would print to a log notifying me that there were no changes to report along with a timestamp so that I could confirm when the script ran successfully.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lolla.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Lolla</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">check</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">index_changed?</span><span class="p">(</span><span class="s2">&quot;SOON&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Lolla</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;The placement of &#39;SOON&#39; changed on the Lollapalooza site!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Site changed! &#39;SOON&#39; was at </span><span class="si">#{</span><span class="no">Lolla</span><span class="o">.</span><span class="n">index_check</span><span class="o">[</span><span class="ss">:SOON</span><span class="o">]</span><span class="si">}</span><span class="s2"> before, now at </span><span class="si">#{</span><span class="no">Lolla</span><span class="o">.</span><span class="n">search_index</span><span class="p">(</span><span class="s2">&quot;SOON&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">index_changed?</span><span class="p">(</span><span class="s2">&quot;Souvenir&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Lolla</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;The placement of &#39;Souvenir&#39; changed on the Lollapalooza site!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Site changed! &#39;SOON&#39; was at </span><span class="si">#{</span><span class="no">Lolla</span><span class="o">.</span><span class="n">index_check</span><span class="o">[</span><span class="ss">:Souvenir</span><span class="o">]</span><span class="si">}</span><span class="s2"> before, now at </span><span class="si">#{</span><span class="no">Lolla</span><span class="o">.</span><span class="n">search_index</span><span class="p">(</span><span class="s2">&quot;Souvenir&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">node_contains_link?</span>
</span><span class='line'>      <span class="no">Lolla</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;A link has been added to the node on the Lollapalooza site!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Site changed!&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Checked at </span><span class="si">#{</span><span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2"> - No changes to report&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the entire script:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lolla.rb</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;twilio-ruby&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;date&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; Notify in the event of the following:</span>
</span><span class='line'>  <span class="c1"># =&gt; Initial location of &quot;Souvenir&quot; changes</span>
</span><span class='line'>  <span class="c1"># =&gt; Initial location of &quot;SOON&quot; changes</span>
</span><span class='line'>  <span class="c1"># =&gt; Addition of a link to the &quot;Souvenir&quot; text</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Lolla</span>
</span><span class='line'>
</span><span class='line'>  <span class="vc">@@account_sid</span> <span class="o">=</span> <span class="s1">&#39;################################&#39;</span>
</span><span class='line'>  <span class="vc">@@auth_token</span> <span class="o">=</span> <span class="s1">&#39;##############################&#39;</span>
</span><span class='line'>  <span class="vc">@@client</span> <span class="o">=</span> <span class="ss">Twilio</span><span class="p">:</span><span class="ss">:REST</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="vc">@@account_sid</span><span class="p">,</span> <span class="vc">@@auth_token</span>
</span><span class='line'>
</span><span class='line'>  <span class="vc">@@source</span> <span class="o">=</span> <span class="s2">&quot;http://www.lollapalooza.com&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="vc">@@doc</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:XML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="vc">@@source</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="vc">@@lolla_node</span> <span class="o">=</span> <span class="vc">@@doc</span><span class="o">.</span><span class="n">children</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">7</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">children</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">INDEX_CHECK</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:SOON</span> <span class="o">=&gt;</span> <span class="mi">764</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:Souvenir</span> <span class="o">=&gt;</span> <span class="mi">743</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">document</span>
</span><span class='line'>    <span class="vc">@@doc</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">search_index</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="vc">@@doc</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">index_changed?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">search_index</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">!=</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">index</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Lolla</span><span class="o">.</span><span class="n">index_check</span><span class="o">[</span><span class="n">string</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">index_check</span>
</span><span class='line'>    <span class="no">INDEX_CHECK</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">notify</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="vc">@@client</span><span class="o">.</span><span class="n">account</span><span class="o">.</span><span class="n">sms</span><span class="o">.</span><span class="n">messages</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:body</span> <span class="o">=&gt;</span> <span class="n">msg</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;+16303791842&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:from</span> <span class="o">=&gt;</span> <span class="s2">&quot;+17082219589&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Message sent!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">check_link</span>
</span><span class='line'>    <span class="vc">@@lolla_node</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">node_names</span>
</span><span class='line'>    <span class="n">children_names</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="no">Lolla</span><span class="o">.</span><span class="n">check_link</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">node</span><span class="o">|</span>
</span><span class='line'>      <span class="n">children_names</span> <span class="o">&lt;&lt;</span> <span class="n">node</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">children_names</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">node_contains_link?</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">node_names</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">node_names</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">check</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">index_changed?</span><span class="p">(</span><span class="s2">&quot;SOON&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Lolla</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;The placement of &#39;SOON&#39; changed on the Lollapalooza site!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Site changed! &#39;SOON&#39; was at </span><span class="si">#{</span><span class="no">Lolla</span><span class="o">.</span><span class="n">index_check</span><span class="o">[</span><span class="ss">:SOON</span><span class="o">]</span><span class="si">}</span><span class="s2"> before, now at </span><span class="si">#{</span><span class="no">Lolla</span><span class="o">.</span><span class="n">search_index</span><span class="p">(</span><span class="s2">&quot;SOON&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">index_changed?</span><span class="p">(</span><span class="s2">&quot;Souvenir&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Lolla</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;The placement of &#39;Souvenir&#39; changed on the Lollapalooza site!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Site changed! &#39;SOON&#39; was at </span><span class="si">#{</span><span class="no">Lolla</span><span class="o">.</span><span class="n">index_check</span><span class="o">[</span><span class="ss">:Souvenir</span><span class="o">]</span><span class="si">}</span><span class="s2"> before, now at </span><span class="si">#{</span><span class="no">Lolla</span><span class="o">.</span><span class="n">search_index</span><span class="p">(</span><span class="s2">&quot;Souvenir&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="no">Lolla</span><span class="o">.</span><span class="n">node_contains_link?</span>
</span><span class='line'>      <span class="no">Lolla</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="s2">&quot;A link has been added to the node on the Lollapalooza site!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Site changed!&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Checked at </span><span class="si">#{</span><span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2"> - No changes to report&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the script completed and working (I tested it first with my own blog - setting initial position values via Nokogiri then changing a few words and confirming that I got a text message from Twilio notifying me of the change), I then moved on to scheduling the task using Whenever. In case you don&#8217;t know what Whenever is, it&#8217;s a great, easy-to-use gem to schedule tasks (see <a href="http://eewang.github.com/blog/2013/03/12/how-to-schedule-tasks-using-whenever/" target="_blank">this blog post</a> for a more detailed explanation). All I did was create a rake task to run the &#8220;check&#8221; class method every minute and add the rake task to my cron task list using the schedule.rb file.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lolla.rake</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:lolla</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Check Lollapalooza site&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:check</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Lolla</span><span class="o">.</span><span class="n">check</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># schedule.rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:environment</span><span class="p">,</span> <span class="s2">&quot;development&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:output</span><span class="p">,</span> <span class="p">{</span><span class="ss">:error</span> <span class="o">=&gt;</span> <span class="s2">&quot;log/cron_error_log.log&quot;</span><span class="p">,</span> <span class="ss">:standard</span> <span class="o">=&gt;</span> <span class="s2">&quot;log/cron_log.log&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">every</span> <span class="mi">1</span><span class="o">.</span><span class="n">minute</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">rake</span> <span class="s2">&quot;lolla:check&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that was it! After setting up the script to run every minute, I just needed to keep my computer connected to the Internet and check the log periodically to confirm that it was running. There were a few timeout errors here and there, but for the most part, the script ran successfully every minute. Also, the script threw one false positive around 12:15 pm on Wednesday, which sent me scrambling to the site to buy tickets, only to find that in actuality, the script&#8217;s notification functionality was triggered by a minor change in the position of &#8220;SOON&#8221; and &#8220;Souvenir&#8221; on the site.</p>

<p>Writing a script to try and buy discounted tickets was a bittersweet experience. On the one hand, the script worked perfectly and notified me right when the site changed. On the other hand, I wasn&#8217;t able to get tickets. I&#8217;ll let these three screenshots and timestamps tell the story.</p>

<p><strong>5:34 pm</strong></p>

<p><img src="http://eewang.github.com/images/post_images/lollapalooza/lolla_before_2.png"></img></p>

<p><strong>5:35 pm</strong></p>

<p><img src="http://eewang.github.com/images/post_images/lollapalooza/lolla_frontgate.png"></img></p>

<p><strong>5:36 pm</strong></p>

<p><img src="http://eewang.github.com/images/post_images/lollapalooza/lolla_after_2.png"></img></p>

<p>The lesson here is that tickets sell out super fast. Next time I try and get an edge in buying tickets, I&#8217;ll try to optimize more for performance and maybe try and find a way to decrease the periodicity of my task to less than a minute, although I&#8217;d probably have more timeout errors and probably piss off the Lollapalooza system admins in the process. Also, since I wrote this script as quickly as I could (since the tickets could post at any minute), I could have also refactored and cleaned-up my code a bit more.</p>

<p>I&#8217;ve posted below my full scrape log. You&#8217;ll notice that there were some moments when the scrape wasn&#8217;t running - namely when my computer was turned off or I was not connected to the Internet. Despite the one false alarm, the script performed its task admirably - it notified me right when Souvenir tickets went on sale, at some point between 5:33 pm and  5:34 pm today. Unfortunately, my trigger finger was not fast enough, and even though I was able to click on the link to buy tickets (i.e., before they sold out), after Front Gate Tickets processed my request there were no more tickets remaining.</p>

<p>Oh well, I guess I&#8217;ll just have to wait in line with everybody else when Early Bird tickets go on sale next Tuesday at 10 am CST.</p>

<hr />

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
<span class='line-number'>801</span>
<span class='line-number'>802</span>
<span class='line-number'>803</span>
<span class='line-number'>804</span>
<span class='line-number'>805</span>
<span class='line-number'>806</span>
<span class='line-number'>807</span>
<span class='line-number'>808</span>
<span class='line-number'>809</span>
<span class='line-number'>810</span>
<span class='line-number'>811</span>
<span class='line-number'>812</span>
<span class='line-number'>813</span>
<span class='line-number'>814</span>
<span class='line-number'>815</span>
<span class='line-number'>816</span>
<span class='line-number'>817</span>
<span class='line-number'>818</span>
<span class='line-number'>819</span>
<span class='line-number'>820</span>
<span class='line-number'>821</span>
<span class='line-number'>822</span>
<span class='line-number'>823</span>
<span class='line-number'>824</span>
<span class='line-number'>825</span>
<span class='line-number'>826</span>
<span class='line-number'>827</span>
<span class='line-number'>828</span>
<span class='line-number'>829</span>
<span class='line-number'>830</span>
<span class='line-number'>831</span>
<span class='line-number'>832</span>
<span class='line-number'>833</span>
<span class='line-number'>834</span>
<span class='line-number'>835</span>
<span class='line-number'>836</span>
<span class='line-number'>837</span>
<span class='line-number'>838</span>
<span class='line-number'>839</span>
<span class='line-number'>840</span>
<span class='line-number'>841</span>
<span class='line-number'>842</span>
<span class='line-number'>843</span>
<span class='line-number'>844</span>
<span class='line-number'>845</span>
<span class='line-number'>846</span>
<span class='line-number'>847</span>
<span class='line-number'>848</span>
<span class='line-number'>849</span>
<span class='line-number'>850</span>
<span class='line-number'>851</span>
<span class='line-number'>852</span>
<span class='line-number'>853</span>
<span class='line-number'>854</span>
<span class='line-number'>855</span>
<span class='line-number'>856</span>
<span class='line-number'>857</span>
<span class='line-number'>858</span>
<span class='line-number'>859</span>
<span class='line-number'>860</span>
<span class='line-number'>861</span>
<span class='line-number'>862</span>
<span class='line-number'>863</span>
<span class='line-number'>864</span>
<span class='line-number'>865</span>
<span class='line-number'>866</span>
<span class='line-number'>867</span>
<span class='line-number'>868</span>
<span class='line-number'>869</span>
<span class='line-number'>870</span>
<span class='line-number'>871</span>
<span class='line-number'>872</span>
<span class='line-number'>873</span>
<span class='line-number'>874</span>
<span class='line-number'>875</span>
<span class='line-number'>876</span>
<span class='line-number'>877</span>
<span class='line-number'>878</span>
<span class='line-number'>879</span>
<span class='line-number'>880</span>
<span class='line-number'>881</span>
<span class='line-number'>882</span>
<span class='line-number'>883</span>
<span class='line-number'>884</span>
<span class='line-number'>885</span>
<span class='line-number'>886</span>
<span class='line-number'>887</span>
<span class='line-number'>888</span>
<span class='line-number'>889</span>
<span class='line-number'>890</span>
<span class='line-number'>891</span>
<span class='line-number'>892</span>
<span class='line-number'>893</span>
<span class='line-number'>894</span>
<span class='line-number'>895</span>
<span class='line-number'>896</span>
<span class='line-number'>897</span>
<span class='line-number'>898</span>
<span class='line-number'>899</span>
<span class='line-number'>900</span>
<span class='line-number'>901</span>
<span class='line-number'>902</span>
<span class='line-number'>903</span>
<span class='line-number'>904</span>
<span class='line-number'>905</span>
<span class='line-number'>906</span>
<span class='line-number'>907</span>
<span class='line-number'>908</span>
<span class='line-number'>909</span>
<span class='line-number'>910</span>
<span class='line-number'>911</span>
<span class='line-number'>912</span>
<span class='line-number'>913</span>
<span class='line-number'>914</span>
<span class='line-number'>915</span>
<span class='line-number'>916</span>
<span class='line-number'>917</span>
<span class='line-number'>918</span>
<span class='line-number'>919</span>
<span class='line-number'>920</span>
<span class='line-number'>921</span>
<span class='line-number'>922</span>
<span class='line-number'>923</span>
<span class='line-number'>924</span>
<span class='line-number'>925</span>
<span class='line-number'>926</span>
<span class='line-number'>927</span>
<span class='line-number'>928</span>
<span class='line-number'>929</span>
<span class='line-number'>930</span>
<span class='line-number'>931</span>
<span class='line-number'>932</span>
<span class='line-number'>933</span>
<span class='line-number'>934</span>
<span class='line-number'>935</span>
<span class='line-number'>936</span>
<span class='line-number'>937</span>
<span class='line-number'>938</span>
<span class='line-number'>939</span>
<span class='line-number'>940</span>
<span class='line-number'>941</span>
<span class='line-number'>942</span>
<span class='line-number'>943</span>
<span class='line-number'>944</span>
<span class='line-number'>945</span>
<span class='line-number'>946</span>
<span class='line-number'>947</span>
<span class='line-number'>948</span>
<span class='line-number'>949</span>
<span class='line-number'>950</span>
<span class='line-number'>951</span>
<span class='line-number'>952</span>
<span class='line-number'>953</span>
<span class='line-number'>954</span>
<span class='line-number'>955</span>
<span class='line-number'>956</span>
<span class='line-number'>957</span>
<span class='line-number'>958</span>
<span class='line-number'>959</span>
<span class='line-number'>960</span>
<span class='line-number'>961</span>
<span class='line-number'>962</span>
<span class='line-number'>963</span>
<span class='line-number'>964</span>
<span class='line-number'>965</span>
<span class='line-number'>966</span>
<span class='line-number'>967</span>
<span class='line-number'>968</span>
<span class='line-number'>969</span>
<span class='line-number'>970</span>
<span class='line-number'>971</span>
<span class='line-number'>972</span>
<span class='line-number'>973</span>
<span class='line-number'>974</span>
<span class='line-number'>975</span>
<span class='line-number'>976</span>
<span class='line-number'>977</span>
<span class='line-number'>978</span>
<span class='line-number'>979</span>
<span class='line-number'>980</span>
<span class='line-number'>981</span>
<span class='line-number'>982</span>
<span class='line-number'>983</span>
<span class='line-number'>984</span>
<span class='line-number'>985</span>
<span class='line-number'>986</span>
<span class='line-number'>987</span>
<span class='line-number'>988</span>
<span class='line-number'>989</span>
<span class='line-number'>990</span>
<span class='line-number'>991</span>
<span class='line-number'>992</span>
<span class='line-number'>993</span>
<span class='line-number'>994</span>
<span class='line-number'>995</span>
<span class='line-number'>996</span>
<span class='line-number'>997</span>
<span class='line-number'>998</span>
<span class='line-number'>999</span>
<span class='line-number'>1000</span>
<span class='line-number'>1001</span>
<span class='line-number'>1002</span>
<span class='line-number'>1003</span>
<span class='line-number'>1004</span>
<span class='line-number'>1005</span>
<span class='line-number'>1006</span>
<span class='line-number'>1007</span>
<span class='line-number'>1008</span>
<span class='line-number'>1009</span>
<span class='line-number'>1010</span>
<span class='line-number'>1011</span>
<span class='line-number'>1012</span>
<span class='line-number'>1013</span>
<span class='line-number'>1014</span>
<span class='line-number'>1015</span>
<span class='line-number'>1016</span>
<span class='line-number'>1017</span>
<span class='line-number'>1018</span>
<span class='line-number'>1019</span>
<span class='line-number'>1020</span>
<span class='line-number'>1021</span>
<span class='line-number'>1022</span>
<span class='line-number'>1023</span>
<span class='line-number'>1024</span>
<span class='line-number'>1025</span>
<span class='line-number'>1026</span>
<span class='line-number'>1027</span>
<span class='line-number'>1028</span>
<span class='line-number'>1029</span>
<span class='line-number'>1030</span>
<span class='line-number'>1031</span>
<span class='line-number'>1032</span>
<span class='line-number'>1033</span>
<span class='line-number'>1034</span>
<span class='line-number'>1035</span>
<span class='line-number'>1036</span>
<span class='line-number'>1037</span>
<span class='line-number'>1038</span>
<span class='line-number'>1039</span>
<span class='line-number'>1040</span>
<span class='line-number'>1041</span>
<span class='line-number'>1042</span>
<span class='line-number'>1043</span>
<span class='line-number'>1044</span>
<span class='line-number'>1045</span>
<span class='line-number'>1046</span>
<span class='line-number'>1047</span>
<span class='line-number'>1048</span>
<span class='line-number'>1049</span>
<span class='line-number'>1050</span>
<span class='line-number'>1051</span>
<span class='line-number'>1052</span>
<span class='line-number'>1053</span>
<span class='line-number'>1054</span>
<span class='line-number'>1055</span>
<span class='line-number'>1056</span>
<span class='line-number'>1057</span>
<span class='line-number'>1058</span>
<span class='line-number'>1059</span>
<span class='line-number'>1060</span>
<span class='line-number'>1061</span>
<span class='line-number'>1062</span>
<span class='line-number'>1063</span>
<span class='line-number'>1064</span>
<span class='line-number'>1065</span>
<span class='line-number'>1066</span>
<span class='line-number'>1067</span>
<span class='line-number'>1068</span>
<span class='line-number'>1069</span>
<span class='line-number'>1070</span>
<span class='line-number'>1071</span>
<span class='line-number'>1072</span>
<span class='line-number'>1073</span>
<span class='line-number'>1074</span>
<span class='line-number'>1075</span>
<span class='line-number'>1076</span>
<span class='line-number'>1077</span>
<span class='line-number'>1078</span>
<span class='line-number'>1079</span>
<span class='line-number'>1080</span>
<span class='line-number'>1081</span>
<span class='line-number'>1082</span>
<span class='line-number'>1083</span>
<span class='line-number'>1084</span>
<span class='line-number'>1085</span>
<span class='line-number'>1086</span>
<span class='line-number'>1087</span>
<span class='line-number'>1088</span>
<span class='line-number'>1089</span>
<span class='line-number'>1090</span>
<span class='line-number'>1091</span>
<span class='line-number'>1092</span>
<span class='line-number'>1093</span>
<span class='line-number'>1094</span>
<span class='line-number'>1095</span>
<span class='line-number'>1096</span>
<span class='line-number'>1097</span>
<span class='line-number'>1098</span>
<span class='line-number'>1099</span>
<span class='line-number'>1100</span>
<span class='line-number'>1101</span>
<span class='line-number'>1102</span>
<span class='line-number'>1103</span>
<span class='line-number'>1104</span>
<span class='line-number'>1105</span>
<span class='line-number'>1106</span>
<span class='line-number'>1107</span>
<span class='line-number'>1108</span>
<span class='line-number'>1109</span>
<span class='line-number'>1110</span>
<span class='line-number'>1111</span>
<span class='line-number'>1112</span>
<span class='line-number'>1113</span>
<span class='line-number'>1114</span>
<span class='line-number'>1115</span>
<span class='line-number'>1116</span>
<span class='line-number'>1117</span>
<span class='line-number'>1118</span>
<span class='line-number'>1119</span>
<span class='line-number'>1120</span>
<span class='line-number'>1121</span>
<span class='line-number'>1122</span>
<span class='line-number'>1123</span>
<span class='line-number'>1124</span>
<span class='line-number'>1125</span>
<span class='line-number'>1126</span>
<span class='line-number'>1127</span>
<span class='line-number'>1128</span>
<span class='line-number'>1129</span>
<span class='line-number'>1130</span>
<span class='line-number'>1131</span>
<span class='line-number'>1132</span>
<span class='line-number'>1133</span>
<span class='line-number'>1134</span>
<span class='line-number'>1135</span>
<span class='line-number'>1136</span>
<span class='line-number'>1137</span>
<span class='line-number'>1138</span>
<span class='line-number'>1139</span>
<span class='line-number'>1140</span>
<span class='line-number'>1141</span>
<span class='line-number'>1142</span>
<span class='line-number'>1143</span>
<span class='line-number'>1144</span>
<span class='line-number'>1145</span>
<span class='line-number'>1146</span>
<span class='line-number'>1147</span>
<span class='line-number'>1148</span>
<span class='line-number'>1149</span>
<span class='line-number'>1150</span>
<span class='line-number'>1151</span>
<span class='line-number'>1152</span>
<span class='line-number'>1153</span>
<span class='line-number'>1154</span>
<span class='line-number'>1155</span>
<span class='line-number'>1156</span>
<span class='line-number'>1157</span>
<span class='line-number'>1158</span>
<span class='line-number'>1159</span>
<span class='line-number'>1160</span>
<span class='line-number'>1161</span>
<span class='line-number'>1162</span>
<span class='line-number'>1163</span>
<span class='line-number'>1164</span>
<span class='line-number'>1165</span>
<span class='line-number'>1166</span>
<span class='line-number'>1167</span>
<span class='line-number'>1168</span>
<span class='line-number'>1169</span>
<span class='line-number'>1170</span>
<span class='line-number'>1171</span>
<span class='line-number'>1172</span>
<span class='line-number'>1173</span>
<span class='line-number'>1174</span>
<span class='line-number'>1175</span>
<span class='line-number'>1176</span>
<span class='line-number'>1177</span>
<span class='line-number'>1178</span>
<span class='line-number'>1179</span>
<span class='line-number'>1180</span>
<span class='line-number'>1181</span>
<span class='line-number'>1182</span>
<span class='line-number'>1183</span>
<span class='line-number'>1184</span>
<span class='line-number'>1185</span>
<span class='line-number'>1186</span>
<span class='line-number'>1187</span>
<span class='line-number'>1188</span>
<span class='line-number'>1189</span>
<span class='line-number'>1190</span>
<span class='line-number'>1191</span>
<span class='line-number'>1192</span>
<span class='line-number'>1193</span>
<span class='line-number'>1194</span>
<span class='line-number'>1195</span>
<span class='line-number'>1196</span>
<span class='line-number'>1197</span>
<span class='line-number'>1198</span>
<span class='line-number'>1199</span>
<span class='line-number'>1200</span>
<span class='line-number'>1201</span>
<span class='line-number'>1202</span>
<span class='line-number'>1203</span>
<span class='line-number'>1204</span>
<span class='line-number'>1205</span>
<span class='line-number'>1206</span>
<span class='line-number'>1207</span>
<span class='line-number'>1208</span>
<span class='line-number'>1209</span>
<span class='line-number'>1210</span>
<span class='line-number'>1211</span>
<span class='line-number'>1212</span>
<span class='line-number'>1213</span>
<span class='line-number'>1214</span>
<span class='line-number'>1215</span>
<span class='line-number'>1216</span>
<span class='line-number'>1217</span>
<span class='line-number'>1218</span>
<span class='line-number'>1219</span>
<span class='line-number'>1220</span>
<span class='line-number'>1221</span>
<span class='line-number'>1222</span>
<span class='line-number'>1223</span>
<span class='line-number'>1224</span>
<span class='line-number'>1225</span>
<span class='line-number'>1226</span>
<span class='line-number'>1227</span>
<span class='line-number'>1228</span>
<span class='line-number'>1229</span>
<span class='line-number'>1230</span>
<span class='line-number'>1231</span>
<span class='line-number'>1232</span>
<span class='line-number'>1233</span>
<span class='line-number'>1234</span>
<span class='line-number'>1235</span>
<span class='line-number'>1236</span>
<span class='line-number'>1237</span>
<span class='line-number'>1238</span>
<span class='line-number'>1239</span>
<span class='line-number'>1240</span>
<span class='line-number'>1241</span>
<span class='line-number'>1242</span>
<span class='line-number'>1243</span>
<span class='line-number'>1244</span>
<span class='line-number'>1245</span>
<span class='line-number'>1246</span>
<span class='line-number'>1247</span>
<span class='line-number'>1248</span>
<span class='line-number'>1249</span>
<span class='line-number'>1250</span>
<span class='line-number'>1251</span>
<span class='line-number'>1252</span>
<span class='line-number'>1253</span>
<span class='line-number'>1254</span>
<span class='line-number'>1255</span>
<span class='line-number'>1256</span>
<span class='line-number'>1257</span>
<span class='line-number'>1258</span>
<span class='line-number'>1259</span>
<span class='line-number'>1260</span>
<span class='line-number'>1261</span>
<span class='line-number'>1262</span>
<span class='line-number'>1263</span>
<span class='line-number'>1264</span>
<span class='line-number'>1265</span>
<span class='line-number'>1266</span>
<span class='line-number'>1267</span>
<span class='line-number'>1268</span>
<span class='line-number'>1269</span>
<span class='line-number'>1270</span>
<span class='line-number'>1271</span>
<span class='line-number'>1272</span>
<span class='line-number'>1273</span>
<span class='line-number'>1274</span>
<span class='line-number'>1275</span>
<span class='line-number'>1276</span>
<span class='line-number'>1277</span>
<span class='line-number'>1278</span>
<span class='line-number'>1279</span>
<span class='line-number'>1280</span>
<span class='line-number'>1281</span>
<span class='line-number'>1282</span>
<span class='line-number'>1283</span>
<span class='line-number'>1284</span>
<span class='line-number'>1285</span>
<span class='line-number'>1286</span>
<span class='line-number'>1287</span>
<span class='line-number'>1288</span>
<span class='line-number'>1289</span>
<span class='line-number'>1290</span>
<span class='line-number'>1291</span>
<span class='line-number'>1292</span>
<span class='line-number'>1293</span>
<span class='line-number'>1294</span>
<span class='line-number'>1295</span>
<span class='line-number'>1296</span>
<span class='line-number'>1297</span>
<span class='line-number'>1298</span>
<span class='line-number'>1299</span>
<span class='line-number'>1300</span>
<span class='line-number'>1301</span>
<span class='line-number'>1302</span>
<span class='line-number'>1303</span>
<span class='line-number'>1304</span>
<span class='line-number'>1305</span>
<span class='line-number'>1306</span>
<span class='line-number'>1307</span>
<span class='line-number'>1308</span>
<span class='line-number'>1309</span>
<span class='line-number'>1310</span>
<span class='line-number'>1311</span>
<span class='line-number'>1312</span>
<span class='line-number'>1313</span>
<span class='line-number'>1314</span>
<span class='line-number'>1315</span>
<span class='line-number'>1316</span>
<span class='line-number'>1317</span>
<span class='line-number'>1318</span>
<span class='line-number'>1319</span>
<span class='line-number'>1320</span>
<span class='line-number'>1321</span>
<span class='line-number'>1322</span>
<span class='line-number'>1323</span>
<span class='line-number'>1324</span>
<span class='line-number'>1325</span>
<span class='line-number'>1326</span>
<span class='line-number'>1327</span>
<span class='line-number'>1328</span>
<span class='line-number'>1329</span>
<span class='line-number'>1330</span>
<span class='line-number'>1331</span>
<span class='line-number'>1332</span>
<span class='line-number'>1333</span>
<span class='line-number'>1334</span>
<span class='line-number'>1335</span>
<span class='line-number'>1336</span>
<span class='line-number'>1337</span>
<span class='line-number'>1338</span>
<span class='line-number'>1339</span>
<span class='line-number'>1340</span>
<span class='line-number'>1341</span>
<span class='line-number'>1342</span>
<span class='line-number'>1343</span>
<span class='line-number'>1344</span>
<span class='line-number'>1345</span>
<span class='line-number'>1346</span>
<span class='line-number'>1347</span>
<span class='line-number'>1348</span>
<span class='line-number'>1349</span>
<span class='line-number'>1350</span>
<span class='line-number'>1351</span>
<span class='line-number'>1352</span>
<span class='line-number'>1353</span>
<span class='line-number'>1354</span>
<span class='line-number'>1355</span>
<span class='line-number'>1356</span>
<span class='line-number'>1357</span>
<span class='line-number'>1358</span>
<span class='line-number'>1359</span>
<span class='line-number'>1360</span>
<span class='line-number'>1361</span>
<span class='line-number'>1362</span>
<span class='line-number'>1363</span>
<span class='line-number'>1364</span>
<span class='line-number'>1365</span>
<span class='line-number'>1366</span>
<span class='line-number'>1367</span>
<span class='line-number'>1368</span>
<span class='line-number'>1369</span>
<span class='line-number'>1370</span>
<span class='line-number'>1371</span>
<span class='line-number'>1372</span>
<span class='line-number'>1373</span>
<span class='line-number'>1374</span>
<span class='line-number'>1375</span>
<span class='line-number'>1376</span>
<span class='line-number'>1377</span>
<span class='line-number'>1378</span>
<span class='line-number'>1379</span>
<span class='line-number'>1380</span>
<span class='line-number'>1381</span>
<span class='line-number'>1382</span>
<span class='line-number'>1383</span>
<span class='line-number'>1384</span>
<span class='line-number'>1385</span>
<span class='line-number'>1386</span>
<span class='line-number'>1387</span>
<span class='line-number'>1388</span>
<span class='line-number'>1389</span>
<span class='line-number'>1390</span>
<span class='line-number'>1391</span>
<span class='line-number'>1392</span>
<span class='line-number'>1393</span>
<span class='line-number'>1394</span>
<span class='line-number'>1395</span>
<span class='line-number'>1396</span>
<span class='line-number'>1397</span>
<span class='line-number'>1398</span>
<span class='line-number'>1399</span>
<span class='line-number'>1400</span>
<span class='line-number'>1401</span>
<span class='line-number'>1402</span>
<span class='line-number'>1403</span>
<span class='line-number'>1404</span>
<span class='line-number'>1405</span>
<span class='line-number'>1406</span>
<span class='line-number'>1407</span>
<span class='line-number'>1408</span>
<span class='line-number'>1409</span>
<span class='line-number'>1410</span>
<span class='line-number'>1411</span>
<span class='line-number'>1412</span>
<span class='line-number'>1413</span>
<span class='line-number'>1414</span>
<span class='line-number'>1415</span>
<span class='line-number'>1416</span>
<span class='line-number'>1417</span>
<span class='line-number'>1418</span>
<span class='line-number'>1419</span>
<span class='line-number'>1420</span>
<span class='line-number'>1421</span>
<span class='line-number'>1422</span>
<span class='line-number'>1423</span>
<span class='line-number'>1424</span>
<span class='line-number'>1425</span>
<span class='line-number'>1426</span>
<span class='line-number'>1427</span>
<span class='line-number'>1428</span>
<span class='line-number'>1429</span>
<span class='line-number'>1430</span>
<span class='line-number'>1431</span>
<span class='line-number'>1432</span>
<span class='line-number'>1433</span>
<span class='line-number'>1434</span>
<span class='line-number'>1435</span>
<span class='line-number'>1436</span>
<span class='line-number'>1437</span>
<span class='line-number'>1438</span>
<span class='line-number'>1439</span>
<span class='line-number'>1440</span>
<span class='line-number'>1441</span>
<span class='line-number'>1442</span>
<span class='line-number'>1443</span>
<span class='line-number'>1444</span>
<span class='line-number'>1445</span>
<span class='line-number'>1446</span>
<span class='line-number'>1447</span>
<span class='line-number'>1448</span>
<span class='line-number'>1449</span>
<span class='line-number'>1450</span>
<span class='line-number'>1451</span>
<span class='line-number'>1452</span>
<span class='line-number'>1453</span>
<span class='line-number'>1454</span>
<span class='line-number'>1455</span>
<span class='line-number'>1456</span>
<span class='line-number'>1457</span>
<span class='line-number'>1458</span>
<span class='line-number'>1459</span>
<span class='line-number'>1460</span>
<span class='line-number'>1461</span>
<span class='line-number'>1462</span>
<span class='line-number'>1463</span>
<span class='line-number'>1464</span>
<span class='line-number'>1465</span>
<span class='line-number'>1466</span>
<span class='line-number'>1467</span>
<span class='line-number'>1468</span>
<span class='line-number'>1469</span>
<span class='line-number'>1470</span>
<span class='line-number'>1471</span>
<span class='line-number'>1472</span>
<span class='line-number'>1473</span>
<span class='line-number'>1474</span>
<span class='line-number'>1475</span>
<span class='line-number'>1476</span>
<span class='line-number'>1477</span>
<span class='line-number'>1478</span>
<span class='line-number'>1479</span>
<span class='line-number'>1480</span>
<span class='line-number'>1481</span>
<span class='line-number'>1482</span>
<span class='line-number'>1483</span>
<span class='line-number'>1484</span>
<span class='line-number'>1485</span>
<span class='line-number'>1486</span>
<span class='line-number'>1487</span>
<span class='line-number'>1488</span>
<span class='line-number'>1489</span>
<span class='line-number'>1490</span>
<span class='line-number'>1491</span>
<span class='line-number'>1492</span>
<span class='line-number'>1493</span>
<span class='line-number'>1494</span>
<span class='line-number'>1495</span>
<span class='line-number'>1496</span>
<span class='line-number'>1497</span>
<span class='line-number'>1498</span>
<span class='line-number'>1499</span>
<span class='line-number'>1500</span>
<span class='line-number'>1501</span>
<span class='line-number'>1502</span>
<span class='line-number'>1503</span>
<span class='line-number'>1504</span>
<span class='line-number'>1505</span>
<span class='line-number'>1506</span>
<span class='line-number'>1507</span>
<span class='line-number'>1508</span>
<span class='line-number'>1509</span>
<span class='line-number'>1510</span>
<span class='line-number'>1511</span>
<span class='line-number'>1512</span>
<span class='line-number'>1513</span>
<span class='line-number'>1514</span>
<span class='line-number'>1515</span>
<span class='line-number'>1516</span>
<span class='line-number'>1517</span>
<span class='line-number'>1518</span>
<span class='line-number'>1519</span>
<span class='line-number'>1520</span>
<span class='line-number'>1521</span>
<span class='line-number'>1522</span>
<span class='line-number'>1523</span>
<span class='line-number'>1524</span>
<span class='line-number'>1525</span>
<span class='line-number'>1526</span>
<span class='line-number'>1527</span>
<span class='line-number'>1528</span>
<span class='line-number'>1529</span>
<span class='line-number'>1530</span>
<span class='line-number'>1531</span>
<span class='line-number'>1532</span>
<span class='line-number'>1533</span>
<span class='line-number'>1534</span>
<span class='line-number'>1535</span>
<span class='line-number'>1536</span>
<span class='line-number'>1537</span>
<span class='line-number'>1538</span>
<span class='line-number'>1539</span>
<span class='line-number'>1540</span>
<span class='line-number'>1541</span>
<span class='line-number'>1542</span>
<span class='line-number'>1543</span>
<span class='line-number'>1544</span>
<span class='line-number'>1545</span>
<span class='line-number'>1546</span>
<span class='line-number'>1547</span>
<span class='line-number'>1548</span>
<span class='line-number'>1549</span>
<span class='line-number'>1550</span>
<span class='line-number'>1551</span>
<span class='line-number'>1552</span>
<span class='line-number'>1553</span>
<span class='line-number'>1554</span>
<span class='line-number'>1555</span>
<span class='line-number'>1556</span>
<span class='line-number'>1557</span>
<span class='line-number'>1558</span>
<span class='line-number'>1559</span>
<span class='line-number'>1560</span>
<span class='line-number'>1561</span>
<span class='line-number'>1562</span>
<span class='line-number'>1563</span>
<span class='line-number'>1564</span>
<span class='line-number'>1565</span>
<span class='line-number'>1566</span>
<span class='line-number'>1567</span>
<span class='line-number'>1568</span>
<span class='line-number'>1569</span>
<span class='line-number'>1570</span>
<span class='line-number'>1571</span>
<span class='line-number'>1572</span>
<span class='line-number'>1573</span>
<span class='line-number'>1574</span>
<span class='line-number'>1575</span>
<span class='line-number'>1576</span>
<span class='line-number'>1577</span>
<span class='line-number'>1578</span>
<span class='line-number'>1579</span>
<span class='line-number'>1580</span>
<span class='line-number'>1581</span>
<span class='line-number'>1582</span>
<span class='line-number'>1583</span>
<span class='line-number'>1584</span>
<span class='line-number'>1585</span>
<span class='line-number'>1586</span>
<span class='line-number'>1587</span>
<span class='line-number'>1588</span>
<span class='line-number'>1589</span>
<span class='line-number'>1590</span>
<span class='line-number'>1591</span>
<span class='line-number'>1592</span>
<span class='line-number'>1593</span>
<span class='line-number'>1594</span>
<span class='line-number'>1595</span>
<span class='line-number'>1596</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Checked at 2013-03-19T22:46:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T22:47:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T22:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T22:49:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T22:50:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T22:52:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T22:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T22:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T22:56:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T22:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T22:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T22:59:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T23:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T23:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T23:02:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T23:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T23:04:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T23:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T23:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T23:07:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-19T23:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T00:09:09-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T00:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T00:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T00:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T01:14:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T01:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T01:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T01:17:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T01:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T01:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T01:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T01:21:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T01:22:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T01:23:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T01:24:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T02:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T06:50:09-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T06:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T06:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T06:53:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T06:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T06:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T06:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T06:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T06:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T06:59:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:01:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:05:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:10:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:13:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:15:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:17:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:20:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:22:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:23:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:46:25-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:50:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:53:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:56:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T07:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:09:32-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:12:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:14:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:15:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:17:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:19:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:21:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:47:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:48:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:50:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:52:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:55:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:57:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T08:59:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:02:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:03:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:05:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:07:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:09:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:11:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:14:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:16:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:17:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:18:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:22:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:25:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:26:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:28:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:30:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:31:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:33:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:34:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:36:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:38:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:54:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:56:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:57:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:58:27-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T09:59:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:00:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:02:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:05:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:07:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:10:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:12:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:14:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:15:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:17:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:18:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:21:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:30:59-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:31:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:32:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:34:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:35:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:36:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:38:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:39:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:42:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:44:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:45:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:46:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:47:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:51:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:52:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:54:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:55:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T10:59:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:00:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:01:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:03:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:05:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:08:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:09:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:11:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:12:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:17:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:19:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:21:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:22:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:23:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:28:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:32:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:34:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:35:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:38:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:42:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:45:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:46:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:47:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:56:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:58:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T11:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:05:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:08:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:09:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:12:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:14:03-04:00 - No changes to report
</span><span class='line'>Message sent!
</span><span class='line'>Site changed!
</span><span class='line'>Message sent!
</span><span class='line'>Site changed!
</span><span class='line'>Message sent!
</span><span class='line'>Site changed!
</span><span class='line'>Message sent!
</span><span class='line'>Site changed!
</span><span class='line'>Checked at 2013-03-20T12:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:33:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:34:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:35:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:38:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:42:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:45:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:46:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:50:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:51:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:53:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:54:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T12:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:01:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:06:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:07:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:08:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:12:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:14:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:16:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:17:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:20:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:21:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:22:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:24:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:26:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:29:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:31:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:34:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:35:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:36:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:38:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:40:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:41:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:42:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:43:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:45:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:46:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:47:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:50:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:52:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:53:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:54:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:55:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:56:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T13:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:00:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:02:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:03:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:05:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:07:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:09:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:10:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:11:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:12:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:16:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:17:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:20:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:22:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:28:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:29:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:32:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:34:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:38:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:39:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:40:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:41:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:42:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:43:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:44:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:45:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:46:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:49:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:50:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:51:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:54:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:56:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T14:59:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:00:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:02:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:06:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:07:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:10:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:11:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:14:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:16:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:17:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:18:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:19:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:22:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:23:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:26:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:27:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:34:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:37:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:38:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:39:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:40:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:42:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:43:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:45:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:46:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:47:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:50:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:53:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:55:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:56:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T15:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:00:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:01:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:05:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:06:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:07:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:09:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:10:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:13:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:14:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:15:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:17:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:18:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:20:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:22:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:23:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:24:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:25:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:26:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:27:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:28:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:29:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:33:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:34:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:35:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:36:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:37:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:38:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:39:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:40:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:42:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:43:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:45:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:46:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:48:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:49:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:54:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:57:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T16:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:00:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:01:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:02:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:04:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:05:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:06:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:08:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:10:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:11:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:14:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:17:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:20:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:21:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:22:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:24:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:27:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:29:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:31:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:32:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:34:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:35:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:36:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:37:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:38:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:41:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:42:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:43:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:45:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:46:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:50:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:51:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:52:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:53:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:54:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:55:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:57:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:58:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T17:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:00:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:02:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:03:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:05:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:07:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:10:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:12:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:15:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:17:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:20:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:22:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:25:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:26:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:32:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:34:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:38:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:40:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:41:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:42:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:43:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T18:45:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:36:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:38:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:40:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:42:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:44:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:45:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:46:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:48:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:51:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:52:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:56:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T21:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:05:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:38:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:39:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:42:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:44:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:51:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:52:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:53:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:56:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:57:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:58:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T22:59:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:02:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:10:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:15:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:16:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:17:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:19:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:22:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:25:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:27:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:28:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:29:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:34:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:36:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:38:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:42:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:45:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:46:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:54:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-20T23:59:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:30:17-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:34:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:35:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:38:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:42:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:45:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:46:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:48:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T00:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:07:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:14:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:16:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:17:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:18:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:20:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:22:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:24:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:25:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:28:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:29:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:40:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:41:08-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:48:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:48:13-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:49:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:52:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:56:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:57:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T01:59:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:00:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:08:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:18:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:27:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:30:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:32:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:33:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:34:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:36:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:38:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:41:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:42:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:43:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:45:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:46:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:48:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:50:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:52:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T02:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:15:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:18:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:19:23-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:24:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:31:15-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:32:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:36:16-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:39:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:46:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T03:58:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:00:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:04:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:09:08-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:10:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:16:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:19:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:29:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:31:40-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:33:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:34:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:37:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:42:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:45:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:46:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:51:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:56:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T04:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:05:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:15:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:17:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:20:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:22:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:23:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:29:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:30:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:34:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:35:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:36:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:37:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:38:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:40:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:42:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:45:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:46:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:51:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:53:21-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:57:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T05:59:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:01:23-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:02:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:06:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:09:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:15:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:17:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:20:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:21:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:22:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:23:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:26:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:28:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:30:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:32:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:33:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:34:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:37:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:39:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:40:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:45:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:47:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:49:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:50:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:52:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:56:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T06:59:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:03:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:05:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:06:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:09:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:11:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:12:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:13:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:17:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:20:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:22:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:23:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:27:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:31:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:37:21-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:38:16-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:41:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:45:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:47:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T07:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:06:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:07:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:17:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:18:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:22:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:28:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:29:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:34:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T08:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:05:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:11:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:17:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:20:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:22:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:25:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:28:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:34:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:38:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:42:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:45:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:46:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:48:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:50:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:51:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:54:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T09:59:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:00:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:01:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:02:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:03:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:04:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:09:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:11:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:12:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:17:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:18:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:21:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:22:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:23:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:24:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:27:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:29:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:31:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:34:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:35:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:37:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:38:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:41:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:42:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:44:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:45:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:46:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:49:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:56:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T10:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:02:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:03:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:08:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:09:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:12:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:16:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:17:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:18:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:19:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:22:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:25:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:26:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:29:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:31:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:33:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:34:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:35:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:38:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:40:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:41:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:42:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:45:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:46:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:47:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:48:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:51:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:52:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:53:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:54:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T11:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T12:00:08-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T12:01:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:21:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:22:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:28:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:30:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:31:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:33:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:34:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:38:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:40:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:42:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:45:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:46:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:49:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:51:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:58:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T13:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:00:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:06:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:08:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:09:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:10:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:11:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:13:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:14:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:15:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:16:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:17:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:19:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:20:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:22:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:23:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:24:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:25:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:26:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:27:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:31:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:33:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:34:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:38:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:42:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:45:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:46:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:47:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:50:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:51:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:52:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:53:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:54:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:55:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:57:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:58:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T14:59:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:00:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:02:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:03:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:07:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:08:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:09:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:10:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:11:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:14:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:15:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:17:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:18:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:19:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:22:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:23:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:24:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:25:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:27:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:30:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:32:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:33:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:34:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:35:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:36:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:38:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:39:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:40:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:41:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:42:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:43:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:44:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:45:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:46:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:48:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:49:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:50:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:51:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:52:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:53:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:55:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:56:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:57:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:58:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T15:59:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:00:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:01:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:02:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:03:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:05:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:08:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:09:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:10:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:11:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:12:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:14:08-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:15:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:16:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:17:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:18:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:19:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:20:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:21:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:22:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:23:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:24:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:25:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:26:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:27:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:28:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:29:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:30:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:32:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:33:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:34:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:35:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:36:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:37:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:38:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:39:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:40:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:41:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:42:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:43:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:44:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:45:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:46:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:47:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:48:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:49:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:50:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:51:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:52:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:53:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:54:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:55:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:56:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:57:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:58:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T16:59:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:00:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:01:07-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:02:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:03:02-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:04:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:05:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:06:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:07:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:08:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:09:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:10:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:11:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:12:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:13:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:14:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:15:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:16:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:17:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:18:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:19:05-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:20:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:21:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:22:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:23:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:24:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:25:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:26:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:27:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:28:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:29:04-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:30:06-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:31:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:32:03-04:00 - No changes to report
</span><span class='line'>Checked at 2013-03-21T17:33:05-04:00 - No changes to report
</span><span class='line'>Message sent!
</span><span class='line'>Site changed! 'SOON' was at 764 before, now at 797.
</span><span class='line'>Message sent!
</span><span class='line'>Site changed! 'SOON' was at 764 before, now at 797.
</span><span class='line'>Message sent!
</span><span class='line'>Site changed! 'SOON' was at 764 before, now at 797.
</span><span class='line'>Message sent!
</span><span class='line'>Site changed! 'SOON' was at 764 before, now at 797.</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Week 6]]></title>
    <link href="http://eewang.github.com/blog/2013/03/17/flatiron-week-6/"/>
    <updated>2013-03-17T10:14:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/03/17/flatiron-week-6</id>
    <content type="html"><![CDATA[<p>Today marked the half-way point for the Flatiron program. This past week was heavy on Ruby on Rails instruction; Avi wanted to hammer into us the importance of understanding complex forms and working with multiple, associated models. On Monday, we brainstormed ideas for our final group projects and went through a planning session where we discussed ideas at a high-level - the features, technical obstacles and work sprints that we could tackle within the short timeframe for development.</p>

<!--more-->


<p>Throughout the week, I tried to implement the lecture content into my side project. Learning forms was challenging, and I&#8217;m glad that Avi and Bob spent a lot of time on the topic. The previous week, I had tried to implement a &#8220;favorites&#8221; form for users of my ticket tracker application, basically allowing users to tag sporting events or concerts as favorites. Eventually, I want this functionality to drive my API calls and analytics; rather than make a large number of unnecessary API calls, I want users to tell me what they want to look for and then enable the application to retrieve the data they want. Attempting to build out the form before covering the topic in class was difficult - I could never quite get the params hash working correctly, and I hadn&#8217;t made the proper inter-model associations. However, after much lecture and review this past week, I was finally able to get that functionality working in my application.</p>

<p>In addition to working on forms this week, I also restructured my schema and models. In previous iterations of my application, I had been retrieving data on a periodic basis and saving all the data to a single table. This created considerable data duplication, as many attributes for a given concert or sporting event are not going to change on a daily basis (e.g., event date or venue). I came to the realization that a single API call for a given concert on a given day actually could be broken down into three tables - one for the actual concert, one for the concert listing and one for the concert listing quote for that specific day. Thus, I restarted my application with this in mind and broke up the process of saving data into a three-step waterfall so that I would get all necessary data, but nothing more.</p>

<p>For example, say I make a call to the Stubhub API for event information about <a href="http://electricdaisycarnival.com/NewYork/" target="_blank">Electric Daisy Carnival - New York</a> (EDC). That API call actually returns to me information about 4 separate &#8220;events&#8221; - EDC 3-Day Pass, EDC Friday Only, EDC Saturday Only and EDC Sunday Only. The data is structured as JSON, and each hash has data fields that cover both daily static information - event date, venue, city, etc. - and daily dynamic information - minimum price, total tickets available, etc. Before, I had been saving all this information in the same table, but this past week, I broke it out into three tables, so that an API call for EDC will create 1 row in my concerts table, 4 rows in my concert_listings table and 4 rows in my concert_listing_quotes table. An API call tomorrow will create 4 new rows only in my concert_listing_quotes table, assuming that there are no new concert listings (an example might be EDC - NY After Party Tickets). I refactored my code so that each API call goes through a waterfall, checking for whether the relevant level of concert abstraction (a concert, concert listing or concert listing quote) already exists in the tables. If it does, great - move on. If it doesn&#8217;t, save a row to the database.</p>

<p>Refactoring the code in this way plus adding in the proper associations (a concert has many concert listings, which have many concert listing quotes) made it much easier for me to traverse my models and move quickly from an individual user instance to what he or she favorited, through a FavoriteConcert model. My API calls take less time to run, and my application loads faster. All in all, I got a good lesson in the value of refactoring this past week and the benefit of adding reasonable layers of abstraction.</p>

<p>In addition to coding, I&#8217;ve been reading Sandi Metz&#8217;s book on design - Practical Object Oriented Design in Ruby, or POODR. Going through POODR has been great in conceptualizing design best practices and taking a step back from coding to think through how to balance technical specificity with product flexibility. Sandi Metz has a great way of interjecting pithy, memorable statements about design that are great to keep in the back of your mind while designing an application. I&#8217;m hoping to finish up the book this week, at which point I&#8217;ll write a longer post with my review and thoughts on the book.</p>
]]></content>
  </entry>
  
</feed>
