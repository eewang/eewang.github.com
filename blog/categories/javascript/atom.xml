<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | eugenius]]></title>
  <link href="http://eewang.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://eewang.github.com/"/>
  <updated>2014-09-25T21:15:56-04:00</updated>
  <id>http://eewang.github.com/</id>
  <author>
    <name><![CDATA[Eugene Wang]]></name>
    <email><![CDATA[eugene.wang.77@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flatiron - Week 5]]></title>
    <link href="http://eewang.github.com/blog/2013/03/09/flatiron-week-5/"/>
    <updated>2013-03-09T09:02:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/03/09/flatiron-week-5</id>
    <content type="html"><![CDATA[<p>When I started at Flatiron, I set myself a goal of trying to blog every day. That goal pretty quickly fell to the wayside, as I realized how much work would be involved just coding and learning alone. Also, after the first few days, the lessons began to group together in longer, multi-day themes - e.g., Rails. This week, the theme was Javascript/jQuery, which controls front-end user interaction and serves as an intermediate, client-side programming language between the user and the back-end (Ruby on Rails, in our case). Learning JS brought together the whole concept of web development, and it really helped coalesce my understanding of how users interact with web applications and send data to and retrieve data from the application's back-end.</p>

<!--more-->


<p>To be honest, I have mixed feelings about Javascript. On the one hand, it seems to be a powerful, versatile language that increasingly is being used as a server-side language through frameworks like <a href="http://nodejs.org" target="_blank">Node.js</a>. On the other hand, however, it feels a little clunky to me after learning Ruby. Compared to Ruby, Javascript is syntax heavy, littered with seemingly unnecessary semicolons and braces. This past week, there were definitely moments of frustration when I couldn't get my Javascript to work because of a missing semi-colon or a misplaced bracket. I found myself scouring my code to ensure that every open parenthesis or bracket had a corresponding closing character. Additionally, I started to inadvertantly use semicolons to end statements in my Ruby code. Good thing that Ruby is pretty flexible though, so I don't think those did too much damage, and the misplaced syntax was easy to spot.</p>

<p>And yet while on one level I find Javascript's syntax-heavy nature to be irritating, on a deeper level I think it can actually be beneficial in forcing me to better organize and structure my code. With JS, I've started to put comments to indicate where certain functions end to help me not get lost in the multiple levels of embedded functions. And while this probably isn't coding best practices in the end, its helped me think deliberately about variable scope and processing flow within my code, and to not rely on my language of choice to determine that for me. Plus, its always easy to delete the comments after I get my code working to make it more presentable.</p>

<p>In a similar way that learning all the components of Rails separately - learning Rack, building an Object Relational Mapper, or writing SQL statements, for example - helped me understand and appreciate the work Rails does, learning Javascript has enabled me to appreciate good coding design and organization. While having frameworks like Rails or libraries like jQuery are quite useful in abstracting away common patterns and enabling rapid and efficient development, its critical to understand how those tools actually get the job done. Knowing how Rails abstracts away database queries or how jQuery simplifies event handlers makes me not only appreciate the work developers have put into building those libraries, but also enables me to customize features and fix problems more effectively. Avi and Bob have done a great job at Flatiron of demystifying abstract tools and emphasizing that Rails and jQuery are just collections of Ruby and Javascript code, respectively.</p>

<p>Learning Javascript this past week, I felt the pace of the work accelerate at Flatiron (not that we weren't moving pretty fast already). As I've gained more confidence in my skillset and I've rounded out my understanding of the many components of web development, I've started working on side projects and exploring areas outside the core Flatiron curriculum. For example, I came across a pretty cool data visualization library called <a href="http://d3js.org" target="_blank">D3.js</a> that I want to explore. I find data visualization fascinating - it can be incredibly powerful tools to quickly communicate complex data in an engaging and beautiful manner. I'm hoping to spend some time this weekend exploring the documentation and to try and build some basic dynamic charts. Data visualization is the perfect encapsulation of what I find so unique about web development - the weaving together of complex data analytics with beautiful, user-centric design. Left brain and right brain working together seamlessly in awesome harmony. There's so many cool and exciting libraries, gems and APIs out there to explore; I need to remind myself to be patient and diligent in learning, to be excited about all the potential out there rather than feel burdened by the sheer amount of material.</p>

<p>This next week we'll be turning back to Rails for a few days before starting work on our group projects. I'm excited about what comes next, for the opportunity to take all that we've learned and combine it into a coherent and engaging product. Creating a black box, in a sense, but knowing exactly what goes into it and how it works. I know the next few weeks will be tiring, frustrating and challenging, but its great to know that I'm building a new skill set and finally starting to create cool stuff.</p>

<p>Oh, also, in case you haven't noticed, I changed the design theme of my blog. I realized that the other theme got to be a little clunky, and I didn't quite master the responsiveness of it, so the dynamic card-flip animation that I implemented ended up being more of a hindrance to readers than a cool design element. I got some feedback on the design - some people thought the animation was nice, but more people found it unnecessary and distracting from the actual blog content. And in the end, you've got to give the users what they want!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Week 4]]></title>
    <link href="http://eewang.github.com/blog/2013/03/02/flatiron-week-3/"/>
    <updated>2013-03-02T09:20:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/03/02/flatiron-week-3</id>
    <content type="html"><![CDATA[<p>As I begin the fifth week of Flatiron School, I'm feeling pretty good about where things stand. I've been challenged, frustrated and exhausted throughout the previous month, but its been an amazing experience, as I've learned more in the past four weeks than I have since college (and probably before college). The workload has been heavy, and I've been trying to take on some personal projects on the side. Last week was Rails week, and this week we're starting to explore front-end web development via JavaScript/jQuery.</p>

<!--more-->


<p>We have a guest lecturer this week, <a href="http://www.slideshare.net/jonathangrover1" target="_blank">Jonathan Grover</a>, who is a front-end specialist. I've been working on a few Rails projects that look pretty bare bones at the moment, so it will be great to add some stylings and a dynamic user interface to the apps. Although this week is front-end focused, I hope to keep learning Rails - both during work time in class and after class - through online tutorials and working on my own projects. Given that I'll likely be working with Rails for the foreseeable future, I really want to be fluent in the framework.</p>

<p>Learning Rails last week was challenging, especially to start, since so much of the Rails application building process seems to go on beyond the view of the programmer. Simply starting a new Rails app creates numerous directories and stub files, which can be intimidating to new developers like myself. Compared to Rails, Django starts programmers off with much less scaffolding and support. Django also seems more transparent, as there don't seem to be nearly as many helper methods as in Rails. I can see the benefits of working with both frameworks - it was easier for me to grasp what Django was doing when I first starting using it, but I can definitely see how Rails enables rapid prototyping and efficient development of new apps.</p>

<p>As we enter the second month of the Flatiron program, one of my classmates raised the question of jobs and careers post-Flatiron last Friday. Avi mentioned that its probably still too early to think too much about jobs, and I tend to agree with him. I'm focused right now on building a skill set - learning as much as I can and knowing how to create products. But I'd be lying if I said that the thought of what will happen post-Flatiron hasn't crossed my mind. I've realized that long term, I'd like to use technology and coding as the lens through which I explore and learn about other industries and professions. All professions and industries have processes and data, some common across industries and some idiosyncratic to specific sectors. I think many of the shared processes have been addressed using technology - e.g., e-mail, scheduling software, project management, note-taking - but many of the idiosyncratic ones have not. Certain industries like tech or consumer goods have had their idiosyncratic data and processes transformed by technology, but other industries have not - e.g., energy is one that comes to mind. I'm hoping to use technology to explore the data and processes of all industries.</p>

<p>Another thing that I've realized through the program is that balance is critical. Not just work-life balance but even work-work balance. This past week, I spent one night coding until 3:00 am - most of the hours post-midnight were spent in frustration trying to debug a Sinatra app. I hope that I don't get into a habit of coding so late into the night. Avi mentioned that you shouldn't code for more than 8 hours a day - if you want to keep working after 8 hours, then do some reading, or blogging, or talk to someone about coding. There are ways to keep learning and engaging without actually coding. After hours, read a book or write a blog post. Approaching the same subject in different ways will only help solidify and deepen your understanding. It will help your understanding coalesce more effectively and the mental connections between different technologies to strengthen. While its easy for me to focus on something I enjoy doing, I need to know when to stop so that I don't get burnt out or lose efficiency.</p>
]]></content>
  </entry>
  
</feed>
