<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron | eugenius]]></title>
  <link href="http://eewang.github.com/blog/categories/flatiron/atom.xml" rel="self"/>
  <link href="http://eewang.github.com/"/>
  <updated>2013-03-18T09:19:29-04:00</updated>
  <id>http://eewang.github.com/</id>
  <author>
    <name><![CDATA[Eugene Wang]]></name>
    <email><![CDATA[eugene.wang@flatironschool.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How (and When) to Use Single Table Inheritance in Rails]]></title>
    <link href="http://eewang.github.com/blog/2013/03/12/how-and-when-to-use-single-table-inheritance-in-rails/"/>
    <updated>2013-03-12T00:04:00-04:00</updated>
    <id>http://eewang.github.com/blog/2013/03/12/how-and-when-to-use-single-table-inheritance-in-rails</id>
    <content type="html"><![CDATA[<p>Last week as I was developing an application to track and analyze ticket and event postings, I came across a design problem. I had first started working on my ticket tracker application as a way to parallel the learning that we were doing in class. I started with a simple scraper that pulled data out of the Stubhub's client-facing HTML documents, then moved on to writing a simple ORM that saved the data to a SQLite database, then moved the application into Sinatra and finally into Rails.</p>

<!--more-->


<p>Along the way, as I was increasing the level of structural complexity, I was also expanding the scope of the project. I had initially started with just NBA tickets, but I've recently started exploring how to broaden the application to any event. This presented me with a design conundrum. I designed my models in the initial Ruby application to just get NBA data - the classes, methods and variables were all had "NBA" or "basketball" in the name. Also, the model attributes and table fields were specific to the JSON data related to NBA games that I could retrieve. However, this wouldn't work exactly for concerts or music festivals. Basketball games have both a home and away team, but the same cannot be said for concerts. Furthermore, sports events - e.g., baseball, basketball, football - are mostly similar in how the data is structured (home and away teams, venue, date, etc.), but each may present idiosyncratic data that is not shared by other sports. On the one hand, each type of event shares many of the same attributes, but each also have their own quirks.</p>

<p>As I explored how to accurately design my models and schema while also striving to remain DRY and not denormalize my data too much, I came across the concept of Single Table Inheritance (hat tip to professor <a href="https://twitter.com/withloudhands/" target="_blank">Bob Whitney</a> for introducing me to the design concept.) And in case you're interested, you can find my application <a href="https://github.com/eewang/ticket_tracker" target="_blank">here</a> (very much still a work in progress).</p>

<p><strong>1) What is Single Table Inheritance (STI)?</strong></p>

<p>STI is basically the idea of using a single table to reflect multiple models that inherit from a base model, which itself inherits from ActiveRecord::Base. In the database schema, sub-models are indicated by a single "type" column. In Rails, adding a "type" column in a database migration is sufficient (after writing the models) to let Rails know that you're planning to implement STI. For example, I decided to use STI to convert what could have been one table/model per event type - a different table for football, basketball, hockey, festivals, concerts, etc. - into just two tables, sports and concerts. Conveniently enough, this also mirrors Stubhub's API, which categorizes events broadly into three categories - sports, concerts and theater (which I'll aim to add at a later date).</p>

<p>Where STI is helpful is in the structure of the models that relate to the table. For my sports table, I have multiple models that each save data to the same table. I have a class called "Sport" (I know, an awkward name, but I'm still getting used to the Rails pluralization conventions) that inherits from ActiveRecord::Base, and separate models called ProBasketball, ProFootball, Baseball, etc. that all inherit from the Sport class. This enables each of the individual sports to take on the functionality of a Sport (and ActiveRecord by default), yet also provides me with sufficient flexibility to write lower-case sport-specific methods, constants and variables. Each of these sports save to the "sports" table, with the sole differentiator being the "type" column, for which Rails uses the name of the Sport "sub-class" as the value (Rails just knows, don't ask me how.).</p>

<p><strong>2) When should I use STI?</strong></p>

<p>STIL should be considered when dealing with model classes that share much of the same functionality and data fields, but you as the developer may want more granular control over extending or adding to each class individually. Rather than duplicate the code over and over for multiple tables (and not being DRY) or forego the flexibility of adding idiosyncratic functionality or methods, STI permits you to use keep your data in a single table while writing specialized functionality.</p>

<p>STI enables you to use all the typical model methods in Rails, like .new, .create or any of the .find helper methods that make Rails so awesome, to both the super-class and the sub-classes within a single table. For example, using STI enables me to write code like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ProBasketball</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:act_primary</span> <span class="o">=&gt;</span> <span class="s2">&quot;New York Knicks&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The above code triggers the following SQL code. Notice that ActiveRecord automatically knows that I'm looking for data from the sports table where the type is equal to ProBasketball.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="ss">&quot;sports&quot;</span><span class="p">.</span><span class="o">*</span> <span class="k">FROM</span> <span class="ss">&quot;sports&quot;</span> <span class="k">WHERE</span> <span class="ss">&quot;sports&quot;</span><span class="p">.</span><span class="ss">&quot;type&quot;</span> <span class="k">IN</span> <span class="p">(</span><span class="s1">&#39;ProBasketball&#39;</span><span class="p">)</span> <span class="k">AND</span> <span class="ss">&quot;sports&quot;</span><span class="p">.</span><span class="ss">&quot;act_primary&quot;</span> <span class="o">=</span> <span class="s1">&#39;New York Knicks&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What Rails is doing underneath the hood is that its going into the sports table and finding all records where the type is ProBasketball and the value in act_primary (i.e. the home team in the sports example) is the New York Knicks. This makes the above Rails/SQL command equivalent to the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Sport</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;ProBasketball&quot;</span><span class="p">,</span> <span class="ss">:act_primary</span> <span class="o">=&gt;</span> <span class="s2">&quot;New York Knicks&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="ss">&quot;sports&quot;</span><span class="p">.</span><span class="o">*</span> <span class="k">FROM</span> <span class="ss">&quot;sports&quot;</span> <span class="k">WHERE</span> <span class="ss">&quot;sports&quot;</span><span class="p">.</span><span class="ss">&quot;type&quot;</span> <span class="o">=</span> <span class="s1">&#39;ProBasketball&#39;</span> <span class="k">AND</span> <span class="ss">&quot;sports&quot;</span><span class="p">.</span><span class="ss">&quot;act_primary&quot;</span> <span class="o">=</span> <span class="s1">&#39;New York Knicks&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A word of warning when using STI - don't use STI just because objects seem similar. Make sure that there is an object-oriented relationship between them. STI is a way to apply a higher-level abstraction to your schema and models, but don't get carried away. For example, it wouldn't make sense to just have a single table called "Objects" that uses STI to manage many relationships among unrelated models, each of which just happen to be an instance of an "object" (which everything is in Ruby anyways). A more practical example might be whether to use STI manage a table called "Vehicles," which relate to "Car", "Bicycle" and "Tank" sub-classes.</p>

<p>In this case, STI probably doesn't pass the good design smell task, since a car has different characteristics and functionality than a tank, even if both are technically vehicles. A better use case for STI might be a "Cars" table that relates to sub-classes of Car, such as SUV, Hybrid and Sedan. These sub-classes may each have idiosyncratic functionality, but share many of the same characteristics and, more importantly, are intuitively related from an OO perspective. In this case, using STI may be an effective way to streamline data collection and avoiding repetition in your schema.</p>

<p><strong>3) How do I implement STI?</strong></p>

<p>To get started with STI from a database perspective, all you need to do is add a field called "type" to the table. Rails takes this type field and applies the name of the sub-classes that inherit from the class for which the table is named as the value for a row of data.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateSports</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;create_table :sports do |t|</span>
</span><span class='line'><span class="sr">  t.string :type</span>
</span><span class='line'><span class="sr">  t.string :act_primary</span>
</span><span class='line'><span class="sr">  t.string :act_secondary</span>
</span><span class='line'><span class="sr">  # ... more column fields #</span>
</span><span class='line'><span class="sr">  t.timestamps</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once the schema is set up, the next step is to get the models set up and the proper inheritance tree established. But, before you do that, make sure to add any subfolders in your app/models folder to the autoload path in the application.rb file. This will ensure that Rails knows to look at subfolders, which may be good to use to effectively organize your model files.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;/</span><span class="n">config</span><span class="o">/</span><span class="n">application</span><span class="o">.</span><span class="n">rb</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;config.autoload_paths += %W(</span><span class="si">#{</span><span class="n">config</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="sr">/</span><span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">sports</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next, you can write out the structure of the models. STI in Rails presumes that there is one "super-class" that takes on the name of the schema table and inherits from ActiveRecord::Base. In my example, this is the "Sport" class. Here is where I keep any variables or methods that relate to sports generally - e.g., the API call requests, for example. Then, you can create separate sub-classes for objects that will inherit the super-class functionality, yet also enable you to write sub-class-specific methods. For example, each individual sport has its own teams that I want to get data for, so I keep the constants (an array of NBA teams, for example) relevant to only one sport in that sport's sub-class.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;/</span><span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">sports</span><span class="o">/</span><span class="n">sport</span><span class="o">.</span><span class="n">rb</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Sport &amp;lt; ActiveRecord::Base</span>
</span><span class='line'><span class="sr">  # Methods, variables and constants</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;/</span><span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">sports</span><span class="o">/</span><span class="n">probasketball</span><span class="o">.</span><span class="n">rb</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class ProBasketball &amp;lt; Sport</span>
</span><span class='line'><span class="sr">  # Methods, variables and constants</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;/</span><span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">sports</span><span class="o">/</span><span class="n">profootball</span><span class="o">.</span><span class="n">rb</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class ProFootball &amp;lt; Sport</span>
</span><span class='line'><span class="sr">  # Methods, variables and constants</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;/</span><span class="n">app</span><span class="o">/</span><span class="n">models</span><span class="o">/</span><span class="n">sports</span><span class="o">/</span><span class="n">baseball</span><span class="o">.</span><span class="n">rb</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Baseball &amp;lt; Sport</span>
</span><span class='line'><span class="sr">  # Methods, variables and constants</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>4) What are some drawbacks of STI?</strong></p>

<p>STI isn't always the best design choice for your schema. If sub-classes that you intend to use for STI have many different data fields, then including them all in the same table would result in a lot of null values and make it difficult to scale over time. In this case, you may end up with so much code in your model sub-classes that the shared functionality between sub-classes is minimal and warrants separate tables. Also, as I mentioned above, STI shouldn't be used just because two object types have similar attributes - both airplanes and bicycles have wheels, but it probalby doesn't make sense to group them into the same table, given that intuitively, they're different objects that will have vastly different functionality and data fields in an application.</p>

<p>Also, you may have noticed that STI didn't exactly solve the problem I mentioned in the beginning of expanding my application to concerts and music festivals. In looking through the Stubhub API documentation, I realized that not all data fields that are applicable to sporting events are also used in describing concerts (e.g., concerts don't have an away team), even if about 80% - 90% of the data fields overlapped. In this case, I wanted to err on the side of caution and didn't want to deal with a single "events" table that included stubbed out columns with null values for concerts or sporting events, so I decided to create two tables - one for concerts and one for sporting events - and then apply STI to the sub-categories inherent in those two classes, such as individual sports for the latter and festivals vs. performances in the former. So, STI didn't solve all of my problems in that I still have duplicate data fields between my concerts and sports tables (e.g., event date, event venue, etc.), but it did help make my application flexible enough to scale to other sports or concert types while remaining relatively DRY.</p>

<p><strong>5) Where can I learn more about STI?</strong></p>

<p>There are a few good resources and blog posts online, as well as the requisite StackOverflow inquiries, about STI. I think these resources do a pretty decent job of describing STI, but if you think that STI might be a sensible domain design choice for your application, I'd recommend playing around with it in a sample application first before relying on it. I imagine that it might be difficult to switch between using STI and not using STI once in production given the significant schema changes that may be required, so prudence in applying the technique is encouraged.</p>

<p><a href="http://www.alexreisner.com/code/single-table-inheritance-in-rails" target="_blank">Alex Reisner - Single Table Inheritance in Rails</a></p>

<p><a href="http://www.therailworld.com/posts/18-Single-Table-Inheritance-with-Rails" target="_blank">The Rail World - Single Table Inheritance with Rails</a></p>

<p><a href="http://www.archonsystems.com/devblog/2011/12/20/rails-single-table-inheritance-with-polymorphic-association/" target="_blank">Archon Systems - Rails Single Table Inheritance with Polymorphic Association</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Week 5]]></title>
    <link href="http://eewang.github.com/blog/2013/03/09/flatiron-week-5/"/>
    <updated>2013-03-09T09:02:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/03/09/flatiron-week-5</id>
    <content type="html"><![CDATA[<p>When I started at Flatiron, I set myself a goal of trying to blog every day. That goal pretty quickly fell to the wayside, as I realized how much work would be involved just coding and learning alone. Also, after the first few days, the lessons began to group together in longer, multi-day themes - e.g., Rails. This week, the theme was Javascript/jQuery, which controls front-end user interaction and serves as an intermediate, client-side programming language between the user and the back-end (Ruby on Rails, in our case). Learning JS brought together the whole concept of web development, and it really helped coalesce my understanding of how users interact with web applications and send data to and retrieve data from the application's back-end.</p>

<!--more-->


<p>To be honest, I have mixed feelings about Javascript. On the one hand, it seems to be a powerful, versatile language that increasingly is being used as a server-side language through frameworks like <a href="http://nodejs.org" target="_blank">Node.js</a>. On the other hand, however, it feels a little clunky to me after learning Ruby. Compared to Ruby, Javascript is syntax heavy, littered with seemingly unnecessary semicolons and braces. This past week, there were definitely moments of frustration when I couldn't get my Javascript to work because of a missing semi-colon or a misplaced bracket. I found myself scouring my code to ensure that every open parenthesis or bracket had a corresponding closing character. Additionally, I started to inadvertantly use semicolons to end statements in my Ruby code. Good thing that Ruby is pretty flexible though, so I don't think those did too much damage, and the misplaced syntax was easy to spot.</p>

<p>And yet while on one level I find Javascript's syntax-heavy nature to be irritating, on a deeper level I think it can actually be beneficial in forcing me to better organize and structure my code. With JS, I've started to put comments to indicate where certain functions end to help me not get lost in the multiple levels of embedded functions. And while this probably isn't coding best practices in the end, its helped me think deliberately about variable scope and processing flow within my code, and to not rely on my language of choice to determine that for me. Plus, its always easy to delete the comments after I get my code working to make it more presentable.</p>

<p>In a similar way that learning all the components of Rails separately - learning Rack, building an Object Relational Mapper, or writing SQL statements, for example - helped me understand and appreciate the work Rails does, learning Javascript has enabled me to appreciate good coding design and organization. While having frameworks like Rails or libraries like jQuery are quite useful in abstracting away common patterns and enabling rapid and efficient development, its critical to understand how those tools actually get the job done. Knowing how Rails abstracts away database queries or how jQuery simplifies event handlers makes me not only appreciate the work developers have put into building those libraries, but also enables me to customize features and fix problems more effectively. Avi and Bob have done a great job at Flatiron of demystifying abstract tools and emphasizing that Rails and jQuery are just collections of Ruby and Javascript code, respectively.</p>

<p>Learning Javascript this past week, I felt the pace of the work accelerate at Flatiron (not that we weren't moving pretty fast already). As I've gained more confidence in my skillset and I've rounded out my understanding of the many components of web development, I've started working on side projects and exploring areas outside the core Flatiron curriculum. For example, I came across a pretty cool data visualization library called <a href="http://d3js.org" target="_blank">D3.js</a> that I want to explore. I find data visualization fascinating - it can be incredibly powerful tools to quickly communicate complex data in an engaging and beautiful manner. I'm hoping to spend some time this weekend exploring the documentation and to try and build some basic dynamic charts. Data visualization is the perfect encapsulation of what I find so unique about web development - the weaving together of complex data analytics with beautiful, user-centric design. Left brain and right brain working together seamlessly in awesome harmony. There's so many cool and exciting libraries, gems and APIs out there to explore; I need to remind myself to be patient and diligent in learning, to be excited about all the potential out there rather than feel burdened by the sheer amount of material.</p>

<p>This next week we'll be turning back to Rails for a few days before starting work on our group projects. I'm excited about what comes next, for the opportunity to take all that we've learned and combine it into a coherent and engaging product. Creating a black box, in a sense, but knowing exactly what goes into it and how it works. I know the next few weeks will be tiring, frustrating and challenging, but its great to know that I'm building a new skill set and finally starting to create cool stuff.</p>

<p>Oh, also, in case you haven't noticed, I changed the design theme of my blog. I realized that the other theme got to be a little clunky, and I didn't quite master the responsiveness of it, so the dynamic card-flip animation that I implemented ended up being more of a hindrance to readers than a cool design element. I got some feedback on the design - some people thought the animation was nice, but more people found it unnecessary and distracting from the actual blog content. And in the end, you've got to give the users what they want!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Week 4]]></title>
    <link href="http://eewang.github.com/blog/2013/03/02/flatiron-week-3/"/>
    <updated>2013-03-02T09:20:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/03/02/flatiron-week-3</id>
    <content type="html"><![CDATA[<p>As I begin the fifth week of Flatiron School, I'm feeling pretty good about where things stand. I've been challenged, frustrated and exhausted throughout the previous month, but its been an amazing experience, as I've learned more in the past four weeks than I have since college (and probably before college). The workload has been heavy, and I've been trying to take on some personal projects on the side. Last week was Rails week, and this week we're starting to explore front-end web development via JavaScript/jQuery.</p>

<!--more-->


<p>We have a guest lecturer this week, <a href="http://www.slideshare.net/jonathangrover1" target="_blank">Jonathan Grover</a>, who is a front-end specialist. I've been working on a few Rails projects that look pretty bare bones at the moment, so it will be great to add some stylings and a dynamic user interface to the apps. Although this week is front-end focused, I hope to keep learning Rails - both during work time in class and after class - through online tutorials and working on my own projects. Given that I'll likely be working with Rails for the foreseeable future, I really want to be fluent in the framework.</p>

<p>Learning Rails last week was challenging, especially to start, since so much of the Rails application building process seems to go on beyond the view of the programmer. Simply starting a new Rails app creates numerous directories and stub files, which can be intimidating to new developers like myself. Compared to Rails, Django starts programmers off with much less scaffolding and support. Django also seems more transparent, as there don't seem to be nearly as many helper methods as in Rails. I can see the benefits of working with both frameworks - it was easier for me to grasp what Django was doing when I first starting using it, but I can definitely see how Rails enables rapid prototyping and efficient development of new apps.</p>

<p>As we enter the second month of the Flatiron program, one of my classmates raised the question of jobs and careers post-Flatiron last Friday. Avi mentioned that its probably still too early to think too much about jobs, and I tend to agree with him. I'm focused right now on building a skill set - learning as much as I can and knowing how to create products. But I'd be lying if I said that the thought of what will happen post-Flatiron hasn't crossed my mind. I've realized that long term, I'd like to use technology and coding as the lens through which I explore and learn about other industries and professions. All professions and industries have processes and data, some common across industries and some idiosyncratic to specific sectors. I think many of the shared processes have been addressed using technology - e.g., e-mail, scheduling software, project management, note-taking - but many of the idiosyncratic ones have not. Certain industries like tech or consumer goods have had their idiosyncratic data and processes transformed by technology, but other industries have not - e.g., energy is one that comes to mind. I'm hoping to use technology to explore the data and processes of all industries.</p>

<p>Another thing that I've realized through the program is that balance is critical. Not just work-life balance but even work-work balance. This past week, I spent one night coding until 3:00 am - most of the hours post-midnight were spent in frustration trying to debug a Sinatra app. I hope that I don't get into a habit of coding so late into the night. Avi mentioned that you shouldn't code for more than 8 hours a day - if you want to keep working after 8 hours, then do some reading, or blogging, or talk to someone about coding. There are ways to keep learning and engaging without actually coding. After hours, read a book or write a blog post. Approaching the same subject in different ways will only help solidify and deepen your understanding. It will help your understanding coalesce more effectively and the mental connections between different technologies to strengthen. While its easy for me to focus on something I enjoy doing, I need to know when to stop so that I don't get burnt out or lose efficiency.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Visualize Data With Google Charts For Ruby]]></title>
    <link href="http://eewang.github.com/blog/2013/02/20/how-to-visualize-data-with-google-charts/"/>
    <updated>2013-02-20T17:42:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/20/how-to-visualize-data-with-google-charts</id>
    <content type="html"><![CDATA[<p>I love data. Specifically, I love data visualizations. Infographics, charts, whatever you call it, if it displays data visually, chances are I'll want to take a look at it. Data graphics tightly integrate the creative and analytical elements that I find so appealing about programming to efficiently communicate information. If a picture is worth a thousand words, an infographic is worth a thousand pictures. Data graphics can take an array of different forms - charts, 3-D graphs, maps, etc., the possibilities are virtually endless. I wanted to explore data visualization tools in Ruby, starting with basic chart functionality.</p>

<!--more-->


<p>In learning how to code over the past few weeks, I've come to appreciate the flexibility of Ruby and the ability for pretty much anything to be structured as a dataset. Conceptually, I was looking for a tool that could take in a data as an array or hash and convert that data into a table or graph. In perusing <a href="http://www.ruby-toolbox.com/" target="_blank">Ruby Toolbox</a>, I came across the Googlecharts gem, which is basically a Ruby wrapper for the <a href="http://developers.google.com/chart/" target="_blank">Google Charts API</a>. In taking a look at the <a href="http://googlecharts.rubyforge.org/" target="_blank">documentation</a> and <a href="http://github.com/mattetti/googlecharts/" target="_blank">code base on GitHub</a>, the instructions seemed pretty straight forward, so I figured I'd give it a try.</p>

<p><strong>1) Installing Googlecharts</strong></p>

<p>Getting setup with the Googlecharts gem is pretty straightforward. Like other gems, you can install it straight from the command line by running:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install googlecharts
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once the installation command runs, you just need to be sure to require the gem at the top of your Ruby file by writing:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;gchart&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And that's it! You're ready to start using Googlecharts.</p>

<p><strong>2) Let's Chart Some Data!</strong></p>

<p>The primary class that you interact with when using Googlecharts is the Gchart class. In looking at the source code on GitHub, this class has numerous attributes that can be used to define the data and formatting for bar charts, pie charts, line graphs and scatterplots (the gem also seems to support basic 3-D graphing). When you create a new Gchart, you can pass in a number of attributes as parameters to the new Gchart instance. My first time using this gem, my goal was just to create a simple bar chart with dummy data that would successfully save to my filesystem. So I added an array of a few integers as the data input for the chart:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">data_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;bar_chart = Gchart.new(&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="ss">:type</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:size</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;400x400&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:bar_colors</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;000000&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:title</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;My Title&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:bg</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;EFEFEF&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:legend</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;first data set label&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:data</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">data_array</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:filename</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;images/bar_chart.png&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">bar_chart</span><span class="o">.</span><span class="n">file</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Running the above code in my terminal (still with "require 'gchart'" at the top) produced this:</p>

<p><img src="http://eewang.github.com/images/post_images/bar_chart_1.png"></img></p>

<p>It gets the job done, but its not too exciting for a few reasons. First, there aren't any y-axis labels; I have no sense of scale or measurement. Second, there are no labels on my data bars. Third, only one set of data is displayed; what if I wanted to compare two related datasets next to each other? In order to address these issues, I passed a few more initial values to the Gchart instantiation:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">data_array_1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span><span class='line'><span class="n">data_array_2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;bar_chart = Gchart.new(&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="ss">:type</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:size</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;600x400&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:bar_colors</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[</span><span class="s1">&#39;000000&#39;</span><span class="p">,</span> <span class="s1">&#39;0088FF&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:title</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;My Title&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:bg</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;EFEFEF&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:legend</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[</span><span class="s1">&#39;first data set label&#39;</span><span class="p">,</span> <span class="s1">&#39;second data set label&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:data</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[</span><span class="n">data_array_1</span><span class="p">,</span> <span class="n">data_array_2</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:filename</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;images/bar_chart.png&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:stacked</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:legend_position</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;bottom&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:axis_with_labels</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[[</span><span class="s1">&#39;x&#39;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="o">]]</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:max_value</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:min_value</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:axis_labels</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[[</span><span class="s2">&quot;A|B|C|D|E&quot;</span><span class="o">]]</span><span class="p">,</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">bar_chart</span><span class="o">.</span><span class="n">file</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Specifically, I added six new attributes compared to the first chart. These new attributes include:</p>

<ul>
  <li><strong>:stacked</strong> - indicates if the bars are to be stacked one on top the other (:stacked => 'true'; this is the default setting for bar charts) or if they should be side-by-side (:stacked => 'false')</li>
  <li><strong>:legend_position</strong> - indicates where the legend will be placed relative to the chart. Options are: 'bottom', 'bottom_vertical', 'top', 'top_vertical', 'right', and 'left'.</li>
  <li><strong>:axis_with_labels</strong> - indicates which axis you want to add labels to. I added the primary x-axis and y-axis (left and bottom), but I could have also added 'r' and 't' for 'right' and 'top' for the secondary vertical and horizontal axes, respectively</li>
  <li><strong>:max_value</strong> - indicates the maximum value for the x-axis. In tinkering with this attribute, it seems like this max value needs to be set in order to scale the data bars to the y-axis; otherwise they seem to get detached (i.e., you can change the y-axis scale without affecting the relative size of the bars).</li>
  <li><strong>:min_value</strong> - similar to the above, this attribute indicates the starting point of the bar chart.</li>
  <li><strong>:axis_labels</strong> - indicates the labels for the x-axis, separated by pipes ("|"). Note the formatting here - the labels in aggregate are a single string but are each delineated by pipes. If you want to replace this value with variable (e.g., if the data you want to chart may have dynamic x-axis labels), you may need to do some intermediate object transformation in order to get the appropriate syntax for Googlecharts. </li>
</ul>


<p>I also added a second array of data at the top to see how my cluster, non-stacked bar chart looks. Note too that the HEX codes for the background ("bg") and bar colors do not need the leading "#" symbol as they do in CSS. After updating the code with additional attributes, this is my bar chart:</p>

<p><img src="http://eewang.github.com/images/post_images/bar_chart_2.png"></img></p>

<p>One thing to note is that whenever you have multiple values for a single hash key, you need to wrap them in an array, otherwise the code won't properly execute.</p>

<p>This is the same data, except applied to a line chart (I just replaced :type => 'bar' with :type => 'line'):</p>

<p><img src="http://eewang.github.com/images/post_images/line_chart_1.png"></img></p>

<p>And here it is again, except with just the first data set and applied to a pie chart:</p>

<p><img src="http://eewang.github.com/images/post_images/pie_chart_1.png"></img></p>

<p>As you can see, its pretty easy to switch between graph/chart types. What's more important is to think through the purpose of the graphic and choose the appropriate type. For example, if the data you are presenting is along a continuum (e.g., stock prices, demographic distributions, etc.), line graphs may make the most sense. But if you're showing discrete datasets, you may want to use a bar chart.</p>

<p><strong>3) Applying Object Orientation</strong></p>

<p>Playing around with Googlecharts was fun, but ultimately, I wanted to use the gem in the context of a broader application. A typical use case may be wanting to display dynamic content that a user can request and format. I figured that this would be a good chance to extend a scraper for StubHub that I've been building on the side. Basically, this scraper goes through StubHub's NBA ticket listings and saves the information about each event (home/away team, date of game, venue, minimum price and number of tickets available, etc.) into a SQLite3 database. I wrote the scraper to be object-oriented, so I thought it would make sense to build in the functionality to auto-generate bar charts using Googlecharts.</p>

<p>For the sake of brevity, I won't post all of the code for the scraper and classes here, but you can find the <a href="https://github.com/eewang/tickets/" target="_blank">repository</a> on my <a href="https://github.com/eewang/" target="_blank">GitHub page</a>. The code below spells out the Team class, which houses the functionality to call a "search_team" class method and pass it a team name. This method will then create a bar chart dynamically using attributes of the team name that the user specifies. The method calls instance methods that perform actions like querying the database for price ("price for sql"), ticket ("tix_for_sql"), opposing team ("away_teams_for_sql") and event date ("date_for_sql") data. Additionally, I added in the ability for the class to search a hash of team colors to match the requested team against its primary and secondary team colors to format the chart dynamically. The underlying data map for team colors is housed as a constant in the "Baller" module, which is not reflected below. I scaled the y-axis based on the highest price in the price data array for the remaining home games. This way, I could make sure that I wouldn't get data that fell outside of my chart's range. Unfortunately, I wasn't able to disconnect the scale of the primary y-axis (left side) from the secondary y-axis (right side), so the "Number of Tickets" bars look a little squished.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Team</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Baller</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  attr_accessor :name, :url&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="vc">@@color_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="vc">@@db</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;tickets_3.db&quot;</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def self.team_list&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="ss">Baller</span><span class="p">:</span><span class="ss">:TEAMS</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def self.team_colors_list&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">Array</span><span class="p">(</span><span class="ss">Baller</span><span class="p">:</span><span class="ss">:COLORS</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>  <span class="vc">@@color_hash</span><span class="o">[</span><span class="n">item</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;: &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vc">@@color_hash</span><span class="o">[</span><span class="n">item</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;: &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">item</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;: &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;#&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="vc">@@color_hash</span><span class="o">[</span><span class="n">item</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;: &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">item</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;: &quot;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">[-</span><span class="mi">2</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;#&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="vc">@@color_hash</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  @@teams = []&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@name = name</span>
</span><span class='line'><span class="sr">@name_for_sql = @name.concat(&quot; Tickets&quot;).to_s</span>
</span><span class='line'><span class="sr">@url = url</span>
</span><span class='line'><span class="sr">@away_teams = []</span>
</span><span class='line'><span class="sr">@away_team_labels = []</span>
</span><span class='line'><span class="sr">@@teams &amp;lt;&amp;lt; [self.name, self.url]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">count_teams</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@@teams.size</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">name_teams</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@@teams</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">date_for_sql</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@@db.execute(&quot;SELECT event_date FROM events WHERE team_home == &#39;</span><span class="si">#{</span><span class="vi">@name_for_sql</span><span class="si">}</span><span class="sr">&#39;&quot;).flatten.collect { |date| date.split(&quot;,&quot;)[1].strip.split(&quot; &quot;)[0].split(&quot;/</span><span class="s2">&quot;)[0..-2].join(&quot;</span><span class="o">/</span><span class="s2">&quot;)}</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def price_for_sql&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@@db.execute(&quot;</span><span class="no">SELECT</span> <span class="n">min_price</span> <span class="no">FROM</span> <span class="n">events</span> <span class="no">WHERE</span> <span class="n">team_home</span> <span class="o">==</span> <span class="s1">&#39;#{@name_for_sql}&#39;</span><span class="s2">&quot;).flatten</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def tix_for_sql&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@@db.execute(&quot;</span><span class="no">SELECT</span> <span class="n">tix</span> <span class="no">FROM</span> <span class="n">events</span> <span class="no">WHERE</span> <span class="n">team_home</span> <span class="o">==</span> <span class="s1">&#39;#{@name_for_sql}&#39;</span><span class="s2">&quot;).flatten.collect do |item| </span>
</span><span class='line'><span class="s2">    if item.is_a? Integer</span>
</span><span class='line'><span class="s2">      item / 100</span>
</span><span class='line'><span class="s2">    else </span>
</span><span class='line'><span class="s2">      item.gsub(&quot;</span><span class="p">,</span><span class="s2">&quot;, &quot;&quot;).to_i / 100</span>
</span><span class='line'><span class="s2">    end</span>
</span><span class='line'><span class="s2">  end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def away_teams_for_sql&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@@db.execute(&quot;</span><span class="no">SELECT</span> <span class="n">team_away</span> <span class="no">FROM</span> <span class="n">events</span> <span class="no">WHERE</span> <span class="n">team_home</span> <span class="o">==</span> <span class="s1">&#39;#{@name_for_sql}&#39;</span><span class="s2">&quot;).flatten</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def x_labels(item)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;self.class.team_list.each do |combo|</span>
</span><span class='line'><span class="s2">  if combo[1] == item</span>
</span><span class='line'><span class="s2">    @away_teams &amp;lt;&amp;lt; combo[0]</span>
</span><span class='line'><span class="s2">  end</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def x_labels_abbr&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;away_teams_for_sql.each do |team|</span>
</span><span class='line'><span class="s2">  x_labels(team)</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">@away_teams</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def away_team_x_labels_abbr&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@away_team_labels = x_labels_abbr.zip(date_for_sql).collect { |array| array.join(&quot;</span><span class="p">:</span> <span class="s2">&quot;) }.join(&quot;</span><span class="o">|</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def team_color_primary&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;Team.team_colors_list[@name_for_sql.split(&quot;</span> <span class="s2">&quot;)[0..-2].join(&quot;</span> <span class="s2">&quot;).to_sym][0]</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def team_color_secondary&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;Team.team_colors_list[@name_for_sql.split(&quot;</span> <span class="s2">&quot;)[0..-2].join(&quot;</span> <span class="s2">&quot;).to_sym][1]</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def chart_filename&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;@name.downcase.gsub(&quot;</span> <span class="s2">&quot;, &quot;</span><span class="n">_</span><span class="s2">&quot;).insert(0, &quot;</span><span class="n">nba_charts</span><span class="o">/</span><span class="s2">&quot;).concat(&quot;</span><span class="o">.</span><span class="n">png</span><span class="s2">&quot;)</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  def self.search_team(team_name)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;nba_team = Team.new(team_name.split(&quot;</span> <span class="s2">&quot;).map { |word| word.capitalize }.join(&quot;</span> <span class="s2">&quot;) )</span>
</span><span class='line'><span class="s2">bar_chart = Gchart.new(</span>
</span><span class='line'><span class="s2">            :type =&amp;gt; &#39;bar&#39;,</span>
</span><span class='line'><span class="s2">            :size =&amp;gt; &#39;1000x300&#39;, </span>
</span><span class='line'><span class="s2">            :encoding =&amp;gt; &#39;extended&#39;,</span>
</span><span class='line'><span class="s2">            :bar_colors =&amp;gt; [[nba_team.team_color_primary], [nba_team.team_color_secondary]],</span>
</span><span class='line'><span class="s2">            :title =&amp;gt; &quot;</span><span class="c1">#{@name_for_sql}&quot;,</span>
</span><span class='line'>            <span class="ss">:bg</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;FAFAFA&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:legend</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[</span><span class="s1">&#39;Minimum Price (LHS)&#39;</span><span class="p">,</span> <span class="s1">&#39;Number of Tickets (RHS)&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:legend_position</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;bottom&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:data</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[</span><span class="n">nba_team</span><span class="o">.</span><span class="n">price_for_sql</span><span class="p">,</span> <span class="n">nba_team</span><span class="o">.</span><span class="n">tix_for_sql</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:stacked</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:axis_with_labels</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[[</span><span class="s1">&#39;x&#39;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;r&#39;</span><span class="o">]]</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:axis_labels</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">nba_team</span><span class="o">.</span><span class="n">away_team_x_labels_abbr</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">]]</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:bar_width_and_spacing</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;25&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:axis_range</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="o">[[</span><span class="kp">nil</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">25</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">25</span><span class="o">]</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:max_value</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">nba_team</span><span class="o">.</span><span class="n">price_for_sql</span><span class="o">.</span><span class="n">max</span> <span class="o">+</span> <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:orientation</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;v&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="ss">:filename</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">nba_team</span><span class="o">.</span><span class="n">chart_filename</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'><span class="n">bar_chart</span><span class="o">.</span><span class="n">file</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Creating file... Done&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When I call "Team.search_team(&lt;"input team name">)", the program creates a file labeled with the appropriate team name in a sub-directory called "nba_charts". As you can see, Googlecharts can be used to create charts dynamically based on variable user input.</p>

<p><strong>4) Adding User Interaction</strong></p>

<p>In order to create charts quickly, I added a command line interface for the program. This code allows users to specify which team they want to see ticket data for and it will create bar charts using the gchart gem and save them to the local filesystem. I went ahead and created four bar charts for the Knicks, Lakers, Thunder and Nuggets. I wanted to create a chart for my beloved Chicago Bulls as well, but the red-and-white combination didn't show up very well on an off-white background, so I kept that chart out of this example.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">until</span> <span class="n">response</span><span class="o">.</span><span class="n">downcase</span> <span class="o">==</span> <span class="s2">&quot;done&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;What team do you want to search for? (&#39;Done&#39; to exit) &quot;</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">downcase</span> <span class="o">!=</span> <span class="s2">&quot;done&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Team.search_team(response)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  else&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;Thanks for using my program!&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is the code when execute it in the terminal:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby tickets.rb
</span><span class='line'>What team do you want to search for? ('Done' to exit)
</span><span class='line'>New York Knicks
</span><span class='line'>Creating file... Done
</span><span class='line'>What team do you want to search for? ('Done' to exit)
</span><span class='line'>Los Angeles Lakers
</span><span class='line'>Creating file... Done
</span><span class='line'>What team do you want to search for? ('Done' to exit)
</span><span class='line'>Oklahoma City Thunder
</span><span class='line'>Creating file... Done
</span><span class='line'>What team do you want to search for? ('Done' to exit)
</span><span class='line'>Denver Nuggets
</span><span class='line'>Creating file... Done
</span><span class='line'>What team do you want to search for? ('Done' to exit)
</span><span class='line'>Done
</span><span class='line'>Thanks for using my program!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And here are the bar charts that are created by the program:</p>

<h6>New York Knicks Tickets - Remaining Home Games</h6>


<p><img src="http://eewang.github.com/images/post_images/new_york_knicks_tickets.png"></img></p>

<h6>Los Angeles Lakers Tickets - Remaining Home Games</h6>


<p><img src="http://eewang.github.com/images/post_images/los_angeles_lakers_tickets.png"></img></p>

<h6>Oklahoma City Thunder Tickets - Remaining Home Games</h6>


<p><img src="http://eewang.github.com/images/post_images/oklahoma_city_thunder_tickets.png"></img></p>

<h6>Denver Nuggets - Remaining Home Games</h6>


<p><img src="http://eewang.github.com/images/post_images/denver_nuggets_tickets.png"></img></p>

<p>The left-hand y-axis refers to the price in dollars of the cheapest ticket, since StubHub's primary event page indicates where ticket prices start from (i.e., the lowest price), and the right-hand y-axis refers to the number of tickets remaining in hundreds. I was having difficulty disconnecting the primary and secondary y-axes from each other, so the scale for the remaining tickets is not ideal (the primary y-axis determined the scale).</p>

<p><strong>5) Final Thoughts</strong></p>

<p>As you can see, the Googlecharts gem can be useful for quickly linking up a program with a data visualization tool. While it doesn't appear to be the most powerful or most intuitive data graphing tool, its easy to install and the documentation is fairly straightforward, at least for basic functionality. I found it helpful to go through the code base for the Gchart class and try and follow the logic of each method whenever I got stuck. I found it to be a transparent gem in terms of figuring out what was going on "under the hood".</p>

<p>That said, I found the syntax to be finicky, unnecessarily so, in my opinion. Also, it seemed like some of the more advanced functionality that I was looking for, that I was used to from using Excel many times, wasn't readily available. Next on my list of graphing tools to try out is <a href="http://www.highcharts.com/" target="_blank">High Charts</a>, a Javascript tool for interactive data graphics that also has an accompanying Ruby gem, <a href="http://github.com/michelson/lazy_high_charts/" target="_blank">Lazy High Charts</a>. Then, I can learn how to create awesome stuff like <a href="http://prafulla.net/interesting-contents/world-interesting-contents/us-presidential-election-2012-ohio-as-critical-state-spending-tv-adsinfographics/" target="_blank">this</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Reasons Everyone Should Learn How to Code]]></title>
    <link href="http://eewang.github.com/blog/2013/02/11/5-reasons-everyone-should-learn-how-to-code/"/>
    <updated>2013-02-11T18:33:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/11/5-reasons-everyone-should-learn-how-to-code</id>
    <content type="html"><![CDATA[<p>You should learn how to code. Even if you don't want to be a programmer, coding is the new literacy. Don't worry if you don't have a technical background and never touched code in your life. I came to Flatiron having only taken one programming course ever. I worried that I was too old to learn this stuff; it seemed like everyone was either a computer science major or had been coding since they were kids. However, I've learned that the technology has become much more accessible to beginners in the past few years.</p>

<!--more-->


<p>And at the end of the day, computers are just tools that were built by humans. And while the subject matter isn't easy, its not as mystical or obscure as I had initially thought. At the risk of sounding cliche, its never too late to learn a new skill. Here are five reasons why everyone (including you!) should learn how to code.</p>

<p><strong>1) Be Productive and Have an Impact</strong></p>

<p>Coding is a cheap way to be a maker and creator and to connect with the world around you. Its exhilirating to write some code, start your browser and instantly see what you wrote intepreted on screen. I can't think of many industries where you can immediately see the fruits of your labor. Coming from asset management, I found it difficult to connect my work back to the end beneficiary - retirees, teachers, etc. - as there seemed to be multiple layers of intermediation such that I couldn't see the full impact I was having. With web development, its easier to get immediate gratification from your work.</p>

<p>Coding also enables you to have an outsized impact. Everyone's heard how Facebook, Google, etc. grew out of a college dorm room or garage and are now changing the world in tangible ways. While those home run endeavors are few and far between, its empowering to think that I can create something in a short amount of time and instantly let anyone with Internet access see what I've done. Even in launching this blog, I love the fact that my writing could have an impact on people that I've never even met. Programming opens up a whole new method of communicating and expressing ideas that I had never imagined. For many years, I was just a consumer of the Internet - reading blogs, using applications and playing games. Learning how to code is the first step to becoming a productive member of a modern, Web-enabled society and contributing back to the complex system of tubes that has provided me countless hours of enjoyment and learning.</p>

<p><strong>2) Use Your Entire Brain</strong></p>

<p>Its rare to find an activity that engages both your left brain and right brain as actively as web development. Good, modern web applications are both well designed and analytically powerful programs. When I worked as a editor in charge of layout and design at my college newspaper, I had to think creatively about how to display content - what colors, fonts and page structure would attract readers yet not diminish the written content? In finance, I had to move to the other side of the intellectual spectrum and think much more analytically, use data and solve problems in a structured, deliberate manner. I have found web development to be the best of both worlds - a field that tightly integrates the creative with the analytical in such a way that brings people with varied and diverse skill sets to the same table.</p>

<p><strong>3) Build A Valuable Skill Set</strong></p>

<p>Technology is booming, and good developers are in high demand. I've heard from people in the industry that its not uncommon for start-ups to have high turnover - not because of job dissatisfaction, but rather because there are so many good opportunities out there that developers are able to move around to satisfy their desire to work on new, interesting problems. As technology continues to disrupt industries and economies - just look at how Amazon has transformed the consumer market - companies moving this tidal wave of transformation forward will be eagerly seeking out talented people who are able to understand technology and apply it to business problems. And while consumer-oriented industries like fashion or marketing have already been upended by technology, I'm convinced that the best is still to come for more defensive industries like energy, transportation and healthcare. Even when working in finance, I clearly saw how powerful technology can enhance a company's product strategy and give them a leg up on their competition. This trend toward digitization and the application of technology in process and operations isn't going away anytime soon - might as well get on the leading edge by learning how to code.</p>

<p><strong>4) Work With Passionate People</strong></p>

<p>One thing I learned about myself from working at my college newspaper was that I love working with passionate people. I draw energy from them, and it makes whatever work I'm doing more palatable. In the interactions I've had with entrepreneurs and people at start-ups, its clear to me that developers, designers and the start-up community in general are incredibly passionate about what they do. In fact, you pretty much have to be passionate to start a company, since its easier to get a job at a large company than to venture out on your own. When I talk to people who work in this field, I can just hear in their voice how excited they are to have an impact and execute on an idea.</p>

<p>A great example of the passion technologists have for their craft are hackathons. In New York City, you can probably find a hackathon on any given weekend - I have a friend who goes to a few hackathons a month. The simple fact that these exist is a testament to passion; developers are willing to spend an entire Saturday coding and hacking away at a single problem. They are there because they are excited about solving problems and want to think creatively about how to improve the world around them. I've been to two hackathons, one about energy and the environment and the other about music. However, in the past month alone, I've heard about hackathons covering fashion, education and sanitation. There's a hackathon in a few months for government and civic institutions. The people going to these hackathons are not going for the money (although some do offer cash prizes); they're attending because they're passionate.</p>

<p><strong>5) Enjoy a Lifetime of Learning</strong></p>

<p>When you first begin to explore technology, you'll quickly learn (as I did) how much there is out there to learn. Each concept I learned about opened the door to 10 more concepts. Technology is a very, very long rabbit hole, but once you get started, you'll never run out of concepts to explore, in large part because its such a dynamic and fast-growing field. Each year, developers produce new frameworks and new languages; in fact, Ruby itself is only two decades old, and didn't really catch fire until the mid-2000s. The scope of technology is increasing faster than I can learn new skills.</p>

<p>In addition to learning Ruby and web development, I'm interested in exploring design, writing iOS applications and creating data visualizations. Obviously, I won't be able to tackle all of those goals in the 12-week Flatiron program. But learning how to code is the bedrock foundation for really understanding technology, so I'm excited to take what I'm learning here and extending that over and over again in the future as I continue my education.</p>

<hr />

<p>I hope those 5 reasons provide enough motivation to start the lifelong journey of learning how to use technology as a tool through code. If you're a developer or learning how to program, what made you first want to code? What were some of the difficulties in getting started? If you don't have any interest in coding, why not? I don't think everyone is meant to be a programmer, but there are certainly misconceptions and assumptions about coding that cause people to establish mental obstacles to actually trying to learn, and I'd like to hear what people think.</p>
]]></content>
  </entry>
  
</feed>
