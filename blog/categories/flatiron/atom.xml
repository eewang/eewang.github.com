<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron | DEV-ilicious]]></title>
  <link href="http://eewang.github.com/blog/categories/flatiron/atom.xml" rel="self"/>
  <link href="http://eewang.github.com/"/>
  <updated>2013-02-14T08:30:38-05:00</updated>
  <id>http://eewang.github.com/</id>
  <author>
    <name><![CDATA[Eugene Wang]]></name>
    <email><![CDATA[eugene.wang@flatironschool.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 Reasons Everyone Should Learn How to Code]]></title>
    <link href="http://eewang.github.com/blog/2013/02/11/5-reasons-everyone-should-learn-how-to-code/"/>
    <updated>2013-02-11T18:33:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/11/5-reasons-everyone-should-learn-how-to-code</id>
    <content type="html"><![CDATA[<p>You should learn how to code. Even if you don't want to be a programmer, coding is the new literacy. Don't worry if you don't have a technical background and never touched code in your life. I came to Flatiron having only taken one programming course ever. I worried that I was too old to learn this stuff; it seemed like everyone was either a computer science major or had been coding since they were kids. However, I've learned that the technology has become much more accessible to beginners in the past few years.</p>

<!--more-->


<p>And at the end of the day, computers are just tools that were built by humans. And while the subject matter isn't easy, its not as mystical or obscure as I had initially thought. At the risk of sounding cliche, its never too late to learn a new skill. Here are five reasons why everyone (including you!) should learn how to code.</p>

<p><strong>1) Be Productive and Have an Impact</strong></p>

<p>Coding is a cheap way to be a maker and creator and to connect with the world around you. Its exhilirating to write some code, start your browser and instantly see what you wrote intepreted on screen. I can't think of many industries where you can immediately see the fruits of your labor. Coming from asset management, I found it difficult to connect my work back to the end beneficiary - retirees, teachers, etc. - as there seemed to be multiple layers of intermediation such that I couldn't see the full impact I was having. With web development, its easier to get immediate gratification from your work.</p>

<p>Coding also enables you to have an outsized impact. Everyone's heard how Facebook, Google, etc. grew out of a college dorm room or garage and are now changing the world in tangible ways. While those home run endeavors are few and far between, its empowering to think that I can create something in a short amount of time and instantly let anyone with Internet access see what I've done. Even in launching this blog, I love the fact that my writing could have an impact on people that I've never even met. Programming opens up a whole new method of communicating and expressing ideas that I had never imagined. For many years, I was just a consumer of the Internet - reading blogs, using applications and playing games. Learning how to code is the first step to becoming a productive member of a modern, Web-enabled society and contributing back to the complex system of tubes that has provided me countless hours of enjoyment and learning.</p>

<p><strong>2) Use Your Entire Brain</strong></p>

<p>Its rare to find an activity that engages both your left brain and right brain as actively as web development. Good, modern web applications are both well designed and analytically powerful programs. When I worked as a editor in charge of layout and design at my college newspaper, I had to think creatively about how to display content - what colors, fonts and page structure would attract readers yet not diminish the written content? In finance, I had to move to the other side of the intellectual spectrum and think much more analytically, use data and solve problems in a structured, deliberate manner. I have found web development to be the best of both worlds - a field that tightly integrates the creative with the analytical in such a way that brings people with varied and diverse skill sets to the same table.</p>

<p><strong>3) Build A Valuable Skill Set</strong></p>

<p>Technology is booming, and good developers are in high demand. I've heard from people in the industry that its not uncommon for start-ups to have high turnover - not because of job dissatisfaction, but rather because there are so many good opportunities out there that developers are able to move around to satisfy their desire to work on new, interesting problems. As technology continues to disrupt industries and economies - just look at how Amazon has transformed the consumer market - companies moving this tidal wave of transformation forward will be eagerly seeking out talented people who are able to understand technology and apply it to business problems. And while consumer-oriented industries like fashion or marketing have already been upended by technology, I'm convinced that the best is still to come for more defensive industries like energy, transportation and healthcare. Even when working in finance, I clearly saw how powerful technology can enhance a company's product strategy and give them a leg up on their competition. This trend toward digitization and the application of technology in process and operations isn't going away anytime soon - might as well get on the leading edge by learning how to code.</p>

<p><strong>4) Work With Passionate People</strong></p>

<p>One thing I learned about myself from working at my college newspaper was that I love working with passionate people. I draw energy from them, and it makes whatever work I'm doing more palatable. In the interactions I've had with entrepreneurs and people at start-ups, its clear to me that developers, designers and the start-up community in general are incredibly passionate about what they do. In fact, you pretty much have to be passionate to start a company, since its easier to get a job at a large company than to venture out on your own. When I talk to people who work in this field, I can just hear in their voice how excited they are to have an impact and execute on an idea.</p>

<p>A great example of the passion technologists have for their craft are hackathons. In New York City, you can probably find a hackathon on any given weekend - I have a friend who goes to a few hackathons a month. The simple fact that these exist is a testament to passion; developers are willing to spend an entire Saturday coding and hacking away at a single problem. They are there because they are excited about solving problems and want to think creatively about how to improve the world around them. I've been to two hackathons, one about energy and the environment and the other about music. However, in the past month alone, I've heard about hackathons covering fashion, education and sanitation. There's a hackathon in a few months for government and civic institutions. The people going to these hackathons are not going for the money (although some do offer cash prizes); they're attending because they're passionate.</p>

<p><strong>5) Enjoy a Lifetime of Learning</strong></p>

<p>When you first begin to explore technology, you'll quickly learn (as I did) how much there is out there to learn. Each concept I learned about opened the door to 10 more concepts. Technology is a very, very long rabbit hole, but once you get started, you'll never run out of concepts to explore, in large part because its such a dynamic and fast-growing field. Each year, developers produce new frameworks and new languages; in fact, Ruby itself is only two decades old, and didn't really catch fire until the mid-2000s. The scope of technology is increasing faster than I can learn new skills.</p>

<p>In addition to learning Ruby and web development, I'm interested in exploring design, writing iOS applications and creating data visualizations. Obviously, I won't be able to tackle all of those goals in the 12-week Flatiron program. But learning how to code is the bedrock foundation for really understanding technology, so I'm excited to take what I'm learning here and extending that over and over again in the future as I continue my education.</p>

<hr />

<p>I hope those 5 reasons provide enough motivation to start the lifelong journey of learning how to use technology as a tool through code. If you're a developer or learning how to program, what made you first want to code? What were some of the difficulties in getting started? If you don't have any interest in coding, why not? I don't think everyone is meant to be a programmer, but there are certainly misconceptions and assumptions about coding that cause people to establish mental obstacles to actually trying to learn, and I'd like to hear what people think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Week 1 Redux]]></title>
    <link href="http://eewang.github.com/blog/2013/02/10/flatiron-week-1-redux/"/>
    <updated>2013-02-10T14:00:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/10/flatiron-week-1-redux</id>
    <content type="html"><![CDATA[<p>Flatiron is now 1/12 the way done. The first week has been pretty great; after lecture on Friday I felt physically exhausted, but mentally I was running a mile a minute, thinking of all the stuff that's out there to learn. My schedule has generally been to get into school around 9 am, morning lecture, lunch, afternoon lecture, group work, then wrap up around 6 pm, after which I'll stay until 7:30/8:00. I realize that it's only been one week, but I've already learned a ton.</p>

<!--more-->


<p>Here are a few of my high-level thoughts on how the first week went:</p>

<p><strong>1) The interwebs are awesome</strong></p>

<p>The Internet is essentially the largest, most secure and most accessible library humans have ever known is available largely for free. If you take a step back and think about it, you'll realize how remarkable that is. The fact that I can search, communicate, schedule and manage my life using Google's services and products without paying them is amazing. I'll pay more today for a cup of coffee than I have ever paid Google, despite the fact that I depend on Google to manage my e-mail, calendar and data. And while I'm fully cognizant of the fact that "if you're not paying for it, you're the product," I'd rather have it that way than for the Internet to be only accessible to people with money. If I can rely on advertisers and data providers to subsidize my learning and exploration, I'm more or less okay with that.</p>

<p><strong>2) "Coding is not rocket surgery"</strong></p>

<p>Computers tend to be perceived as magical black boxes. You click on an browser icon, type in a URL and bam, you have the world's information at your fingertips. But in actuality, computers aren't that smart - they're just really good at following instructions and doing the same thing over and over again. On the other hand, humans are great at inferring context, understanding nuance and efficiently processing a statement like "Do you mind making me a sandwich?" - which is actually a subtle command in the form of a question. Computers, on the other hand, need to be told exactly what to do. However, computers, unlike humans, don't get tired. Thus, computer science is more like the study of operations, and the purpose of coding is to automate processes and operational procedures so that humans can be freed to do what they do best - be creative and make complex decisions.</p>

<p>This means that to be able to tell a computer what to do (i.e., be a programmer), you need to just be very good at communicating a specific set of instructions. And once you take a look under the hood of a computer (my recommendation would be to start using your <a href="http://en.wikipedia.org/wiki/Terminal_(OS_X)" target="_blank">terminal</a> to access files and applications), you'll realize as I've realized that programs are created by people and can be understood so long as you put in the time and effort to read through the program instructions and follow the logic tree. Avi captured this well by claiming that "coding is not rocket surgery" - not to diminish the challenge of learning how to code, but rather to demystify the process and encourage beginners to overcome the mental barrier of understanding computers not as objects of frustration but as tools to be used.</p>

<p><strong>3) There is so much out there to learn</strong></p>

<p>A good chunk of the first week was spent working on our student profiles, setting up our blogs and generally getting acquainted with the school and day-to-day schedule. In terms of subject matter, we covered the following topics this week:</p>

<ul>
  <li>Git/GitHub</li>
  <li>SQL</li>
  <li>Ruby</li>
  <li>Environment set-up</li>
  <li>Basic HTML/CSS</li>
</ul>


<p>Each of these topics can get pretty in depth in their own right. We've just scratched the surface on Ruby, for example. But as I've found in learning most anything, the more you explore, the more you find to explore. Like going down a rabbit hole, we're just getting started.</p>

<p><strong>4) Some pretty cool people are learning to code</strong></p>

<p>I've met a bunch of awesome people in class (including our <a href="http://shitavisays.tumblr.com" target="_blank">great instructor</a>). The backgrounds of the students are pretty diverse. In addition to the people working in finance or professional services before starting Flatiron (myself included, this is New York, after all), there are people who worked as designers, entrepreneurs, teachers - we even a professional poker player in class. This diversity of professional background makes for interesting conversations, and its been great to talk to my classmates about what interests them and for how they hope to use technology to better pursue their passions. I used to think that my career options were binary - either pursue technology or explore my passion for media, education and public policy. Instead, I've realized that technology doesn't supplant my passions; technology complements and enhances my passions.</p>

<p><strong>5) This stuff is fun</strong></p>

<p>At the end of the day, programming should be fun and enjoyable. Coding is much more about creative expression than I had imagined before; after all, Matz created Ruby to make developers <a href="http://www.artima.com/intv/rubyP.html" target="_blank">happy</a>. My first exposure to computers and technology was through my parents, who worked as engineers for a large telecom company for many years. Watching them, I never considered technology to be a creative endeavor - it seemed like much more of a 9 to 5 job than I've come to realize. Since moving to New York though, its become clear to me that people in the tech sphere tend to be intellectually and creatively engaged with their craft, even to the point of "working" well beyond the daytime hours and into the weekends. <a href="http://en.wikipedia.org/wiki/Hackathon" target="_blank">Hackathons</a> are great examples of this. The whole concept of a hackathon - an intensive, focused effort to solve a problem that brings together developers, designers and subject matter experts - is to engage in creative problem solving, not to follow a rote set of instructions. Not only are hackathons indicative of passion people in technology have for their craft, its also an expression of community - a desire to work together with people of different skill sets toward a single goal.</p>

<p>Flatiron has tried to imbue in us a sense of community, that programmers work better together than apart. Coding used to be an endeavor that people would do in their basements, alone, late at night. But it doesn't have to be this way. In fact, its much more enjoyable to code and program in a community of people so you can bounce ideas off of them, explore new technologies and learn from each other. For me, this was one of the most appealing aspects of doing an intensive, full-time program like Flatiron as opposed to learning in isolation. For the latter half of 2012, I was trying to learn this stuff on my own - using online tools like <a href="http://www.codecademy.com" target="_blank">Codecademy</a>, <a href="http://www.udacity.com" target="_blank">Udacity</a> and <a href="http://www.codeschool.com" target="_blank">Code School</a>. All of those tools were great, but its challenging, frustrating and, frankly, kind of boring, to learn coding entirely on your own, especially if you have a full-time (and then some) job as I did. Thankfully, I had my brother to mentor me and help me along when I hit a roadbump, as he was busy building <a href="http://www.leaguevine.com/" target="_blank">Leaguevine</a> at the time. I've found that learning in a focused group environment like at Flatiron School to not only be more fun, but also more efficient; before it might take me a whole afternoon and a whole lot of Stack Overflow-ing to debug a few lines of code, now I can easily ask others for help, which allows me to fix problems more quickly and learn more about what I'm doing in the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Day 005]]></title>
    <link href="http://eewang.github.com/blog/2013/02/08/flatiron-day-005/"/>
    <updated>2013-02-08T23:44:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/08/flatiron-day-005</id>
    <content type="html"><![CDATA[<p>In grade school, snow days meant building snowmen, tossing snow balls and going sledding. At the Flatiron School, snow days mean 6 hours of lecture via video conference. Avi and Co "cancelled" class today in advance of Snowmageddon 2013, but only in the sense that we weren't expected to physically be in class. Instead, Avi set up a videoconference and hosted virtual class where we continued exploring Ruby.</p>

<!--more-->


<p>We covered a range of topics today. Starting with a review of our homework, Avi discussed iteration, arrays, string methods, regular expressions, symbols, variable scope, blocks and hashes. Whew! We went through a lot of material today, but I think I'm grasping everything decently well. Its been pretty interesting to think about how there always seems to be more than one way of doing something in Ruby.</p>

<p>A good example of that was the homework we had last night. We had to write a simple <a href="http://en.wikipedia.org/wiki/Fizz_buzz" target="_blank">FizzBuzz</a> program and extend that to find all numbers that fizz, buzz or fizzbuzz within a range. I've posted my code below. What's amazed me about coding, though, is that there are <a href="http://rosettacode.org/wiki/FizzBuzz" target="_blank">countless</a> ways of doing the same thing, both within and across languages. For example, the "trick" to FizzBuzz is to recognize that Fizz and Buzz combine to make FizzBuzz. This means that my code below, while it gets the job done, is not the most efficient and probaly not up to best practices. I have three strings for the three results, but in fact I should only have two strings - Fizz and Buzz, which combine to make FizzBuzz.</p>

<p>Avi showed us a bunch of different ways to code the FizzBuzz problem, and if there's a ton of different ways to solve the simple FizzBuzz problem, I can only begin to imagine how many infinite paths there are to building more complex applications. That thought is exciting to me; there are many paths out there that haven't yet been explored and technology continues to be a space of great potential for human creativity and ingenuity. When I think back to a year ago, a part of me was resigned to thinking that we've reached the end of the road for technology - we have Google, Facebook and Twitter, what else could be out there? However, now that I've taken a peek under the hood of the web and seen a glimpse of what is possible, I'm convinced that the best is yet to come. Not just in web development, but in technology more broadly. 3-D printing, Internet-enabled hardware, sensors - the possibilities are limitless for the technology platforms that are only now in their infancy. Its both humbling and exciting to think about.</p>

<hr />

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Define variable scope and initialize arrays&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="vg">$fizzer</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="vg">$buzzer</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="vg">$fizzbuzzer</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="vg">$remainder</span> <span class="o">=</span> <span class="o">[]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Method to calculate fizzbuzz for any given number&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">fizzbuzz</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;FizzBuzz&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  elsif num % 3 == 0&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;Fizz&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">elsif</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;Buzz&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  else&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;Not divided by 3 or 5&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Method to ask a user to input a number they want to fizzbuzz&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">fizzbuzz_ask</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;What number do you want to fizzbuzz? &quot;</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="n">fizzbuzz</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Method to fizzbuzz a range of numbers&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">fizzbuzz_loop</span><span class="p">(</span><span class="n">num1</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">num2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">num1</span><span class="o">.</span><span class="n">.num2</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;if i % 3 == 0 &amp;amp;&amp;amp; i % 5 == 0</span>
</span><span class='line'><span class="sr">  $fizzbuzzer &amp;lt;&amp;lt; i</span>
</span><span class='line'><span class="sr">elsif i % 3 == 0</span>
</span><span class='line'><span class="sr">  $fizzer &amp;lt;&amp;lt; i</span>
</span><span class='line'><span class="sr">elsif i % 5 == 0</span>
</span><span class='line'><span class="sr">  $buzzer &amp;lt;&amp;lt; i</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  $remainder &amp;lt;&amp;lt; i</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Method</span> <span class="n">to</span> <span class="n">ask</span> <span class="n">a</span> <span class="n">user</span> <span class="n">to</span> <span class="n">define</span> <span class="n">the</span> <span class="n">start</span> <span class="ow">and</span> <span class="k">end</span> <span class="n">points</span> <span class="k">for</span> <span class="n">fizzbuzz</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def fizzbuzz_loop_ask</span>
</span><span class='line'><span class="sr">  print &quot;Where do you want to start fizzbuzzing? &quot;</span>
</span><span class='line'><span class="sr">  start = gets.to_i</span>
</span><span class='line'><span class="sr">  print &quot;Where do you want to end fizzbuzzing? &quot;</span>
</span><span class='line'><span class="sr">  finish = gets.to_i</span>
</span><span class='line'><span class="sr">  while finish == &quot;&quot;.to_i&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;Sorry, please input an ending value. Where do you want to end fizzbuzzing?&quot;</span>
</span><span class='line'><span class="n">finish</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'>  <span class="n">fizzbuzz_loop</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">finish</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Fizzbuzz method calls&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">fizzbuzz_ask</span>
</span><span class='line'><span class="n">fizzbuzz_loop_ask</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Print results of fizzbuzz calls&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;fizzer: </span><span class="si">#{</span><span class="vg">$fizzer</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;buzzer: </span><span class="si">#{</span><span class="vg">$buzzer</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;fizzbuzzer: </span><span class="si">#{</span><span class="vg">$fizzbuzzer</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;no fizz or buzz: </span><span class="si">#{</span><span class="vg">$remainder</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Day 003]]></title>
    <link href="http://eewang.github.com/blog/2013/02/06/flatiron-day-003/"/>
    <updated>2013-02-06T11:30:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/06/flatiron-day-003</id>
    <content type="html"><![CDATA[<p>On Day 3 of The Flatiron School, we continued setting up our Octopress blogs. Avi walked through the rake commands and how each one works, which was helpful in demystifying the commands and directory structure. He reassured us that all of the commands that we execute to create new posts, deploy the site, etc., could themselves be found in files in our application. We examined the Gemfile and Rakefile, making small manipulations and running test code to make sure that they worked.</p>

<!--more-->


<p>I wrote a short script to automate the process of deploying the blog ("rake deploy"), staging files on git ("git add ."), commiting files ("git commit -am 'message'") and pushing files to a remote repository on Github. Its pretty simple and permits users to add in a commit message. Here is the code to put in your Rakefile:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Add files to github, commit and deploy&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:gen_deploy_push</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">msg</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="no">STDOUT</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;What is your commit message? &quot;</span>
</span><span class='line'>  <span class="n">msg</span> <span class="o">=</span> <span class="no">STDIN</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;rake gen_deploy&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;git add .&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;git commit -am &#39;</span><span class="si">#{</span><span class="n">msg</span><span class="si">}</span><span class="s2">&#39;&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s2">&quot;git push&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;commit message was &#39;</span><span class="si">#{</span><span class="n">msg</span><span class="si">}</span><span class="s2">&#39;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I think the code is fairly straightforward - basically the user inputs a commit message and then the command will deploy the site while commiting the code to Github.</p>

<p>After a morning spent working through the intricacies of the Gemfile and Rakefile in the Octopress application (it looks intimidating, but I found it very helpful to examine the code underlying a command before executing it - makes coding seem less like magic and more like an intricate sequence of interconnected logic), we broke for lunch. In the afternoon, we shifted gears to databases, specifically learning Structured Query Language (SQL). I first learned SQL a few years back when I interned at KPMG. I was part of the Forensic Advisory group, which used Microsoft SQL Server to comb through millions of rows of data and run pricing analyses for pharmaceutical companies. However, even though I learned the syntax and general structure of SQL at KPMG, a lot of it was more copying pre-written SQL queries and modifying them at the margins, rather than writing my own from scratch, so the exercises today were pretty helpful.</p>

<p>After a brief lecture on SQL by Avi, we broke up into our groups and designed a schema for a simple quiz app. This app would have users, quizzes, questions, choices and answers, and the challenge for us was to determine the optimal database design to address the immediate use cases while also leaving room to hypothetically scale the database. Once we created a schema, we then practice writing SQL queries to create, manipulate and access that database. For the rest of the afternoon, we worked as a class to build the quiz app database, with each group contributing a piece of the database structure and Avi using the differences between our schemas to comment on the pros and cons of schema designs.</p>

<p>For me, the class has been moving along at a brisk but manageable pace. In the course of three days, it seems like we've covered a boatload of material related to git, environment setup and databases, but I know that that's just the beginning of the journey. We haven't even systematically delved into Javascript, Ruby or Rails yet! Its exciting to think of all the stuff that's out there to learn - I just need to be diligent and purposeful in completing the homework and grabbing every opportunity to learn something new or contribute to a project, no matter how small.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron - Day 002]]></title>
    <link href="http://eewang.github.com/blog/2013/02/05/flatiron-day-002/"/>
    <updated>2013-02-05T17:10:00-05:00</updated>
    <id>http://eewang.github.com/blog/2013/02/05/flatiron-day-002</id>
    <content type="html"><![CDATA[<p>Day 2 of The Flatiron School was a success. Today's main focus was to set up our Octopress blogs (the result of which is on your screen) and set up our development environments. Its remarkable to think about all of the stuff that goes on \"under the hood\" when developing software - before today I didn't really know what dot files were, and now I realize how fundamental they are to a smooth development experience (case in point, I screwed up my .bash_profile yesterday and that nearly forced me to reformat my machine).</p>

<!--more-->


<p>We started the day going through the various environment issues, including:</p>

<ul>
  <li>Installing necessary development tools like Homebrew, Ruby Version Manager and SQLite3</li>
  <li>Configuring our multiple dot files, including .gitconfig, .bash_profile, .irbrc, .gitignore and .gemrc, adding aliases and modifying preferences</li>
  <li>Pimping out our machines by installing an array of cool programs, like Solarize (for bash and Sublime Text), Alfred (powerful search tool) and Base 2 (visualize SQL queries)</li>
</ul>


<p>Getting everything set up took most of the morning, as we would use Avi's dot files as a base and slowly apply changes as we moved forward. For me, learning to use the bash shell has been great, if a bit challenging. Using the shell to interact with your machine makes the user considerably more powerful and efficient in navigating the file system and making changes. However, its a bit of a learning curve, as before I started learning how to code, I accessed files via icons like the vast majority of computer users - I never gave a fleeting thought to the more powerful mode of interacting with a computer that is the Terminal.</p>

<p>At around noon, we left to go to visit the offices of Pivotal Labs - a Ruby development shop in Union Square - where we enjoyed a catered lunch and heard Avi speak about the history of code. Avi Flombaum is a developer-philosopher, if there ever was one. Actually, he'd probably prefer philosopher-developer. Starting with the fundamentals of coding as communication, Avi weaved together a story that originated with ancient cavemen, using recipes as the first programs, and moved through the fathers (and mothers) of modern programming - luminaries like Ada Lovelace, Alan Turing and Nicola Tesla (among many others).</p>

<p>Here are just a few quotes from several of the awesome people Avi talked about today. The one that stuck with me the most was the last quote by Tesla - he basically predicted the modern web more than a century ago and recognized that the ability to broadly distribute and transmit information would revolutionize economies and societies. Also, Alan Kay's quote was encouraging, in that despite the massive growth of the Internet in the past decade, there is still way more to be done. We've only seen the tip of the iceberg. As someone starting to learn how to manipulate technology, its reassuring to think that I\'m getting out in front of the wave rather than catching the end.</p>

<blockquote>
  <p>The real romance is out ahead and yet to come. The computer revolution hasn't started yet. Don't be misled by the enormous flow of money into bad defacto standards for unsophisticated buyers using poor adaptations of incomplete ideas. </p>
  <p>-- Alan Kay, computer scientist</p>
</blockquote>




<blockquote>
  <p>The web is more a social creation than a technical one. I designed it for a social effect — to help people work together — and not as a technical toy. The ultimate goal of the Web is to support and improve our weblike existence in the world. We clump into families, associations, and companies. We develop trust across the miles and distrust around the corner. </p>
  <p>-- Tim Berners-Lee, investor of the World Wide Web</p>
</blockquote>




<blockquote>
  <p>It will soon be possible, for instance, for a business man in New York to dictate instructions and to have them appear instantly in type in London or elsewhere. He will be able to call up from his desk and talk with any telephone subscriber in the world. it will only be necessary to carry an inexpensive instrument not bigger than a watch, which will enable its bearer to hear anywhere on sea or land for distances of thousands of miles. One may listen or transmit speech or song to the uttermost parts of the world. In the same way any kind of picture, drawing, or print can be transferred from one place to another. It will be possible to operate millions of such instruments from a single station. Thus it will be a simple matter to keep the uttermost parts of the world in instant touch with each other. The song of a great singer, the speech of a political leader, the sermon of a great divine, the lecture of a man of science may thus be delivered to an audience scattered all over the world. </p>
  <p>-- Nikola Tesla, scientist, in 1909 (!)</p>
</blockquote>


<p>It was great to hear Avi's passion for coding not as merely a process of learning a whole bunch of different computer programming languages, but as a method of rich communication between humans - a method that enables immense creativity and expressiveness and is built for humans rather than computers. To hear his love of coding was inspirational. He was able to break down the immensely complex task of creating software - just to communicate with a server requires a whole host of actions, before any of the actual functional code of a program is written - into simple, manageable problems. This deconstruction-synthesis approach to programming - understanding a large problem and deconstructing it into smaller problems, then reconstructing it into a integrated system - is applicable across all industries and systems, both artificial and natural.</p>

<p>Take the human body for example. The human body is an unfathomably complex system, but 99% of it is below the surface. Its like the ubiquitous iceberg example - most of the complexity is "under the hood". However, when you study the body, you can break it down into individual, relatively less complex components. The human body is comprised of the circulatory system, nervous system, skeletal system, etc. The circulatory system is comprised of veins and arteries that transport red blood cells. The red blood cells are living organisms that are comprised of nuclei, ribosomes, mitochondria and a whole host of other sub-cellular units that I've long since forgot. And so on. The complexity at first seems daunting and unmanageable, but once you learn how to break it down into its constituent parts and understand the interactivity between them, building a system becomes a more manageable mountain to scale.</p>

<p>I think its important to take a similar approach to web development. Or any form of problem solving, for that matter. Thinking about problems in this way does more than make the large problem you're trying to solve for more manageable - it also provides motivation to keep moving forward even when wading knee deep in code. It can be frustrating working on a single bug or trying to get a small chunk of code to work, but knowing how that small bug or code set fits within a larger system can be a motivating force to keep progressing, at least for me. I'm someone that likes to understand how the components of a larger system work together, and that general understanding makes it easier for me to work on the details than if I had no idea of the bigger problem I was trying to solve.</p>

<p>Avi's passion for coding is infectious. If you ever have a chance to take a class with him - do it. Avi makes learning how to code about so much more than using git or writing Ruby code or knowing how to manipulate a bash profile. He connects the journey of coding with a larger, innate human desire to communicate, to structure and express the hard-to-articulate thoughts in a way that can be useful to others. In many ways, its more than just a profession or a job, its a way of thinking about life - a philosophy of communication, learning and interaction. But don't let this scare you, rather, it should excite you. It should excite you to find underlying connections between seemingly disparate industries, subjects and areas of human exploration. It should excite you that you can learn a common approach to solving problems that can be used in an almost infinite number of applications. It should excite you that there are common patterns across our day-to-day lives, both in software and in human connections. This should provide a basis for a deep desire to learn and explore, from which only great and awesome things can come.</p>
]]></content>
  </entry>
  
</feed>
